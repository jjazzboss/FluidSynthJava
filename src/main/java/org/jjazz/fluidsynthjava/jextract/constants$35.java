// Generated by jextract

package org.jjazz.fluidsynthjava.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$35 {

    static final FunctionDescriptor fluid_sfont_get_preset$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle fluid_sfont_get_preset$MH = RuntimeHelper.downcallHandle(
        fluidsynth_h.LIBRARIES, "fluid_sfont_get_preset",
        "(Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        constants$35.fluid_sfont_get_preset$FUNC, false
    );
    static final FunctionDescriptor fluid_sfont_iteration_start$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle fluid_sfont_iteration_start$MH = RuntimeHelper.downcallHandle(
        fluidsynth_h.LIBRARIES, "fluid_sfont_iteration_start",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$35.fluid_sfont_iteration_start$FUNC, false
    );
    static final FunctionDescriptor fluid_sfont_iteration_next$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle fluid_sfont_iteration_next$MH = RuntimeHelper.downcallHandle(
        fluidsynth_h.LIBRARIES, "fluid_sfont_iteration_next",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$35.fluid_sfont_iteration_next$FUNC, false
    );
    static final FunctionDescriptor fluid_preset_get_name_t$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle fluid_preset_get_name_t$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$35.fluid_preset_get_name_t$FUNC, false
    );
    static final FunctionDescriptor fluid_preset_get_banknum_t$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
}


