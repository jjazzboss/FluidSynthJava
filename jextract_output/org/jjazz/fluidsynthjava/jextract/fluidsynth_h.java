// Generated by jextract

package org.jjazz.fluidsynthjava.jextract;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class fluidsynth_h {

    fluidsynth_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("libfluidsynth.so.3", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int _STDIO_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return _STDIO_H;
    }
    private static final int _FEATURES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return _FEATURES_H;
    }
    private static final int _DEFAULT_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return _DEFAULT_SOURCE;
    }
    private static final int __GLIBC_USE_ISOC2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return __GLIBC_USE_ISOC2X;
    }
    private static final int __USE_ISOC11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return __USE_ISOC11;
    }
    private static final int __USE_ISOC99 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return __USE_ISOC99;
    }
    private static final int __USE_ISOC95 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return __USE_ISOC95;
    }
    private static final int __USE_POSIX_IMPLICITLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return __USE_POSIX_IMPLICITLY;
    }
    private static final int _POSIX_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return _POSIX_SOURCE;
    }
    private static final int __USE_POSIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return __USE_POSIX;
    }
    private static final int __USE_POSIX2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return __USE_POSIX2;
    }
    private static final int __USE_POSIX199309 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return __USE_POSIX199309;
    }
    private static final int __USE_POSIX199506 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return __USE_POSIX199506;
    }
    private static final int __USE_XOPEN2K = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return __USE_XOPEN2K;
    }
    private static final int __USE_XOPEN2K8 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return __USE_XOPEN2K8;
    }
    private static final int _ATFILE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return _ATFILE_SOURCE;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __WORDSIZE_TIME64_COMPAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return __WORDSIZE_TIME64_COMPAT32;
    }
    private static final int __SYSCALL_WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return __SYSCALL_WORDSIZE;
    }
    private static final int __USE_MISC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return __USE_MISC;
    }
    private static final int __USE_ATFILE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return __USE_ATFILE;
    }
    private static final int __USE_FORTIFY_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return __USE_FORTIFY_LEVEL;
    }
    private static final int __GLIBC_USE_DEPRECATED_GETS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return __GLIBC_USE_DEPRECATED_GETS;
    }
    private static final int __GLIBC_USE_DEPRECATED_SCANF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return __GLIBC_USE_DEPRECATED_SCANF;
    }
    private static final int _STDC_PREDEF_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return _STDC_PREDEF_H;
    }
    private static final int __STDC_IEC_559__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return __STDC_IEC_559__;
    }
    private static final int __STDC_IEC_559_COMPLEX__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return __STDC_IEC_559_COMPLEX__;
    }
    private static final int __GNU_LIBRARY__ = (int)6L;
    /**
     * {@snippet lang=c :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return __GNU_LIBRARY__;
    }
    private static final int __GLIBC__ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return __GLIBC__;
    }
    private static final int __GLIBC_MINOR__ = (int)35L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return __GLIBC_MINOR__;
    }
    private static final int _SYS_CDEFS_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return _SYS_CDEFS_H;
    }
    private static final int __glibc_c99_flexarr_available = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return __glibc_c99_flexarr_available;
    }
    private static final int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI;
    }
    private static final int __HAVE_GENERIC_SELECTION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return __HAVE_GENERIC_SELECTION;
    }
    private static final int __GLIBC_USE_LIB_EXT2 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return __GLIBC_USE_LIB_EXT2;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return __GLIBC_USE_IEC_60559_BFP_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_BFP_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return __GLIBC_USE_IEC_60559_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT;
    }
    private static final int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X;
    }
    private static final int __GLIBC_USE_IEC_60559_TYPES_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return __GLIBC_USE_IEC_60559_TYPES_EXT;
    }
    private static final int __GNUC_VA_LIST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return __GNUC_VA_LIST;
    }
    private static final int _BITS_TYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return _BITS_TYPES_H;
    }
    private static final int _BITS_TYPESIZES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return _BITS_TYPESIZES_H;
    }
    private static final int __OFF_T_MATCHES_OFF64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return __OFF_T_MATCHES_OFF64_T;
    }
    private static final int __INO_T_MATCHES_INO64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return __INO_T_MATCHES_INO64_T;
    }
    private static final int __RLIM_T_MATCHES_RLIM64_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return __RLIM_T_MATCHES_RLIM64_T;
    }
    private static final int __STATFS_MATCHES_STATFS64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return __STATFS_MATCHES_STATFS64;
    }
    private static final int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64;
    }
    private static final int __FD_SETSIZE = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return __FD_SETSIZE;
    }
    private static final int _BITS_TIME64_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return _BITS_TIME64_H;
    }
    private static final int _____fpos_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return _____fpos_t_defined;
    }
    private static final int ____mbstate_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return ____mbstate_t_defined;
    }
    private static final int _____fpos64_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return _____fpos64_t_defined;
    }
    private static final int ____FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return ____FILE_defined;
    }
    private static final int __FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return __FILE_defined;
    }
    private static final int __struct_FILE_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return __struct_FILE_defined;
    }
    private static final int _IO_EOF_SEEN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return _IO_EOF_SEEN;
    }
    private static final int _IO_ERR_SEEN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return _IO_ERR_SEEN;
    }
    private static final int _IO_USER_LOCK = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return _IO_USER_LOCK;
    }
    private static final int _IOFBF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return _IOFBF;
    }
    private static final int _IOLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return _IOLBF;
    }
    private static final int _IONBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return _IONBF;
    }
    private static final int BUFSIZ = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return BUFSIZ;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int _BITS_STDIO_LIM_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return _BITS_STDIO_LIM_H;
    }
    private static final int L_tmpnam = (int)20L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return L_tmpnam;
    }
    private static final int TMP_MAX = (int)238328L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int FILENAME_MAX = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return FILENAME_MAX;
    }
    private static final int L_ctermid = (int)9L;
    /**
     * {@snippet lang=c :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return L_ctermid;
    }
    private static final int FOPEN_MAX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return FOPEN_MAX;
    }
    private static final int __HAVE_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return __HAVE_FLOAT128;
    }
    private static final int __HAVE_DISTINCT_FLOAT128 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return __HAVE_DISTINCT_FLOAT128;
    }
    private static final int __HAVE_FLOAT64X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return __HAVE_FLOAT64X;
    }
    private static final int __HAVE_FLOAT64X_LONG_DOUBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return __HAVE_FLOAT64X_LONG_DOUBLE;
    }
    private static final int __HAVE_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return __HAVE_FLOAT16;
    }
    private static final int __HAVE_FLOAT32 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return __HAVE_FLOAT32;
    }
    private static final int __HAVE_FLOAT64 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return __HAVE_FLOAT64;
    }
    private static final int __HAVE_FLOAT32X = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return __HAVE_FLOAT32X;
    }
    private static final int __HAVE_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return __HAVE_FLOAT128X;
    }
    private static final int __HAVE_DISTINCT_FLOAT32 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return __HAVE_DISTINCT_FLOAT32;
    }
    private static final int __HAVE_DISTINCT_FLOAT64 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return __HAVE_DISTINCT_FLOAT64;
    }
    private static final int __HAVE_DISTINCT_FLOAT32X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return __HAVE_DISTINCT_FLOAT32X;
    }
    private static final int __HAVE_DISTINCT_FLOAT64X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return __HAVE_DISTINCT_FLOAT64X;
    }
    private static final int __HAVE_FLOATN_NOT_TYPEDEF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return __HAVE_FLOATN_NOT_TYPEDEF;
    }
    private static final int BUILD_SHARED_LIBS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BUILD_SHARED_LIBS 1
     * }
     */
    public static int BUILD_SHARED_LIBS() {
        return BUILD_SHARED_LIBS;
    }
    private static final int FLUID_HINT_BOUNDED_BELOW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FLUID_HINT_BOUNDED_BELOW 1
     * }
     */
    public static int FLUID_HINT_BOUNDED_BELOW() {
        return FLUID_HINT_BOUNDED_BELOW;
    }
    private static final int FLUID_HINT_BOUNDED_ABOVE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FLUID_HINT_BOUNDED_ABOVE 2
     * }
     */
    public static int FLUID_HINT_BOUNDED_ABOVE() {
        return FLUID_HINT_BOUNDED_ABOVE;
    }
    private static final int FLUID_HINT_TOGGLED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FLUID_HINT_TOGGLED 4
     * }
     */
    public static int FLUID_HINT_TOGGLED() {
        return FLUID_HINT_TOGGLED;
    }
    private static final int FLUID_HINT_OPTIONLIST = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FLUID_HINT_OPTIONLIST 2
     * }
     */
    public static int FLUID_HINT_OPTIONLIST() {
        return FLUID_HINT_OPTIONLIST;
    }
    private static final int FLUIDSYNTH_VERSION_MAJOR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FLUIDSYNTH_VERSION_MAJOR 2
     * }
     */
    public static int FLUIDSYNTH_VERSION_MAJOR() {
        return FLUIDSYNTH_VERSION_MAJOR;
    }
    private static final int FLUIDSYNTH_VERSION_MINOR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FLUIDSYNTH_VERSION_MINOR 3
     * }
     */
    public static int FLUIDSYNTH_VERSION_MINOR() {
        return FLUIDSYNTH_VERSION_MINOR;
    }
    private static final int FLUIDSYNTH_VERSION_MICRO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define FLUIDSYNTH_VERSION_MICRO 7
     * }
     */
    public static int FLUIDSYNTH_VERSION_MICRO() {
        return FLUIDSYNTH_VERSION_MICRO;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = fluidsynth_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = fluidsynth_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = fluidsynth_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = fluidsynth_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = fluidsynth_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds64_t
     * }
     */
    public static final OfLong __suseconds64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = fluidsynth_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = fluidsynth_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = fluidsynth_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = fluidsynth_h.C_LONG;

    private static class stdin$constants {
        public static final AddressLayout LAYOUT = fluidsynth_h.C_POINTER;
        public static final MemorySegment SEGMENT = fluidsynth_h.findOrThrow("stdin").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static AddressLayout stdin$layout() {
        return stdin$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin$segment() {
        return stdin$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static MemorySegment stdin() {
        return stdin$constants.SEGMENT.get(stdin$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdin
     * }
     */
    public static void stdin(MemorySegment varValue) {
        stdin$constants.SEGMENT.set(stdin$constants.LAYOUT, 0L, varValue);
    }

    private static class stdout$constants {
        public static final AddressLayout LAYOUT = fluidsynth_h.C_POINTER;
        public static final MemorySegment SEGMENT = fluidsynth_h.findOrThrow("stdout").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static AddressLayout stdout$layout() {
        return stdout$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout$segment() {
        return stdout$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static MemorySegment stdout() {
        return stdout$constants.SEGMENT.get(stdout$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stdout
     * }
     */
    public static void stdout(MemorySegment varValue) {
        stdout$constants.SEGMENT.set(stdout$constants.LAYOUT, 0L, varValue);
    }

    private static class stderr$constants {
        public static final AddressLayout LAYOUT = fluidsynth_h.C_POINTER;
        public static final MemorySegment SEGMENT = fluidsynth_h.findOrThrow("stderr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static AddressLayout stderr$layout() {
        return stderr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr$segment() {
        return stderr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static MemorySegment stderr() {
        return stderr$constants.SEGMENT.get(stderr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *stderr
     * }
     */
    public static void stderr(MemorySegment varValue) {
        stderr$constants.SEGMENT.set(stderr$constants.LAYOUT, 0L, varValue);
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int remove(const char *__filename)
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", __filename);
            }
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static MemorySegment renameat$address() {
        return renameat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int renameat(int __oldfd, const char *__old, int __newfd, const char *__new)
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", __oldfd, __old, __newfd, __new);
            }
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fclose(FILE *__stream)
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *tmpfile()
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam(char [20])
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("tmpnam_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static FunctionDescriptor tmpnam_r$descriptor() {
        return tmpnam_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MethodHandle tmpnam_r$handle() {
        return tmpnam_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r$address() {
        return tmpnam_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tmpnam_r(char __s[20])
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam_r", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *tempnam(const char *__dir, const char *__pfx)
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __pfx);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fflush(FILE *__stream)
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fflush_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fflush_unlocked$descriptor() {
        return fflush_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fflush_unlocked$handle() {
        return fflush_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fflush_unlocked$address() {
        return fflush_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fflush_unlocked(FILE *__stream)
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fopen(const char *restrict __filename, const char *restrict __modes)
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *freopen(const char *restrict __filename, const char *restrict __modes, FILE *restrict __stream)
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", __filename, __modes, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fdopen(int __fd, const char *__modes)
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", __fd, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen$address() {
        return fmemopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __s, __len, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream$address() {
        return open_memstream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufloc, __sizeloc);
            }
            return (MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setbuf(FILE *restrict __stream, char *restrict __buf)
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", __stream, __buf);
            }
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_LONG
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int setvbuf(FILE *restrict __stream, char *restrict __buf, int __modes, size_t __n)
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", __stream, __buf, __modes, __n);
            }
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static MemorySegment setbuffer$address() {
        return setbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setbuffer(FILE *restrict __stream, char *restrict __buf, size_t __size)
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", __stream, __buf, __size);
            }
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static MemorySegment setlinebuf$address() {
        return setlinebuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void setlinebuf(FILE *__stream)
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fprintf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", __stream, __format, x2);
                }
                return (int) spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int printf(const char *restrict __format, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int printf(const char *restrict __format, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", __format, x1);
                }
                return (int) spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sprintf(char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", __s, __format, x2);
                }
                return (int) spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vfprintf$descriptor() {
        return vfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vfprintf$handle() {
        return vfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vfprintf$address() {
        return vfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vfprintf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfprintf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vprintf$descriptor() {
        return vprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vprintf$handle() {
        return vprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vprintf$address() {
        return vprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vprintf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vprintf", __format, __arg);
            }
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vsprintf$descriptor() {
        return vsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vsprintf$handle() {
        return vsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vsprintf$address() {
        return vsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vsprintf(char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsprintf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER,
                fluidsynth_h.C_LONG,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int snprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __s, __maxlen, __format, x3);
                }
                return (int) spreader.invokeExact(__s, __maxlen, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vsnprintf$descriptor() {
        return vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vsnprintf$handle() {
        return vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vsnprintf$address() {
        return vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vsnprintf(char *restrict __s, size_t __maxlen, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsnprintf", __s, __maxlen, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vdprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vdprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vdprintf$descriptor() {
        return vdprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vdprintf$handle() {
        return vdprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vdprintf$address() {
        return vdprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vdprintf(int __fd, const char *restrict __fmt, __gnuc_va_list __arg)
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vdprintf", __fd, __fmt, __arg);
            }
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int dprintf(int __fd, const char *restrict __fmt, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int dprintf(int __fd, const char *restrict __fmt, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int __fd, MemorySegment __fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", __fd, __fmt, x2);
                }
                return (int) spreader.invokeExact(__fd, __fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int fscanf(FILE *restrict __stream, const char *restrict __format, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __stream, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", __stream, __format, x2);
                }
                return (int) spreader.invokeExact(__stream, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int scanf(const char *restrict __format, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int scanf(const char *restrict __format, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", __format, x1);
                }
                return (int) spreader.invokeExact(__format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int sscanf(const char *restrict __s, const char *restrict __format, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __s, MemorySegment __format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", __s, __format, x2);
                }
                return (int) spreader.invokeExact(__s, __format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = fluidsynth_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = fluidsynth_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = fluidsynth_h.C_DOUBLE;

    private static class vfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vfscanf$descriptor() {
        return vfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vfscanf$handle() {
        return vfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vfscanf$address() {
        return vfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vfscanf(FILE *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfscanf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vscanf$descriptor() {
        return vscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vscanf$handle() {
        return vscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vscanf$address() {
        return vscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vscanf(const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vscanf", __format, __arg);
            }
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static FunctionDescriptor vsscanf$descriptor() {
        return vsscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MethodHandle vsscanf$handle() {
        return vsscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static MemorySegment vsscanf$address() {
        return vsscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int vsscanf(const char *restrict __s, const char *restrict __format, __gnuc_va_list __arg)
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsscanf", __s, __format, __arg);
            }
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetc(FILE *__stream)
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getc(FILE *__stream)
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getchar()
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment getc_unlocked$address() {
        return getc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getc_unlocked(FILE *__stream)
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static MemorySegment getchar_unlocked$address() {
        return getchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getchar_unlocked()
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fgetc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fgetc_unlocked$descriptor() {
        return fgetc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fgetc_unlocked$handle() {
        return fgetc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fgetc_unlocked$address() {
        return fgetc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetc_unlocked(FILE *__stream)
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputc(int __c, FILE *__stream)
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putc(int __c, FILE *__stream)
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putchar(int __c)
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fputc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor fputc_unlocked$descriptor() {
        return fputc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle fputc_unlocked$handle() {
        return fputc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment fputc_unlocked$address() {
        return fputc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment putc_unlocked$address() {
        return putc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putc_unlocked(int __c, FILE *__stream)
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static MemorySegment putchar_unlocked$address() {
        return putchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putchar_unlocked(int __c)
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", __c);
            }
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int getw(FILE *__stream)
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int putw(int __w, FILE *__stream)
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", __w, __stream);
            }
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *fgets(char *restrict __s, int __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", __s, __n, __stream);
            }
            return (MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("__getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor __getdelim$descriptor() {
        return __getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle __getdelim$handle() {
        return __getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment __getdelim$address() {
        return __getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t __getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() {
        return getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getdelim(char **restrict __lineptr, size_t *restrict __n, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __lineptr, __n, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() {
        return getline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __ssize_t getline(char **restrict __lineptr, size_t *restrict __n, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __lineptr, __n, __stream);
            }
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fputs(const char *restrict __s, FILE *restrict __stream)
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", __s, __stream);
            }
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int puts(const char *__s)
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", __s);
            }
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ungetc(int __c, FILE *__stream)
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", __c, __stream);
            }
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long fread(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __s)
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __n, __s);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fread_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread_unlocked$descriptor() {
        return fread_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread_unlocked$handle() {
        return fread_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread_unlocked$address() {
        return fread_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t fread_unlocked(void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fwrite_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fwrite_unlocked$descriptor() {
        return fwrite_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fwrite_unlocked$handle() {
        return fwrite_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fwrite_unlocked$address() {
        return fwrite_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t fwrite_unlocked(const void *restrict __ptr, size_t __size, size_t __n, FILE *restrict __stream)
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite_unlocked", __ptr, __size, __n, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fseek(FILE *__stream, long __off, int __whence)
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long ftell(FILE *__stream)
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void rewind(FILE *__stream)
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() {
        return fseeko.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fseeko(FILE *__stream, __off_t __off, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __off, __whence);
            }
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() {
        return ftello.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern __off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fgetpos(FILE *restrict __stream, fpos_t *restrict __pos)
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fsetpos(FILE *__stream, const fpos_t *__pos)
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", __stream, __pos);
            }
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void clearerr(FILE *__stream)
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int feof(FILE *__stream)
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ferror(FILE *__stream)
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearerr_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("clearerr_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor clearerr_unlocked$descriptor() {
        return clearerr_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle clearerr_unlocked$handle() {
        return clearerr_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment clearerr_unlocked$address() {
        return clearerr_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void clearerr_unlocked(FILE *__stream)
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr_unlocked", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("feof_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor feof_unlocked$descriptor() {
        return feof_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle feof_unlocked$handle() {
        return feof_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment feof_unlocked$address() {
        return feof_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int feof_unlocked(FILE *__stream)
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ferror_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ferror_unlocked$descriptor() {
        return ferror_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle ferror_unlocked$handle() {
        return ferror_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment ferror_unlocked$address() {
        return ferror_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ferror_unlocked(FILE *__stream)
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void perror(const char *__s)
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", __s);
            }
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fileno(FILE *__stream)
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fileno_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static FunctionDescriptor fileno_unlocked$descriptor() {
        return fileno_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MethodHandle fileno_unlocked$handle() {
        return fileno_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static MemorySegment fileno_unlocked$address() {
        return fileno_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int fileno_unlocked(FILE *__stream)
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno_unlocked", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static MemorySegment pclose$address() {
        return pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pclose(FILE *__stream)
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen$address() {
        return popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *popen(const char *__command, const char *__modes)
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", __command, __modes);
            }
            return (MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid$address() {
        return ctermid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *ctermid(char *__s)
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static MemorySegment flockfile$address() {
        return flockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void flockfile(FILE *__stream)
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static MemorySegment ftrylockfile$address() {
        return ftrylockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ftrylockfile(FILE *__stream)
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", __stream);
            }
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static MemorySegment funlockfile$address() {
        return funlockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void funlockfile(FILE *__stream)
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", __stream);
            }
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __uflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("__uflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static FunctionDescriptor __uflow$descriptor() {
        return __uflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MethodHandle __uflow$handle() {
        return __uflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static MemorySegment __uflow$address() {
        return __uflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __uflow(FILE *)
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__uflow", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __overflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("__overflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static FunctionDescriptor __overflow$descriptor() {
        return __overflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MethodHandle __overflow$handle() {
        return __overflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static MemorySegment __overflow$address() {
        return __overflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __overflow(FILE *, int)
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__overflow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int fluid_istream_t
     * }
     */
    public static final OfInt fluid_istream_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int fluid_ostream_t
     * }
     */
    public static final OfInt fluid_ostream_t = fluidsynth_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef short fluid_seq_id_t
     * }
     */
    public static final OfShort fluid_seq_id_t = fluidsynth_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long long fluid_long_long_t
     * }
     */
    public static final OfLong fluid_long_long_t = fluidsynth_h.C_LONG_LONG;
    private static final int FLUID_NO_TYPE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum fluid_types_enum.FLUID_NO_TYPE = -1
     * }
     */
    public static int FLUID_NO_TYPE() {
        return FLUID_NO_TYPE;
    }
    private static final int FLUID_NUM_TYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_types_enum.FLUID_NUM_TYPE = 0
     * }
     */
    public static int FLUID_NUM_TYPE() {
        return FLUID_NUM_TYPE;
    }
    private static final int FLUID_INT_TYPE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_types_enum.FLUID_INT_TYPE = 1
     * }
     */
    public static int FLUID_INT_TYPE() {
        return FLUID_INT_TYPE;
    }
    private static final int FLUID_STR_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_types_enum.FLUID_STR_TYPE = 2
     * }
     */
    public static int FLUID_STR_TYPE() {
        return FLUID_STR_TYPE;
    }
    private static final int FLUID_SET_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_types_enum.FLUID_SET_TYPE = 3
     * }
     */
    public static int FLUID_SET_TYPE() {
        return FLUID_SET_TYPE;
    }

    private static class new_fluid_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_settings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_settings_t *new_fluid_settings()
     * }
     */
    public static FunctionDescriptor new_fluid_settings$descriptor() {
        return new_fluid_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_settings_t *new_fluid_settings()
     * }
     */
    public static MethodHandle new_fluid_settings$handle() {
        return new_fluid_settings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_settings_t *new_fluid_settings()
     * }
     */
    public static MemorySegment new_fluid_settings$address() {
        return new_fluid_settings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_settings_t *new_fluid_settings()
     * }
     */
    public static MemorySegment new_fluid_settings() {
        var mh$ = new_fluid_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_settings");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_settings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_settings(fluid_settings_t *settings)
     * }
     */
    public static FunctionDescriptor delete_fluid_settings$descriptor() {
        return delete_fluid_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_settings(fluid_settings_t *settings)
     * }
     */
    public static MethodHandle delete_fluid_settings$handle() {
        return delete_fluid_settings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_settings(fluid_settings_t *settings)
     * }
     */
    public static MemorySegment delete_fluid_settings$address() {
        return delete_fluid_settings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_settings(fluid_settings_t *settings)
     * }
     */
    public static void delete_fluid_settings(MemorySegment settings) {
        var mh$ = delete_fluid_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_settings", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_get_type(fluid_settings_t *settings, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_settings_get_type$descriptor() {
        return fluid_settings_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_get_type(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MethodHandle fluid_settings_get_type$handle() {
        return fluid_settings_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_get_type(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MemorySegment fluid_settings_get_type$address() {
        return fluid_settings_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_get_type(fluid_settings_t *settings, const char *name)
     * }
     */
    public static int fluid_settings_get_type(MemorySegment settings, MemorySegment name) {
        var mh$ = fluid_settings_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_get_type", settings, name);
            }
            return (int)mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_get_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_get_hints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_get_hints(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static FunctionDescriptor fluid_settings_get_hints$descriptor() {
        return fluid_settings_get_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_get_hints(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MethodHandle fluid_settings_get_hints$handle() {
        return fluid_settings_get_hints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_get_hints(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MemorySegment fluid_settings_get_hints$address() {
        return fluid_settings_get_hints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_get_hints(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static int fluid_settings_get_hints(MemorySegment settings, MemorySegment name, MemorySegment val) {
        var mh$ = fluid_settings_get_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_get_hints", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_is_realtime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_is_realtime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_is_realtime(fluid_settings_t *settings, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_settings_is_realtime$descriptor() {
        return fluid_settings_is_realtime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_is_realtime(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MethodHandle fluid_settings_is_realtime$handle() {
        return fluid_settings_is_realtime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_is_realtime(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MemorySegment fluid_settings_is_realtime$address() {
        return fluid_settings_is_realtime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_is_realtime(fluid_settings_t *settings, const char *name)
     * }
     */
    public static int fluid_settings_is_realtime(MemorySegment settings, MemorySegment name) {
        var mh$ = fluid_settings_is_realtime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_is_realtime", settings, name);
            }
            return (int)mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_setstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_setstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_setstr(fluid_settings_t *settings, const char *name, const char *str)
     * }
     */
    public static FunctionDescriptor fluid_settings_setstr$descriptor() {
        return fluid_settings_setstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_setstr(fluid_settings_t *settings, const char *name, const char *str)
     * }
     */
    public static MethodHandle fluid_settings_setstr$handle() {
        return fluid_settings_setstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_setstr(fluid_settings_t *settings, const char *name, const char *str)
     * }
     */
    public static MemorySegment fluid_settings_setstr$address() {
        return fluid_settings_setstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_setstr(fluid_settings_t *settings, const char *name, const char *str)
     * }
     */
    public static int fluid_settings_setstr(MemorySegment settings, MemorySegment name, MemorySegment str) {
        var mh$ = fluid_settings_setstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_setstr", settings, name, str);
            }
            return (int)mh$.invokeExact(settings, name, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_copystr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_copystr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_copystr(fluid_settings_t *settings, const char *name, char *str, int len)
     * }
     */
    public static FunctionDescriptor fluid_settings_copystr$descriptor() {
        return fluid_settings_copystr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_copystr(fluid_settings_t *settings, const char *name, char *str, int len)
     * }
     */
    public static MethodHandle fluid_settings_copystr$handle() {
        return fluid_settings_copystr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_copystr(fluid_settings_t *settings, const char *name, char *str, int len)
     * }
     */
    public static MemorySegment fluid_settings_copystr$address() {
        return fluid_settings_copystr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_copystr(fluid_settings_t *settings, const char *name, char *str, int len)
     * }
     */
    public static int fluid_settings_copystr(MemorySegment settings, MemorySegment name, MemorySegment str, int len) {
        var mh$ = fluid_settings_copystr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_copystr", settings, name, str, len);
            }
            return (int)mh$.invokeExact(settings, name, str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_dupstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_dupstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_dupstr(fluid_settings_t *settings, const char *name, char **str)
     * }
     */
    public static FunctionDescriptor fluid_settings_dupstr$descriptor() {
        return fluid_settings_dupstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_dupstr(fluid_settings_t *settings, const char *name, char **str)
     * }
     */
    public static MethodHandle fluid_settings_dupstr$handle() {
        return fluid_settings_dupstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_dupstr(fluid_settings_t *settings, const char *name, char **str)
     * }
     */
    public static MemorySegment fluid_settings_dupstr$address() {
        return fluid_settings_dupstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_dupstr(fluid_settings_t *settings, const char *name, char **str)
     * }
     */
    public static int fluid_settings_dupstr(MemorySegment settings, MemorySegment name, MemorySegment str) {
        var mh$ = fluid_settings_dupstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_dupstr", settings, name, str);
            }
            return (int)mh$.invokeExact(settings, name, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getstr_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getstr_default");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getstr_default(fluid_settings_t *settings, const char *name, char **def)
     * }
     */
    public static FunctionDescriptor fluid_settings_getstr_default$descriptor() {
        return fluid_settings_getstr_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getstr_default(fluid_settings_t *settings, const char *name, char **def)
     * }
     */
    public static MethodHandle fluid_settings_getstr_default$handle() {
        return fluid_settings_getstr_default.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getstr_default(fluid_settings_t *settings, const char *name, char **def)
     * }
     */
    public static MemorySegment fluid_settings_getstr_default$address() {
        return fluid_settings_getstr_default.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getstr_default(fluid_settings_t *settings, const char *name, char **def)
     * }
     */
    public static int fluid_settings_getstr_default(MemorySegment settings, MemorySegment name, MemorySegment def) {
        var mh$ = fluid_settings_getstr_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getstr_default", settings, name, def);
            }
            return (int)mh$.invokeExact(settings, name, def);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_str_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_str_equal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_str_equal(fluid_settings_t *settings, const char *name, const char *value)
     * }
     */
    public static FunctionDescriptor fluid_settings_str_equal$descriptor() {
        return fluid_settings_str_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_str_equal(fluid_settings_t *settings, const char *name, const char *value)
     * }
     */
    public static MethodHandle fluid_settings_str_equal$handle() {
        return fluid_settings_str_equal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_str_equal(fluid_settings_t *settings, const char *name, const char *value)
     * }
     */
    public static MemorySegment fluid_settings_str_equal$address() {
        return fluid_settings_str_equal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_str_equal(fluid_settings_t *settings, const char *name, const char *value)
     * }
     */
    public static int fluid_settings_str_equal(MemorySegment settings, MemorySegment name, MemorySegment value) {
        var mh$ = fluid_settings_str_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_str_equal", settings, name, value);
            }
            return (int)mh$.invokeExact(settings, name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_setnum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_setnum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_setnum(fluid_settings_t *settings, const char *name, double val)
     * }
     */
    public static FunctionDescriptor fluid_settings_setnum$descriptor() {
        return fluid_settings_setnum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_setnum(fluid_settings_t *settings, const char *name, double val)
     * }
     */
    public static MethodHandle fluid_settings_setnum$handle() {
        return fluid_settings_setnum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_setnum(fluid_settings_t *settings, const char *name, double val)
     * }
     */
    public static MemorySegment fluid_settings_setnum$address() {
        return fluid_settings_setnum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_setnum(fluid_settings_t *settings, const char *name, double val)
     * }
     */
    public static int fluid_settings_setnum(MemorySegment settings, MemorySegment name, double val) {
        var mh$ = fluid_settings_setnum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_setnum", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getnum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getnum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getnum(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static FunctionDescriptor fluid_settings_getnum$descriptor() {
        return fluid_settings_getnum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getnum(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static MethodHandle fluid_settings_getnum$handle() {
        return fluid_settings_getnum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getnum(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static MemorySegment fluid_settings_getnum$address() {
        return fluid_settings_getnum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getnum(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static int fluid_settings_getnum(MemorySegment settings, MemorySegment name, MemorySegment val) {
        var mh$ = fluid_settings_getnum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getnum", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getnum_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getnum_default");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_default(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static FunctionDescriptor fluid_settings_getnum_default$descriptor() {
        return fluid_settings_getnum_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_default(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static MethodHandle fluid_settings_getnum_default$handle() {
        return fluid_settings_getnum_default.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_default(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static MemorySegment fluid_settings_getnum_default$address() {
        return fluid_settings_getnum_default.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getnum_default(fluid_settings_t *settings, const char *name, double *val)
     * }
     */
    public static int fluid_settings_getnum_default(MemorySegment settings, MemorySegment name, MemorySegment val) {
        var mh$ = fluid_settings_getnum_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getnum_default", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getnum_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getnum_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_range(fluid_settings_t *settings, const char *name, double *min, double *max)
     * }
     */
    public static FunctionDescriptor fluid_settings_getnum_range$descriptor() {
        return fluid_settings_getnum_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_range(fluid_settings_t *settings, const char *name, double *min, double *max)
     * }
     */
    public static MethodHandle fluid_settings_getnum_range$handle() {
        return fluid_settings_getnum_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getnum_range(fluid_settings_t *settings, const char *name, double *min, double *max)
     * }
     */
    public static MemorySegment fluid_settings_getnum_range$address() {
        return fluid_settings_getnum_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getnum_range(fluid_settings_t *settings, const char *name, double *min, double *max)
     * }
     */
    public static int fluid_settings_getnum_range(MemorySegment settings, MemorySegment name, MemorySegment min, MemorySegment max) {
        var mh$ = fluid_settings_getnum_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getnum_range", settings, name, min, max);
            }
            return (int)mh$.invokeExact(settings, name, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_setint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_setint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_setint(fluid_settings_t *settings, const char *name, int val)
     * }
     */
    public static FunctionDescriptor fluid_settings_setint$descriptor() {
        return fluid_settings_setint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_setint(fluid_settings_t *settings, const char *name, int val)
     * }
     */
    public static MethodHandle fluid_settings_setint$handle() {
        return fluid_settings_setint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_setint(fluid_settings_t *settings, const char *name, int val)
     * }
     */
    public static MemorySegment fluid_settings_setint$address() {
        return fluid_settings_setint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_setint(fluid_settings_t *settings, const char *name, int val)
     * }
     */
    public static int fluid_settings_setint(MemorySegment settings, MemorySegment name, int val) {
        var mh$ = fluid_settings_setint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_setint", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getint(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static FunctionDescriptor fluid_settings_getint$descriptor() {
        return fluid_settings_getint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getint(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MethodHandle fluid_settings_getint$handle() {
        return fluid_settings_getint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getint(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MemorySegment fluid_settings_getint$address() {
        return fluid_settings_getint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getint(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static int fluid_settings_getint(MemorySegment settings, MemorySegment name, MemorySegment val) {
        var mh$ = fluid_settings_getint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getint", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getint_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getint_default");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getint_default(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static FunctionDescriptor fluid_settings_getint_default$descriptor() {
        return fluid_settings_getint_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getint_default(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MethodHandle fluid_settings_getint_default$handle() {
        return fluid_settings_getint_default.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getint_default(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static MemorySegment fluid_settings_getint_default$address() {
        return fluid_settings_getint_default.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getint_default(fluid_settings_t *settings, const char *name, int *val)
     * }
     */
    public static int fluid_settings_getint_default(MemorySegment settings, MemorySegment name, MemorySegment val) {
        var mh$ = fluid_settings_getint_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getint_default", settings, name, val);
            }
            return (int)mh$.invokeExact(settings, name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_getint_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_getint_range");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_getint_range(fluid_settings_t *settings, const char *name, int *min, int *max)
     * }
     */
    public static FunctionDescriptor fluid_settings_getint_range$descriptor() {
        return fluid_settings_getint_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_getint_range(fluid_settings_t *settings, const char *name, int *min, int *max)
     * }
     */
    public static MethodHandle fluid_settings_getint_range$handle() {
        return fluid_settings_getint_range.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_getint_range(fluid_settings_t *settings, const char *name, int *min, int *max)
     * }
     */
    public static MemorySegment fluid_settings_getint_range$address() {
        return fluid_settings_getint_range.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_getint_range(fluid_settings_t *settings, const char *name, int *min, int *max)
     * }
     */
    public static int fluid_settings_getint_range(MemorySegment settings, MemorySegment name, MemorySegment min, MemorySegment max) {
        var mh$ = fluid_settings_getint_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_getint_range", settings, name, min, max);
            }
            return (int)mh$.invokeExact(settings, name, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_foreach_option {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_foreach_option");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_settings_foreach_option(fluid_settings_t *settings, const char *name, void *data, fluid_settings_foreach_option_t func)
     * }
     */
    public static FunctionDescriptor fluid_settings_foreach_option$descriptor() {
        return fluid_settings_foreach_option.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_settings_foreach_option(fluid_settings_t *settings, const char *name, void *data, fluid_settings_foreach_option_t func)
     * }
     */
    public static MethodHandle fluid_settings_foreach_option$handle() {
        return fluid_settings_foreach_option.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_settings_foreach_option(fluid_settings_t *settings, const char *name, void *data, fluid_settings_foreach_option_t func)
     * }
     */
    public static MemorySegment fluid_settings_foreach_option$address() {
        return fluid_settings_foreach_option.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_settings_foreach_option(fluid_settings_t *settings, const char *name, void *data, fluid_settings_foreach_option_t func)
     * }
     */
    public static void fluid_settings_foreach_option(MemorySegment settings, MemorySegment name, MemorySegment data, MemorySegment func) {
        var mh$ = fluid_settings_foreach_option.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_foreach_option", settings, name, data, func);
            }
            mh$.invokeExact(settings, name, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_option_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_option_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_settings_option_count(fluid_settings_t *settings, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_settings_option_count$descriptor() {
        return fluid_settings_option_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_settings_option_count(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MethodHandle fluid_settings_option_count$handle() {
        return fluid_settings_option_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_settings_option_count(fluid_settings_t *settings, const char *name)
     * }
     */
    public static MemorySegment fluid_settings_option_count$address() {
        return fluid_settings_option_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_settings_option_count(fluid_settings_t *settings, const char *name)
     * }
     */
    public static int fluid_settings_option_count(MemorySegment settings, MemorySegment name) {
        var mh$ = fluid_settings_option_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_option_count", settings, name);
            }
            return (int)mh$.invokeExact(settings, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_option_concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_option_concat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fluid_settings_option_concat(fluid_settings_t *settings, const char *name, const char *separator)
     * }
     */
    public static FunctionDescriptor fluid_settings_option_concat$descriptor() {
        return fluid_settings_option_concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fluid_settings_option_concat(fluid_settings_t *settings, const char *name, const char *separator)
     * }
     */
    public static MethodHandle fluid_settings_option_concat$handle() {
        return fluid_settings_option_concat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fluid_settings_option_concat(fluid_settings_t *settings, const char *name, const char *separator)
     * }
     */
    public static MemorySegment fluid_settings_option_concat$address() {
        return fluid_settings_option_concat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fluid_settings_option_concat(fluid_settings_t *settings, const char *name, const char *separator)
     * }
     */
    public static MemorySegment fluid_settings_option_concat(MemorySegment settings, MemorySegment name, MemorySegment separator) {
        var mh$ = fluid_settings_option_concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_option_concat", settings, name, separator);
            }
            return (MemorySegment)mh$.invokeExact(settings, name, separator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_settings_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_settings_foreach");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_settings_foreach(fluid_settings_t *settings, void *data, fluid_settings_foreach_t func)
     * }
     */
    public static FunctionDescriptor fluid_settings_foreach$descriptor() {
        return fluid_settings_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_settings_foreach(fluid_settings_t *settings, void *data, fluid_settings_foreach_t func)
     * }
     */
    public static MethodHandle fluid_settings_foreach$handle() {
        return fluid_settings_foreach.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_settings_foreach(fluid_settings_t *settings, void *data, fluid_settings_foreach_t func)
     * }
     */
    public static MemorySegment fluid_settings_foreach$address() {
        return fluid_settings_foreach.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_settings_foreach(fluid_settings_t *settings, void *data, fluid_settings_foreach_t func)
     * }
     */
    public static void fluid_settings_foreach(MemorySegment settings, MemorySegment data, MemorySegment func) {
        var mh$ = fluid_settings_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_settings_foreach", settings, data, func);
            }
            mh$.invokeExact(settings, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_synth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_synth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_synth_t *new_fluid_synth(fluid_settings_t *settings)
     * }
     */
    public static FunctionDescriptor new_fluid_synth$descriptor() {
        return new_fluid_synth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_synth_t *new_fluid_synth(fluid_settings_t *settings)
     * }
     */
    public static MethodHandle new_fluid_synth$handle() {
        return new_fluid_synth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_synth_t *new_fluid_synth(fluid_settings_t *settings)
     * }
     */
    public static MemorySegment new_fluid_synth$address() {
        return new_fluid_synth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_synth_t *new_fluid_synth(fluid_settings_t *settings)
     * }
     */
    public static MemorySegment new_fluid_synth(MemorySegment settings) {
        var mh$ = new_fluid_synth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_synth", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_synth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_synth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_synth(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor delete_fluid_synth$descriptor() {
        return delete_fluid_synth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_synth(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle delete_fluid_synth$handle() {
        return delete_fluid_synth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_synth(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment delete_fluid_synth$address() {
        return delete_fluid_synth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_synth(fluid_synth_t *synth)
     * }
     */
    public static void delete_fluid_synth(MemorySegment synth) {
        var mh$ = delete_fluid_synth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_synth", synth);
            }
            mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_cpu_load {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_cpu_load");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_cpu_load(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_cpu_load$descriptor() {
        return fluid_synth_get_cpu_load.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_cpu_load(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_cpu_load$handle() {
        return fluid_synth_get_cpu_load.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_cpu_load(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_cpu_load$address() {
        return fluid_synth_get_cpu_load.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_cpu_load(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_cpu_load(MemorySegment synth) {
        var mh$ = fluid_synth_get_cpu_load.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_cpu_load", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_error");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fluid_synth_error(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_error$descriptor() {
        return fluid_synth_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fluid_synth_error(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_error$handle() {
        return fluid_synth_error.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fluid_synth_error(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_error$address() {
        return fluid_synth_error.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fluid_synth_error(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_error(MemorySegment synth) {
        var mh$ = fluid_synth_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_error", synth);
            }
            return (MemorySegment)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_noteon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_noteon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_noteon(fluid_synth_t *synth, int chan, int key, int vel)
     * }
     */
    public static FunctionDescriptor fluid_synth_noteon$descriptor() {
        return fluid_synth_noteon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_noteon(fluid_synth_t *synth, int chan, int key, int vel)
     * }
     */
    public static MethodHandle fluid_synth_noteon$handle() {
        return fluid_synth_noteon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_noteon(fluid_synth_t *synth, int chan, int key, int vel)
     * }
     */
    public static MemorySegment fluid_synth_noteon$address() {
        return fluid_synth_noteon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_noteon(fluid_synth_t *synth, int chan, int key, int vel)
     * }
     */
    public static int fluid_synth_noteon(MemorySegment synth, int chan, int key, int vel) {
        var mh$ = fluid_synth_noteon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_noteon", synth, chan, key, vel);
            }
            return (int)mh$.invokeExact(synth, chan, key, vel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_noteoff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_noteoff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_noteoff(fluid_synth_t *synth, int chan, int key)
     * }
     */
    public static FunctionDescriptor fluid_synth_noteoff$descriptor() {
        return fluid_synth_noteoff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_noteoff(fluid_synth_t *synth, int chan, int key)
     * }
     */
    public static MethodHandle fluid_synth_noteoff$handle() {
        return fluid_synth_noteoff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_noteoff(fluid_synth_t *synth, int chan, int key)
     * }
     */
    public static MemorySegment fluid_synth_noteoff$address() {
        return fluid_synth_noteoff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_noteoff(fluid_synth_t *synth, int chan, int key)
     * }
     */
    public static int fluid_synth_noteoff(MemorySegment synth, int chan, int key) {
        var mh$ = fluid_synth_noteoff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_noteoff", synth, chan, key);
            }
            return (int)mh$.invokeExact(synth, chan, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_cc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_cc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_cc(fluid_synth_t *synth, int chan, int ctrl, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_cc$descriptor() {
        return fluid_synth_cc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_cc(fluid_synth_t *synth, int chan, int ctrl, int val)
     * }
     */
    public static MethodHandle fluid_synth_cc$handle() {
        return fluid_synth_cc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_cc(fluid_synth_t *synth, int chan, int ctrl, int val)
     * }
     */
    public static MemorySegment fluid_synth_cc$address() {
        return fluid_synth_cc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_cc(fluid_synth_t *synth, int chan, int ctrl, int val)
     * }
     */
    public static int fluid_synth_cc(MemorySegment synth, int chan, int ctrl, int val) {
        var mh$ = fluid_synth_cc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_cc", synth, chan, ctrl, val);
            }
            return (int)mh$.invokeExact(synth, chan, ctrl, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_cc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_cc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_cc(fluid_synth_t *synth, int chan, int ctrl, int *pval)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_cc$descriptor() {
        return fluid_synth_get_cc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_cc(fluid_synth_t *synth, int chan, int ctrl, int *pval)
     * }
     */
    public static MethodHandle fluid_synth_get_cc$handle() {
        return fluid_synth_get_cc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_cc(fluid_synth_t *synth, int chan, int ctrl, int *pval)
     * }
     */
    public static MemorySegment fluid_synth_get_cc$address() {
        return fluid_synth_get_cc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_cc(fluid_synth_t *synth, int chan, int ctrl, int *pval)
     * }
     */
    public static int fluid_synth_get_cc(MemorySegment synth, int chan, int ctrl, MemorySegment pval) {
        var mh$ = fluid_synth_get_cc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_cc", synth, chan, ctrl, pval);
            }
            return (int)mh$.invokeExact(synth, chan, ctrl, pval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sysex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sysex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sysex(fluid_synth_t *synth, const char *data, int len, char *response, int *response_len, int *handled, int dryrun)
     * }
     */
    public static FunctionDescriptor fluid_synth_sysex$descriptor() {
        return fluid_synth_sysex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sysex(fluid_synth_t *synth, const char *data, int len, char *response, int *response_len, int *handled, int dryrun)
     * }
     */
    public static MethodHandle fluid_synth_sysex$handle() {
        return fluid_synth_sysex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sysex(fluid_synth_t *synth, const char *data, int len, char *response, int *response_len, int *handled, int dryrun)
     * }
     */
    public static MemorySegment fluid_synth_sysex$address() {
        return fluid_synth_sysex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sysex(fluid_synth_t *synth, const char *data, int len, char *response, int *response_len, int *handled, int dryrun)
     * }
     */
    public static int fluid_synth_sysex(MemorySegment synth, MemorySegment data, int len, MemorySegment response, MemorySegment response_len, MemorySegment handled, int dryrun) {
        var mh$ = fluid_synth_sysex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sysex", synth, data, len, response, response_len, handled, dryrun);
            }
            return (int)mh$.invokeExact(synth, data, len, response, response_len, handled, dryrun);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_pitch_bend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_pitch_bend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_bend(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_pitch_bend$descriptor() {
        return fluid_synth_pitch_bend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_bend(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MethodHandle fluid_synth_pitch_bend$handle() {
        return fluid_synth_pitch_bend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_bend(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MemorySegment fluid_synth_pitch_bend$address() {
        return fluid_synth_pitch_bend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_pitch_bend(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static int fluid_synth_pitch_bend(MemorySegment synth, int chan, int val) {
        var mh$ = fluid_synth_pitch_bend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_pitch_bend", synth, chan, val);
            }
            return (int)mh$.invokeExact(synth, chan, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_pitch_bend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_pitch_bend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_bend(fluid_synth_t *synth, int chan, int *ppitch_bend)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_pitch_bend$descriptor() {
        return fluid_synth_get_pitch_bend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_bend(fluid_synth_t *synth, int chan, int *ppitch_bend)
     * }
     */
    public static MethodHandle fluid_synth_get_pitch_bend$handle() {
        return fluid_synth_get_pitch_bend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_bend(fluid_synth_t *synth, int chan, int *ppitch_bend)
     * }
     */
    public static MemorySegment fluid_synth_get_pitch_bend$address() {
        return fluid_synth_get_pitch_bend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_bend(fluid_synth_t *synth, int chan, int *ppitch_bend)
     * }
     */
    public static int fluid_synth_get_pitch_bend(MemorySegment synth, int chan, MemorySegment ppitch_bend) {
        var mh$ = fluid_synth_get_pitch_bend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_pitch_bend", synth, chan, ppitch_bend);
            }
            return (int)mh$.invokeExact(synth, chan, ppitch_bend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_pitch_wheel_sens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_pitch_wheel_sens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_wheel_sens(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_pitch_wheel_sens$descriptor() {
        return fluid_synth_pitch_wheel_sens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_wheel_sens(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MethodHandle fluid_synth_pitch_wheel_sens$handle() {
        return fluid_synth_pitch_wheel_sens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_pitch_wheel_sens(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MemorySegment fluid_synth_pitch_wheel_sens$address() {
        return fluid_synth_pitch_wheel_sens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_pitch_wheel_sens(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static int fluid_synth_pitch_wheel_sens(MemorySegment synth, int chan, int val) {
        var mh$ = fluid_synth_pitch_wheel_sens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_pitch_wheel_sens", synth, chan, val);
            }
            return (int)mh$.invokeExact(synth, chan, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_pitch_wheel_sens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_pitch_wheel_sens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_wheel_sens(fluid_synth_t *synth, int chan, int *pval)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_pitch_wheel_sens$descriptor() {
        return fluid_synth_get_pitch_wheel_sens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_wheel_sens(fluid_synth_t *synth, int chan, int *pval)
     * }
     */
    public static MethodHandle fluid_synth_get_pitch_wheel_sens$handle() {
        return fluid_synth_get_pitch_wheel_sens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_wheel_sens(fluid_synth_t *synth, int chan, int *pval)
     * }
     */
    public static MemorySegment fluid_synth_get_pitch_wheel_sens$address() {
        return fluid_synth_get_pitch_wheel_sens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_pitch_wheel_sens(fluid_synth_t *synth, int chan, int *pval)
     * }
     */
    public static int fluid_synth_get_pitch_wheel_sens(MemorySegment synth, int chan, MemorySegment pval) {
        var mh$ = fluid_synth_get_pitch_wheel_sens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_pitch_wheel_sens", synth, chan, pval);
            }
            return (int)mh$.invokeExact(synth, chan, pval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_program_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_program_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_program_change(fluid_synth_t *synth, int chan, int program)
     * }
     */
    public static FunctionDescriptor fluid_synth_program_change$descriptor() {
        return fluid_synth_program_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_program_change(fluid_synth_t *synth, int chan, int program)
     * }
     */
    public static MethodHandle fluid_synth_program_change$handle() {
        return fluid_synth_program_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_program_change(fluid_synth_t *synth, int chan, int program)
     * }
     */
    public static MemorySegment fluid_synth_program_change$address() {
        return fluid_synth_program_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_program_change(fluid_synth_t *synth, int chan, int program)
     * }
     */
    public static int fluid_synth_program_change(MemorySegment synth, int chan, int program) {
        var mh$ = fluid_synth_program_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_program_change", synth, chan, program);
            }
            return (int)mh$.invokeExact(synth, chan, program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_channel_pressure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_channel_pressure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_channel_pressure(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_channel_pressure$descriptor() {
        return fluid_synth_channel_pressure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_channel_pressure(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MethodHandle fluid_synth_channel_pressure$handle() {
        return fluid_synth_channel_pressure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_channel_pressure(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static MemorySegment fluid_synth_channel_pressure$address() {
        return fluid_synth_channel_pressure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_channel_pressure(fluid_synth_t *synth, int chan, int val)
     * }
     */
    public static int fluid_synth_channel_pressure(MemorySegment synth, int chan, int val) {
        var mh$ = fluid_synth_channel_pressure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_channel_pressure", synth, chan, val);
            }
            return (int)mh$.invokeExact(synth, chan, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_key_pressure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_key_pressure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_key_pressure(fluid_synth_t *synth, int chan, int key, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_key_pressure$descriptor() {
        return fluid_synth_key_pressure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_key_pressure(fluid_synth_t *synth, int chan, int key, int val)
     * }
     */
    public static MethodHandle fluid_synth_key_pressure$handle() {
        return fluid_synth_key_pressure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_key_pressure(fluid_synth_t *synth, int chan, int key, int val)
     * }
     */
    public static MemorySegment fluid_synth_key_pressure$address() {
        return fluid_synth_key_pressure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_key_pressure(fluid_synth_t *synth, int chan, int key, int val)
     * }
     */
    public static int fluid_synth_key_pressure(MemorySegment synth, int chan, int key, int val) {
        var mh$ = fluid_synth_key_pressure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_key_pressure", synth, chan, key, val);
            }
            return (int)mh$.invokeExact(synth, chan, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_bank_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_bank_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_bank_select(fluid_synth_t *synth, int chan, int bank)
     * }
     */
    public static FunctionDescriptor fluid_synth_bank_select$descriptor() {
        return fluid_synth_bank_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_bank_select(fluid_synth_t *synth, int chan, int bank)
     * }
     */
    public static MethodHandle fluid_synth_bank_select$handle() {
        return fluid_synth_bank_select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_bank_select(fluid_synth_t *synth, int chan, int bank)
     * }
     */
    public static MemorySegment fluid_synth_bank_select$address() {
        return fluid_synth_bank_select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_bank_select(fluid_synth_t *synth, int chan, int bank)
     * }
     */
    public static int fluid_synth_bank_select(MemorySegment synth, int chan, int bank) {
        var mh$ = fluid_synth_bank_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_bank_select", synth, chan, bank);
            }
            return (int)mh$.invokeExact(synth, chan, bank);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sfont_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sfont_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sfont_select(fluid_synth_t *synth, int chan, int sfont_id)
     * }
     */
    public static FunctionDescriptor fluid_synth_sfont_select$descriptor() {
        return fluid_synth_sfont_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sfont_select(fluid_synth_t *synth, int chan, int sfont_id)
     * }
     */
    public static MethodHandle fluid_synth_sfont_select$handle() {
        return fluid_synth_sfont_select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sfont_select(fluid_synth_t *synth, int chan, int sfont_id)
     * }
     */
    public static MemorySegment fluid_synth_sfont_select$address() {
        return fluid_synth_sfont_select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sfont_select(fluid_synth_t *synth, int chan, int sfont_id)
     * }
     */
    public static int fluid_synth_sfont_select(MemorySegment synth, int chan, int sfont_id) {
        var mh$ = fluid_synth_sfont_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sfont_select", synth, chan, sfont_id);
            }
            return (int)mh$.invokeExact(synth, chan, sfont_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_program_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_program_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_program_select(fluid_synth_t *synth, int chan, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static FunctionDescriptor fluid_synth_program_select$descriptor() {
        return fluid_synth_program_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_program_select(fluid_synth_t *synth, int chan, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MethodHandle fluid_synth_program_select$handle() {
        return fluid_synth_program_select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_program_select(fluid_synth_t *synth, int chan, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MemorySegment fluid_synth_program_select$address() {
        return fluid_synth_program_select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_program_select(fluid_synth_t *synth, int chan, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static int fluid_synth_program_select(MemorySegment synth, int chan, int sfont_id, int bank_num, int preset_num) {
        var mh$ = fluid_synth_program_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_program_select", synth, chan, sfont_id, bank_num, preset_num);
            }
            return (int)mh$.invokeExact(synth, chan, sfont_id, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_program_select_by_sfont_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_program_select_by_sfont_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_program_select_by_sfont_name(fluid_synth_t *synth, int chan, const char *sfont_name, int bank_num, int preset_num)
     * }
     */
    public static FunctionDescriptor fluid_synth_program_select_by_sfont_name$descriptor() {
        return fluid_synth_program_select_by_sfont_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_program_select_by_sfont_name(fluid_synth_t *synth, int chan, const char *sfont_name, int bank_num, int preset_num)
     * }
     */
    public static MethodHandle fluid_synth_program_select_by_sfont_name$handle() {
        return fluid_synth_program_select_by_sfont_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_program_select_by_sfont_name(fluid_synth_t *synth, int chan, const char *sfont_name, int bank_num, int preset_num)
     * }
     */
    public static MemorySegment fluid_synth_program_select_by_sfont_name$address() {
        return fluid_synth_program_select_by_sfont_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_program_select_by_sfont_name(fluid_synth_t *synth, int chan, const char *sfont_name, int bank_num, int preset_num)
     * }
     */
    public static int fluid_synth_program_select_by_sfont_name(MemorySegment synth, int chan, MemorySegment sfont_name, int bank_num, int preset_num) {
        var mh$ = fluid_synth_program_select_by_sfont_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_program_select_by_sfont_name", synth, chan, sfont_name, bank_num, preset_num);
            }
            return (int)mh$.invokeExact(synth, chan, sfont_name, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_program {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_program");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_program(fluid_synth_t *synth, int chan, int *sfont_id, int *bank_num, int *preset_num)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_program$descriptor() {
        return fluid_synth_get_program.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_program(fluid_synth_t *synth, int chan, int *sfont_id, int *bank_num, int *preset_num)
     * }
     */
    public static MethodHandle fluid_synth_get_program$handle() {
        return fluid_synth_get_program.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_program(fluid_synth_t *synth, int chan, int *sfont_id, int *bank_num, int *preset_num)
     * }
     */
    public static MemorySegment fluid_synth_get_program$address() {
        return fluid_synth_get_program.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_program(fluid_synth_t *synth, int chan, int *sfont_id, int *bank_num, int *preset_num)
     * }
     */
    public static int fluid_synth_get_program(MemorySegment synth, int chan, MemorySegment sfont_id, MemorySegment bank_num, MemorySegment preset_num) {
        var mh$ = fluid_synth_get_program.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_program", synth, chan, sfont_id, bank_num, preset_num);
            }
            return (int)mh$.invokeExact(synth, chan, sfont_id, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_unset_program {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_unset_program");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_unset_program(fluid_synth_t *synth, int chan)
     * }
     */
    public static FunctionDescriptor fluid_synth_unset_program$descriptor() {
        return fluid_synth_unset_program.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_unset_program(fluid_synth_t *synth, int chan)
     * }
     */
    public static MethodHandle fluid_synth_unset_program$handle() {
        return fluid_synth_unset_program.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_unset_program(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_unset_program$address() {
        return fluid_synth_unset_program.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_unset_program(fluid_synth_t *synth, int chan)
     * }
     */
    public static int fluid_synth_unset_program(MemorySegment synth, int chan) {
        var mh$ = fluid_synth_unset_program.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_unset_program", synth, chan);
            }
            return (int)mh$.invokeExact(synth, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_program_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_program_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_program_reset(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_program_reset$descriptor() {
        return fluid_synth_program_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_program_reset(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_program_reset$handle() {
        return fluid_synth_program_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_program_reset(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_program_reset$address() {
        return fluid_synth_program_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_program_reset(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_program_reset(MemorySegment synth) {
        var mh$ = fluid_synth_program_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_program_reset", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_system_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_system_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_system_reset(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_system_reset$descriptor() {
        return fluid_synth_system_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_system_reset(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_system_reset$handle() {
        return fluid_synth_system_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_system_reset(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_system_reset$address() {
        return fluid_synth_system_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_system_reset(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_system_reset(MemorySegment synth) {
        var mh$ = fluid_synth_system_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_system_reset", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_all_notes_off {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_all_notes_off");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_all_notes_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static FunctionDescriptor fluid_synth_all_notes_off$descriptor() {
        return fluid_synth_all_notes_off.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_all_notes_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static MethodHandle fluid_synth_all_notes_off$handle() {
        return fluid_synth_all_notes_off.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_all_notes_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_all_notes_off$address() {
        return fluid_synth_all_notes_off.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_all_notes_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static int fluid_synth_all_notes_off(MemorySegment synth, int chan) {
        var mh$ = fluid_synth_all_notes_off.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_all_notes_off", synth, chan);
            }
            return (int)mh$.invokeExact(synth, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_all_sounds_off {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_all_sounds_off");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_all_sounds_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static FunctionDescriptor fluid_synth_all_sounds_off$descriptor() {
        return fluid_synth_all_sounds_off.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_all_sounds_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static MethodHandle fluid_synth_all_sounds_off$handle() {
        return fluid_synth_all_sounds_off.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_all_sounds_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_all_sounds_off$address() {
        return fluid_synth_all_sounds_off.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_all_sounds_off(fluid_synth_t *synth, int chan)
     * }
     */
    public static int fluid_synth_all_sounds_off(MemorySegment synth, int chan) {
        var mh$ = fluid_synth_all_sounds_off.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_all_sounds_off", synth, chan);
            }
            return (int)mh$.invokeExact(synth, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_gen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_gen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_gen(fluid_synth_t *synth, int chan, int param, float value)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_gen$descriptor() {
        return fluid_synth_set_gen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_gen(fluid_synth_t *synth, int chan, int param, float value)
     * }
     */
    public static MethodHandle fluid_synth_set_gen$handle() {
        return fluid_synth_set_gen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_gen(fluid_synth_t *synth, int chan, int param, float value)
     * }
     */
    public static MemorySegment fluid_synth_set_gen$address() {
        return fluid_synth_set_gen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_gen(fluid_synth_t *synth, int chan, int param, float value)
     * }
     */
    public static int fluid_synth_set_gen(MemorySegment synth, int chan, int param, float value) {
        var mh$ = fluid_synth_set_gen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_gen", synth, chan, param, value);
            }
            return (int)mh$.invokeExact(synth, chan, param, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_gen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_gen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float fluid_synth_get_gen(fluid_synth_t *synth, int chan, int param)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_gen$descriptor() {
        return fluid_synth_get_gen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float fluid_synth_get_gen(fluid_synth_t *synth, int chan, int param)
     * }
     */
    public static MethodHandle fluid_synth_get_gen$handle() {
        return fluid_synth_get_gen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float fluid_synth_get_gen(fluid_synth_t *synth, int chan, int param)
     * }
     */
    public static MemorySegment fluid_synth_get_gen$address() {
        return fluid_synth_get_gen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float fluid_synth_get_gen(fluid_synth_t *synth, int chan, int param)
     * }
     */
    public static float fluid_synth_get_gen(MemorySegment synth, int chan, int param) {
        var mh$ = fluid_synth_get_gen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_gen", synth, chan, param);
            }
            return (float)mh$.invokeExact(synth, chan, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_start(fluid_synth_t *synth, unsigned int id, fluid_preset_t *preset, int audio_chan, int midi_chan, int key, int vel)
     * }
     */
    public static FunctionDescriptor fluid_synth_start$descriptor() {
        return fluid_synth_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_start(fluid_synth_t *synth, unsigned int id, fluid_preset_t *preset, int audio_chan, int midi_chan, int key, int vel)
     * }
     */
    public static MethodHandle fluid_synth_start$handle() {
        return fluid_synth_start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_start(fluid_synth_t *synth, unsigned int id, fluid_preset_t *preset, int audio_chan, int midi_chan, int key, int vel)
     * }
     */
    public static MemorySegment fluid_synth_start$address() {
        return fluid_synth_start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_start(fluid_synth_t *synth, unsigned int id, fluid_preset_t *preset, int audio_chan, int midi_chan, int key, int vel)
     * }
     */
    public static int fluid_synth_start(MemorySegment synth, int id, MemorySegment preset, int audio_chan, int midi_chan, int key, int vel) {
        var mh$ = fluid_synth_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_start", synth, id, preset, audio_chan, midi_chan, key, vel);
            }
            return (int)mh$.invokeExact(synth, id, preset, audio_chan, midi_chan, key, vel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_stop(fluid_synth_t *synth, unsigned int id)
     * }
     */
    public static FunctionDescriptor fluid_synth_stop$descriptor() {
        return fluid_synth_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_stop(fluid_synth_t *synth, unsigned int id)
     * }
     */
    public static MethodHandle fluid_synth_stop$handle() {
        return fluid_synth_stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_stop(fluid_synth_t *synth, unsigned int id)
     * }
     */
    public static MemorySegment fluid_synth_stop$address() {
        return fluid_synth_stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_stop(fluid_synth_t *synth, unsigned int id)
     * }
     */
    public static int fluid_synth_stop(MemorySegment synth, int id) {
        var mh$ = fluid_synth_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_stop", synth, id);
            }
            return (int)mh$.invokeExact(synth, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_alloc_voice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_alloc_voice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_voice_t *fluid_synth_alloc_voice(fluid_synth_t *synth, fluid_sample_t *sample, int channum, int key, int vel)
     * }
     */
    public static FunctionDescriptor fluid_synth_alloc_voice$descriptor() {
        return fluid_synth_alloc_voice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_voice_t *fluid_synth_alloc_voice(fluid_synth_t *synth, fluid_sample_t *sample, int channum, int key, int vel)
     * }
     */
    public static MethodHandle fluid_synth_alloc_voice$handle() {
        return fluid_synth_alloc_voice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_voice_t *fluid_synth_alloc_voice(fluid_synth_t *synth, fluid_sample_t *sample, int channum, int key, int vel)
     * }
     */
    public static MemorySegment fluid_synth_alloc_voice$address() {
        return fluid_synth_alloc_voice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_voice_t *fluid_synth_alloc_voice(fluid_synth_t *synth, fluid_sample_t *sample, int channum, int key, int vel)
     * }
     */
    public static MemorySegment fluid_synth_alloc_voice(MemorySegment synth, MemorySegment sample, int channum, int key, int vel) {
        var mh$ = fluid_synth_alloc_voice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_alloc_voice", synth, sample, channum, key, vel);
            }
            return (MemorySegment)mh$.invokeExact(synth, sample, channum, key, vel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_start_voice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_start_voice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_start_voice(fluid_synth_t *synth, fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_synth_start_voice$descriptor() {
        return fluid_synth_start_voice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_start_voice(fluid_synth_t *synth, fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_synth_start_voice$handle() {
        return fluid_synth_start_voice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_start_voice(fluid_synth_t *synth, fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_synth_start_voice$address() {
        return fluid_synth_start_voice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_start_voice(fluid_synth_t *synth, fluid_voice_t *voice)
     * }
     */
    public static void fluid_synth_start_voice(MemorySegment synth, MemorySegment voice) {
        var mh$ = fluid_synth_start_voice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_start_voice", synth, voice);
            }
            mh$.invokeExact(synth, voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_voicelist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_voicelist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_get_voicelist(fluid_synth_t *synth, fluid_voice_t *buf[], int bufsize, int ID)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_voicelist$descriptor() {
        return fluid_synth_get_voicelist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_get_voicelist(fluid_synth_t *synth, fluid_voice_t *buf[], int bufsize, int ID)
     * }
     */
    public static MethodHandle fluid_synth_get_voicelist$handle() {
        return fluid_synth_get_voicelist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_get_voicelist(fluid_synth_t *synth, fluid_voice_t *buf[], int bufsize, int ID)
     * }
     */
    public static MemorySegment fluid_synth_get_voicelist$address() {
        return fluid_synth_get_voicelist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_get_voicelist(fluid_synth_t *synth, fluid_voice_t *buf[], int bufsize, int ID)
     * }
     */
    public static void fluid_synth_get_voicelist(MemorySegment synth, MemorySegment buf, int bufsize, int ID) {
        var mh$ = fluid_synth_get_voicelist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_voicelist", synth, buf, bufsize, ID);
            }
            mh$.invokeExact(synth, buf, bufsize, ID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sfload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sfload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sfload(fluid_synth_t *synth, const char *filename, int reset_presets)
     * }
     */
    public static FunctionDescriptor fluid_synth_sfload$descriptor() {
        return fluid_synth_sfload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sfload(fluid_synth_t *synth, const char *filename, int reset_presets)
     * }
     */
    public static MethodHandle fluid_synth_sfload$handle() {
        return fluid_synth_sfload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sfload(fluid_synth_t *synth, const char *filename, int reset_presets)
     * }
     */
    public static MemorySegment fluid_synth_sfload$address() {
        return fluid_synth_sfload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sfload(fluid_synth_t *synth, const char *filename, int reset_presets)
     * }
     */
    public static int fluid_synth_sfload(MemorySegment synth, MemorySegment filename, int reset_presets) {
        var mh$ = fluid_synth_sfload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sfload", synth, filename, reset_presets);
            }
            return (int)mh$.invokeExact(synth, filename, reset_presets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sfreload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sfreload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sfreload(fluid_synth_t *synth, int id)
     * }
     */
    public static FunctionDescriptor fluid_synth_sfreload$descriptor() {
        return fluid_synth_sfreload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sfreload(fluid_synth_t *synth, int id)
     * }
     */
    public static MethodHandle fluid_synth_sfreload$handle() {
        return fluid_synth_sfreload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sfreload(fluid_synth_t *synth, int id)
     * }
     */
    public static MemorySegment fluid_synth_sfreload$address() {
        return fluid_synth_sfreload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sfreload(fluid_synth_t *synth, int id)
     * }
     */
    public static int fluid_synth_sfreload(MemorySegment synth, int id) {
        var mh$ = fluid_synth_sfreload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sfreload", synth, id);
            }
            return (int)mh$.invokeExact(synth, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sfunload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sfunload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sfunload(fluid_synth_t *synth, int id, int reset_presets)
     * }
     */
    public static FunctionDescriptor fluid_synth_sfunload$descriptor() {
        return fluid_synth_sfunload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sfunload(fluid_synth_t *synth, int id, int reset_presets)
     * }
     */
    public static MethodHandle fluid_synth_sfunload$handle() {
        return fluid_synth_sfunload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sfunload(fluid_synth_t *synth, int id, int reset_presets)
     * }
     */
    public static MemorySegment fluid_synth_sfunload$address() {
        return fluid_synth_sfunload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sfunload(fluid_synth_t *synth, int id, int reset_presets)
     * }
     */
    public static int fluid_synth_sfunload(MemorySegment synth, int id, int reset_presets) {
        var mh$ = fluid_synth_sfunload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sfunload", synth, id, reset_presets);
            }
            return (int)mh$.invokeExact(synth, id, reset_presets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_add_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_add_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_add_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_synth_add_sfont$descriptor() {
        return fluid_synth_add_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_add_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_synth_add_sfont$handle() {
        return fluid_synth_add_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_add_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_synth_add_sfont$address() {
        return fluid_synth_add_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_add_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static int fluid_synth_add_sfont(MemorySegment synth, MemorySegment sfont) {
        var mh$ = fluid_synth_add_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_add_sfont", synth, sfont);
            }
            return (int)mh$.invokeExact(synth, sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_remove_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_remove_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_remove_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_synth_remove_sfont$descriptor() {
        return fluid_synth_remove_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_remove_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_synth_remove_sfont$handle() {
        return fluid_synth_remove_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_remove_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_synth_remove_sfont$address() {
        return fluid_synth_remove_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_remove_sfont(fluid_synth_t *synth, fluid_sfont_t *sfont)
     * }
     */
    public static int fluid_synth_remove_sfont(MemorySegment synth, MemorySegment sfont) {
        var mh$ = fluid_synth_remove_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_remove_sfont", synth, sfont);
            }
            return (int)mh$.invokeExact(synth, sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_sfcount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_sfcount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_sfcount(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_sfcount$descriptor() {
        return fluid_synth_sfcount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_sfcount(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_sfcount$handle() {
        return fluid_synth_sfcount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_sfcount(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_sfcount$address() {
        return fluid_synth_sfcount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_sfcount(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_sfcount(MemorySegment synth) {
        var mh$ = fluid_synth_sfcount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_sfcount", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont(fluid_synth_t *synth, unsigned int num)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_sfont$descriptor() {
        return fluid_synth_get_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont(fluid_synth_t *synth, unsigned int num)
     * }
     */
    public static MethodHandle fluid_synth_get_sfont$handle() {
        return fluid_synth_get_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont(fluid_synth_t *synth, unsigned int num)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont$address() {
        return fluid_synth_get_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont(fluid_synth_t *synth, unsigned int num)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont(MemorySegment synth, int num) {
        var mh$ = fluid_synth_get_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_sfont", synth, num);
            }
            return (MemorySegment)mh$.invokeExact(synth, num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_sfont_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_sfont_by_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_id(fluid_synth_t *synth, int id)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_sfont_by_id$descriptor() {
        return fluid_synth_get_sfont_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_id(fluid_synth_t *synth, int id)
     * }
     */
    public static MethodHandle fluid_synth_get_sfont_by_id$handle() {
        return fluid_synth_get_sfont_by_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_id(fluid_synth_t *synth, int id)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont_by_id$address() {
        return fluid_synth_get_sfont_by_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_id(fluid_synth_t *synth, int id)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont_by_id(MemorySegment synth, int id) {
        var mh$ = fluid_synth_get_sfont_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_sfont_by_id", synth, id);
            }
            return (MemorySegment)mh$.invokeExact(synth, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_sfont_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_sfont_by_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_name(fluid_synth_t *synth, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_sfont_by_name$descriptor() {
        return fluid_synth_get_sfont_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_name(fluid_synth_t *synth, const char *name)
     * }
     */
    public static MethodHandle fluid_synth_get_sfont_by_name$handle() {
        return fluid_synth_get_sfont_by_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_name(fluid_synth_t *synth, const char *name)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont_by_name$address() {
        return fluid_synth_get_sfont_by_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_synth_get_sfont_by_name(fluid_synth_t *synth, const char *name)
     * }
     */
    public static MemorySegment fluid_synth_get_sfont_by_name(MemorySegment synth, MemorySegment name) {
        var mh$ = fluid_synth_get_sfont_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_sfont_by_name", synth, name);
            }
            return (MemorySegment)mh$.invokeExact(synth, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_bank_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_bank_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_bank_offset(fluid_synth_t *synth, int sfont_id, int offset)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_bank_offset$descriptor() {
        return fluid_synth_set_bank_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_bank_offset(fluid_synth_t *synth, int sfont_id, int offset)
     * }
     */
    public static MethodHandle fluid_synth_set_bank_offset$handle() {
        return fluid_synth_set_bank_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_bank_offset(fluid_synth_t *synth, int sfont_id, int offset)
     * }
     */
    public static MemorySegment fluid_synth_set_bank_offset$address() {
        return fluid_synth_set_bank_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_bank_offset(fluid_synth_t *synth, int sfont_id, int offset)
     * }
     */
    public static int fluid_synth_set_bank_offset(MemorySegment synth, int sfont_id, int offset) {
        var mh$ = fluid_synth_set_bank_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_bank_offset", synth, sfont_id, offset);
            }
            return (int)mh$.invokeExact(synth, sfont_id, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_bank_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_bank_offset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_bank_offset(fluid_synth_t *synth, int sfont_id)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_bank_offset$descriptor() {
        return fluid_synth_get_bank_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_bank_offset(fluid_synth_t *synth, int sfont_id)
     * }
     */
    public static MethodHandle fluid_synth_get_bank_offset$handle() {
        return fluid_synth_get_bank_offset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_bank_offset(fluid_synth_t *synth, int sfont_id)
     * }
     */
    public static MemorySegment fluid_synth_get_bank_offset$address() {
        return fluid_synth_get_bank_offset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_bank_offset(fluid_synth_t *synth, int sfont_id)
     * }
     */
    public static int fluid_synth_get_bank_offset(MemorySegment synth, int sfont_id) {
        var mh$ = fluid_synth_get_bank_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_bank_offset", synth, sfont_id);
            }
            return (int)mh$.invokeExact(synth, sfont_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_set_reverb_on(fluid_synth_t *synth, int on)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_on$descriptor() {
        return fluid_synth_set_reverb_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_set_reverb_on(fluid_synth_t *synth, int on)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_on$handle() {
        return fluid_synth_set_reverb_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_set_reverb_on(fluid_synth_t *synth, int on)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_on$address() {
        return fluid_synth_set_reverb_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_set_reverb_on(fluid_synth_t *synth, int on)
     * }
     */
    public static void fluid_synth_set_reverb_on(MemorySegment synth, int on) {
        var mh$ = fluid_synth_set_reverb_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_on", synth, on);
            }
            mh$.invokeExact(synth, on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_reverb_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_reverb_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_reverb_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static FunctionDescriptor fluid_synth_reverb_on$descriptor() {
        return fluid_synth_reverb_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_reverb_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static MethodHandle fluid_synth_reverb_on$handle() {
        return fluid_synth_reverb_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_reverb_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static MemorySegment fluid_synth_reverb_on$address() {
        return fluid_synth_reverb_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_reverb_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static int fluid_synth_reverb_on(MemorySegment synth, int fx_group, int on) {
        var mh$ = fluid_synth_reverb_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_reverb_on", synth, fx_group, on);
            }
            return (int)mh$.invokeExact(synth, fx_group, on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb(fluid_synth_t *synth, double roomsize, double damping, double width, double level)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb$descriptor() {
        return fluid_synth_set_reverb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb(fluid_synth_t *synth, double roomsize, double damping, double width, double level)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb$handle() {
        return fluid_synth_set_reverb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb(fluid_synth_t *synth, double roomsize, double damping, double width, double level)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb$address() {
        return fluid_synth_set_reverb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb(fluid_synth_t *synth, double roomsize, double damping, double width, double level)
     * }
     */
    public static int fluid_synth_set_reverb(MemorySegment synth, double roomsize, double damping, double width, double level) {
        var mh$ = fluid_synth_set_reverb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb", synth, roomsize, damping, width, level);
            }
            return (int)mh$.invokeExact(synth, roomsize, damping, width, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_roomsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_roomsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_roomsize(fluid_synth_t *synth, double roomsize)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_roomsize$descriptor() {
        return fluid_synth_set_reverb_roomsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_roomsize(fluid_synth_t *synth, double roomsize)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_roomsize$handle() {
        return fluid_synth_set_reverb_roomsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_roomsize(fluid_synth_t *synth, double roomsize)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_roomsize$address() {
        return fluid_synth_set_reverb_roomsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_roomsize(fluid_synth_t *synth, double roomsize)
     * }
     */
    public static int fluid_synth_set_reverb_roomsize(MemorySegment synth, double roomsize) {
        var mh$ = fluid_synth_set_reverb_roomsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_roomsize", synth, roomsize);
            }
            return (int)mh$.invokeExact(synth, roomsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_damp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_damp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_damp(fluid_synth_t *synth, double damping)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_damp$descriptor() {
        return fluid_synth_set_reverb_damp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_damp(fluid_synth_t *synth, double damping)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_damp$handle() {
        return fluid_synth_set_reverb_damp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_damp(fluid_synth_t *synth, double damping)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_damp$address() {
        return fluid_synth_set_reverb_damp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_damp(fluid_synth_t *synth, double damping)
     * }
     */
    public static int fluid_synth_set_reverb_damp(MemorySegment synth, double damping) {
        var mh$ = fluid_synth_set_reverb_damp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_damp", synth, damping);
            }
            return (int)mh$.invokeExact(synth, damping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_width(fluid_synth_t *synth, double width)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_width$descriptor() {
        return fluid_synth_set_reverb_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_width(fluid_synth_t *synth, double width)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_width$handle() {
        return fluid_synth_set_reverb_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_width(fluid_synth_t *synth, double width)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_width$address() {
        return fluid_synth_set_reverb_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_width(fluid_synth_t *synth, double width)
     * }
     */
    public static int fluid_synth_set_reverb_width(MemorySegment synth, double width) {
        var mh$ = fluid_synth_set_reverb_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_width", synth, width);
            }
            return (int)mh$.invokeExact(synth, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_level(fluid_synth_t *synth, double level)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_level$descriptor() {
        return fluid_synth_set_reverb_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_level(fluid_synth_t *synth, double level)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_level$handle() {
        return fluid_synth_set_reverb_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_level(fluid_synth_t *synth, double level)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_level$address() {
        return fluid_synth_set_reverb_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_level(fluid_synth_t *synth, double level)
     * }
     */
    public static int fluid_synth_set_reverb_level(MemorySegment synth, double level) {
        var mh$ = fluid_synth_set_reverb_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_level", synth, level);
            }
            return (int)mh$.invokeExact(synth, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_roomsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_roomsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_roomsize(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_roomsize$descriptor() {
        return fluid_synth_get_reverb_roomsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_roomsize(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_roomsize$handle() {
        return fluid_synth_get_reverb_roomsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_roomsize(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_roomsize$address() {
        return fluid_synth_get_reverb_roomsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_roomsize(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_reverb_roomsize(MemorySegment synth) {
        var mh$ = fluid_synth_get_reverb_roomsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_roomsize", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_damp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_damp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_damp(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_damp$descriptor() {
        return fluid_synth_get_reverb_damp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_damp(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_damp$handle() {
        return fluid_synth_get_reverb_damp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_damp(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_damp$address() {
        return fluid_synth_get_reverb_damp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_damp(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_reverb_damp(MemorySegment synth) {
        var mh$ = fluid_synth_get_reverb_damp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_damp", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_level(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_level$descriptor() {
        return fluid_synth_get_reverb_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_level(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_level$handle() {
        return fluid_synth_get_reverb_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_level(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_level$address() {
        return fluid_synth_get_reverb_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_level(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_reverb_level(MemorySegment synth) {
        var mh$ = fluid_synth_get_reverb_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_level", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_width(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_width$descriptor() {
        return fluid_synth_get_reverb_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_width(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_width$handle() {
        return fluid_synth_get_reverb_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_width(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_width$address() {
        return fluid_synth_get_reverb_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_reverb_width(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_reverb_width(MemorySegment synth) {
        var mh$ = fluid_synth_get_reverb_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_width", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_group_roomsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_group_roomsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double roomsize)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_group_roomsize$descriptor() {
        return fluid_synth_set_reverb_group_roomsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double roomsize)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_group_roomsize$handle() {
        return fluid_synth_set_reverb_group_roomsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double roomsize)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_group_roomsize$address() {
        return fluid_synth_set_reverb_group_roomsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double roomsize)
     * }
     */
    public static int fluid_synth_set_reverb_group_roomsize(MemorySegment synth, int fx_group, double roomsize) {
        var mh$ = fluid_synth_set_reverb_group_roomsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_group_roomsize", synth, fx_group, roomsize);
            }
            return (int)mh$.invokeExact(synth, fx_group, roomsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_group_damp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_group_damp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_damp(fluid_synth_t *synth, int fx_group, double damping)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_group_damp$descriptor() {
        return fluid_synth_set_reverb_group_damp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_damp(fluid_synth_t *synth, int fx_group, double damping)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_group_damp$handle() {
        return fluid_synth_set_reverb_group_damp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_damp(fluid_synth_t *synth, int fx_group, double damping)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_group_damp$address() {
        return fluid_synth_set_reverb_group_damp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_damp(fluid_synth_t *synth, int fx_group, double damping)
     * }
     */
    public static int fluid_synth_set_reverb_group_damp(MemorySegment synth, int fx_group, double damping) {
        var mh$ = fluid_synth_set_reverb_group_damp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_group_damp", synth, fx_group, damping);
            }
            return (int)mh$.invokeExact(synth, fx_group, damping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_group_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_group_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_width(fluid_synth_t *synth, int fx_group, double width)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_group_width$descriptor() {
        return fluid_synth_set_reverb_group_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_width(fluid_synth_t *synth, int fx_group, double width)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_group_width$handle() {
        return fluid_synth_set_reverb_group_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_width(fluid_synth_t *synth, int fx_group, double width)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_group_width$address() {
        return fluid_synth_set_reverb_group_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_width(fluid_synth_t *synth, int fx_group, double width)
     * }
     */
    public static int fluid_synth_set_reverb_group_width(MemorySegment synth, int fx_group, double width) {
        var mh$ = fluid_synth_set_reverb_group_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_group_width", synth, fx_group, width);
            }
            return (int)mh$.invokeExact(synth, fx_group, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_reverb_group_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_reverb_group_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_reverb_group_level$descriptor() {
        return fluid_synth_set_reverb_group_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static MethodHandle fluid_synth_set_reverb_group_level$handle() {
        return fluid_synth_set_reverb_group_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static MemorySegment fluid_synth_set_reverb_group_level$address() {
        return fluid_synth_set_reverb_group_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_reverb_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static int fluid_synth_set_reverb_group_level(MemorySegment synth, int fx_group, double level) {
        var mh$ = fluid_synth_set_reverb_group_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_reverb_group_level", synth, fx_group, level);
            }
            return (int)mh$.invokeExact(synth, fx_group, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_group_roomsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_group_roomsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double *roomsize)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_group_roomsize$descriptor() {
        return fluid_synth_get_reverb_group_roomsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double *roomsize)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_group_roomsize$handle() {
        return fluid_synth_get_reverb_group_roomsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double *roomsize)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_group_roomsize$address() {
        return fluid_synth_get_reverb_group_roomsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_roomsize(fluid_synth_t *synth, int fx_group, double *roomsize)
     * }
     */
    public static int fluid_synth_get_reverb_group_roomsize(MemorySegment synth, int fx_group, MemorySegment roomsize) {
        var mh$ = fluid_synth_get_reverb_group_roomsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_group_roomsize", synth, fx_group, roomsize);
            }
            return (int)mh$.invokeExact(synth, fx_group, roomsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_group_damp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_group_damp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_damp(fluid_synth_t *synth, int fx_group, double *damping)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_group_damp$descriptor() {
        return fluid_synth_get_reverb_group_damp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_damp(fluid_synth_t *synth, int fx_group, double *damping)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_group_damp$handle() {
        return fluid_synth_get_reverb_group_damp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_damp(fluid_synth_t *synth, int fx_group, double *damping)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_group_damp$address() {
        return fluid_synth_get_reverb_group_damp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_damp(fluid_synth_t *synth, int fx_group, double *damping)
     * }
     */
    public static int fluid_synth_get_reverb_group_damp(MemorySegment synth, int fx_group, MemorySegment damping) {
        var mh$ = fluid_synth_get_reverb_group_damp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_group_damp", synth, fx_group, damping);
            }
            return (int)mh$.invokeExact(synth, fx_group, damping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_group_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_group_width");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_width(fluid_synth_t *synth, int fx_group, double *width)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_group_width$descriptor() {
        return fluid_synth_get_reverb_group_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_width(fluid_synth_t *synth, int fx_group, double *width)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_group_width$handle() {
        return fluid_synth_get_reverb_group_width.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_width(fluid_synth_t *synth, int fx_group, double *width)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_group_width$address() {
        return fluid_synth_get_reverb_group_width.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_width(fluid_synth_t *synth, int fx_group, double *width)
     * }
     */
    public static int fluid_synth_get_reverb_group_width(MemorySegment synth, int fx_group, MemorySegment width) {
        var mh$ = fluid_synth_get_reverb_group_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_group_width", synth, fx_group, width);
            }
            return (int)mh$.invokeExact(synth, fx_group, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_reverb_group_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_reverb_group_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_reverb_group_level$descriptor() {
        return fluid_synth_get_reverb_group_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static MethodHandle fluid_synth_get_reverb_group_level$handle() {
        return fluid_synth_get_reverb_group_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static MemorySegment fluid_synth_get_reverb_group_level$address() {
        return fluid_synth_get_reverb_group_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_reverb_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static int fluid_synth_get_reverb_group_level(MemorySegment synth, int fx_group, MemorySegment level) {
        var mh$ = fluid_synth_get_reverb_group_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_reverb_group_level", synth, fx_group, level);
            }
            return (int)mh$.invokeExact(synth, fx_group, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_CHORUS_MOD_SINE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_chorus_mod.FLUID_CHORUS_MOD_SINE = 0
     * }
     */
    public static int FLUID_CHORUS_MOD_SINE() {
        return FLUID_CHORUS_MOD_SINE;
    }
    private static final int FLUID_CHORUS_MOD_TRIANGLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_chorus_mod.FLUID_CHORUS_MOD_TRIANGLE = 1
     * }
     */
    public static int FLUID_CHORUS_MOD_TRIANGLE() {
        return FLUID_CHORUS_MOD_TRIANGLE;
    }

    private static class fluid_synth_set_chorus_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_set_chorus_on(fluid_synth_t *synth, int on)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_on$descriptor() {
        return fluid_synth_set_chorus_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_set_chorus_on(fluid_synth_t *synth, int on)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_on$handle() {
        return fluid_synth_set_chorus_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_set_chorus_on(fluid_synth_t *synth, int on)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_on$address() {
        return fluid_synth_set_chorus_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_set_chorus_on(fluid_synth_t *synth, int on)
     * }
     */
    public static void fluid_synth_set_chorus_on(MemorySegment synth, int on) {
        var mh$ = fluid_synth_set_chorus_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_on", synth, on);
            }
            mh$.invokeExact(synth, on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_chorus_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_chorus_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_chorus_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static FunctionDescriptor fluid_synth_chorus_on$descriptor() {
        return fluid_synth_chorus_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_chorus_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static MethodHandle fluid_synth_chorus_on$handle() {
        return fluid_synth_chorus_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_chorus_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static MemorySegment fluid_synth_chorus_on$address() {
        return fluid_synth_chorus_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_chorus_on(fluid_synth_t *synth, int fx_group, int on)
     * }
     */
    public static int fluid_synth_chorus_on(MemorySegment synth, int fx_group, int on) {
        var mh$ = fluid_synth_chorus_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_chorus_on", synth, fx_group, on);
            }
            return (int)mh$.invokeExact(synth, fx_group, on);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus(fluid_synth_t *synth, int nr, double level, double speed, double depth_ms, int type)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus$descriptor() {
        return fluid_synth_set_chorus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus(fluid_synth_t *synth, int nr, double level, double speed, double depth_ms, int type)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus$handle() {
        return fluid_synth_set_chorus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus(fluid_synth_t *synth, int nr, double level, double speed, double depth_ms, int type)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus$address() {
        return fluid_synth_set_chorus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus(fluid_synth_t *synth, int nr, double level, double speed, double depth_ms, int type)
     * }
     */
    public static int fluid_synth_set_chorus(MemorySegment synth, int nr, double level, double speed, double depth_ms, int type) {
        var mh$ = fluid_synth_set_chorus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus", synth, nr, level, speed, depth_ms, type);
            }
            return (int)mh$.invokeExact(synth, nr, level, speed, depth_ms, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_nr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_nr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_nr(fluid_synth_t *synth, int nr)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_nr$descriptor() {
        return fluid_synth_set_chorus_nr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_nr(fluid_synth_t *synth, int nr)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_nr$handle() {
        return fluid_synth_set_chorus_nr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_nr(fluid_synth_t *synth, int nr)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_nr$address() {
        return fluid_synth_set_chorus_nr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_nr(fluid_synth_t *synth, int nr)
     * }
     */
    public static int fluid_synth_set_chorus_nr(MemorySegment synth, int nr) {
        var mh$ = fluid_synth_set_chorus_nr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_nr", synth, nr);
            }
            return (int)mh$.invokeExact(synth, nr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_level(fluid_synth_t *synth, double level)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_level$descriptor() {
        return fluid_synth_set_chorus_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_level(fluid_synth_t *synth, double level)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_level$handle() {
        return fluid_synth_set_chorus_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_level(fluid_synth_t *synth, double level)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_level$address() {
        return fluid_synth_set_chorus_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_level(fluid_synth_t *synth, double level)
     * }
     */
    public static int fluid_synth_set_chorus_level(MemorySegment synth, double level) {
        var mh$ = fluid_synth_set_chorus_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_level", synth, level);
            }
            return (int)mh$.invokeExact(synth, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_speed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_speed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_speed(fluid_synth_t *synth, double speed)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_speed$descriptor() {
        return fluid_synth_set_chorus_speed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_speed(fluid_synth_t *synth, double speed)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_speed$handle() {
        return fluid_synth_set_chorus_speed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_speed(fluid_synth_t *synth, double speed)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_speed$address() {
        return fluid_synth_set_chorus_speed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_speed(fluid_synth_t *synth, double speed)
     * }
     */
    public static int fluid_synth_set_chorus_speed(MemorySegment synth, double speed) {
        var mh$ = fluid_synth_set_chorus_speed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_speed", synth, speed);
            }
            return (int)mh$.invokeExact(synth, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_depth(fluid_synth_t *synth, double depth_ms)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_depth$descriptor() {
        return fluid_synth_set_chorus_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_depth(fluid_synth_t *synth, double depth_ms)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_depth$handle() {
        return fluid_synth_set_chorus_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_depth(fluid_synth_t *synth, double depth_ms)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_depth$address() {
        return fluid_synth_set_chorus_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_depth(fluid_synth_t *synth, double depth_ms)
     * }
     */
    public static int fluid_synth_set_chorus_depth(MemorySegment synth, double depth_ms) {
        var mh$ = fluid_synth_set_chorus_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_depth", synth, depth_ms);
            }
            return (int)mh$.invokeExact(synth, depth_ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_type(fluid_synth_t *synth, int type)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_type$descriptor() {
        return fluid_synth_set_chorus_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_type(fluid_synth_t *synth, int type)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_type$handle() {
        return fluid_synth_set_chorus_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_type(fluid_synth_t *synth, int type)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_type$address() {
        return fluid_synth_set_chorus_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_type(fluid_synth_t *synth, int type)
     * }
     */
    public static int fluid_synth_set_chorus_type(MemorySegment synth, int type) {
        var mh$ = fluid_synth_set_chorus_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_type", synth, type);
            }
            return (int)mh$.invokeExact(synth, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_nr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_nr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_nr(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_nr$descriptor() {
        return fluid_synth_get_chorus_nr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_nr(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_nr$handle() {
        return fluid_synth_get_chorus_nr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_nr(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_nr$address() {
        return fluid_synth_get_chorus_nr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_nr(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_get_chorus_nr(MemorySegment synth) {
        var mh$ = fluid_synth_get_chorus_nr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_nr", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_level(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_level$descriptor() {
        return fluid_synth_get_chorus_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_level(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_level$handle() {
        return fluid_synth_get_chorus_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_level(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_level$address() {
        return fluid_synth_get_chorus_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_level(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_chorus_level(MemorySegment synth) {
        var mh$ = fluid_synth_get_chorus_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_level", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_speed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_speed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_speed(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_speed$descriptor() {
        return fluid_synth_get_chorus_speed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_speed(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_speed$handle() {
        return fluid_synth_get_chorus_speed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_speed(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_speed$address() {
        return fluid_synth_get_chorus_speed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_speed(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_chorus_speed(MemorySegment synth) {
        var mh$ = fluid_synth_get_chorus_speed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_speed", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_depth(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_depth$descriptor() {
        return fluid_synth_get_chorus_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_depth(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_depth$handle() {
        return fluid_synth_get_chorus_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_depth(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_depth$address() {
        return fluid_synth_get_chorus_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_synth_get_chorus_depth(fluid_synth_t *synth)
     * }
     */
    public static double fluid_synth_get_chorus_depth(MemorySegment synth) {
        var mh$ = fluid_synth_get_chorus_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_depth", synth);
            }
            return (double)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_type(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_type$descriptor() {
        return fluid_synth_get_chorus_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_type(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_type$handle() {
        return fluid_synth_get_chorus_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_type(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_type$address() {
        return fluid_synth_get_chorus_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_type(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_get_chorus_type(MemorySegment synth) {
        var mh$ = fluid_synth_get_chorus_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_type", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_group_nr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_group_nr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_nr(fluid_synth_t *synth, int fx_group, int nr)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_group_nr$descriptor() {
        return fluid_synth_set_chorus_group_nr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_nr(fluid_synth_t *synth, int fx_group, int nr)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_group_nr$handle() {
        return fluid_synth_set_chorus_group_nr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_nr(fluid_synth_t *synth, int fx_group, int nr)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_group_nr$address() {
        return fluid_synth_set_chorus_group_nr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_nr(fluid_synth_t *synth, int fx_group, int nr)
     * }
     */
    public static int fluid_synth_set_chorus_group_nr(MemorySegment synth, int fx_group, int nr) {
        var mh$ = fluid_synth_set_chorus_group_nr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_group_nr", synth, fx_group, nr);
            }
            return (int)mh$.invokeExact(synth, fx_group, nr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_group_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_group_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_group_level$descriptor() {
        return fluid_synth_set_chorus_group_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_group_level$handle() {
        return fluid_synth_set_chorus_group_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_group_level$address() {
        return fluid_synth_set_chorus_group_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_level(fluid_synth_t *synth, int fx_group, double level)
     * }
     */
    public static int fluid_synth_set_chorus_group_level(MemorySegment synth, int fx_group, double level) {
        var mh$ = fluid_synth_set_chorus_group_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_group_level", synth, fx_group, level);
            }
            return (int)mh$.invokeExact(synth, fx_group, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_group_speed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_group_speed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_speed(fluid_synth_t *synth, int fx_group, double speed)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_group_speed$descriptor() {
        return fluid_synth_set_chorus_group_speed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_speed(fluid_synth_t *synth, int fx_group, double speed)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_group_speed$handle() {
        return fluid_synth_set_chorus_group_speed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_speed(fluid_synth_t *synth, int fx_group, double speed)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_group_speed$address() {
        return fluid_synth_set_chorus_group_speed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_speed(fluid_synth_t *synth, int fx_group, double speed)
     * }
     */
    public static int fluid_synth_set_chorus_group_speed(MemorySegment synth, int fx_group, double speed) {
        var mh$ = fluid_synth_set_chorus_group_speed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_group_speed", synth, fx_group, speed);
            }
            return (int)mh$.invokeExact(synth, fx_group, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_group_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_group_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_depth(fluid_synth_t *synth, int fx_group, double depth_ms)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_group_depth$descriptor() {
        return fluid_synth_set_chorus_group_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_depth(fluid_synth_t *synth, int fx_group, double depth_ms)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_group_depth$handle() {
        return fluid_synth_set_chorus_group_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_depth(fluid_synth_t *synth, int fx_group, double depth_ms)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_group_depth$address() {
        return fluid_synth_set_chorus_group_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_depth(fluid_synth_t *synth, int fx_group, double depth_ms)
     * }
     */
    public static int fluid_synth_set_chorus_group_depth(MemorySegment synth, int fx_group, double depth_ms) {
        var mh$ = fluid_synth_set_chorus_group_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_group_depth", synth, fx_group, depth_ms);
            }
            return (int)mh$.invokeExact(synth, fx_group, depth_ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_chorus_group_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_chorus_group_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_type(fluid_synth_t *synth, int fx_group, int type)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_chorus_group_type$descriptor() {
        return fluid_synth_set_chorus_group_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_type(fluid_synth_t *synth, int fx_group, int type)
     * }
     */
    public static MethodHandle fluid_synth_set_chorus_group_type$handle() {
        return fluid_synth_set_chorus_group_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_type(fluid_synth_t *synth, int fx_group, int type)
     * }
     */
    public static MemorySegment fluid_synth_set_chorus_group_type$address() {
        return fluid_synth_set_chorus_group_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_chorus_group_type(fluid_synth_t *synth, int fx_group, int type)
     * }
     */
    public static int fluid_synth_set_chorus_group_type(MemorySegment synth, int fx_group, int type) {
        var mh$ = fluid_synth_set_chorus_group_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_chorus_group_type", synth, fx_group, type);
            }
            return (int)mh$.invokeExact(synth, fx_group, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_group_nr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_group_nr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_nr(fluid_synth_t *synth, int fx_group, int *nr)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_group_nr$descriptor() {
        return fluid_synth_get_chorus_group_nr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_nr(fluid_synth_t *synth, int fx_group, int *nr)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_group_nr$handle() {
        return fluid_synth_get_chorus_group_nr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_nr(fluid_synth_t *synth, int fx_group, int *nr)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_group_nr$address() {
        return fluid_synth_get_chorus_group_nr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_nr(fluid_synth_t *synth, int fx_group, int *nr)
     * }
     */
    public static int fluid_synth_get_chorus_group_nr(MemorySegment synth, int fx_group, MemorySegment nr) {
        var mh$ = fluid_synth_get_chorus_group_nr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_group_nr", synth, fx_group, nr);
            }
            return (int)mh$.invokeExact(synth, fx_group, nr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_group_level {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_group_level");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_group_level$descriptor() {
        return fluid_synth_get_chorus_group_level.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_group_level$handle() {
        return fluid_synth_get_chorus_group_level.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_group_level$address() {
        return fluid_synth_get_chorus_group_level.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_level(fluid_synth_t *synth, int fx_group, double *level)
     * }
     */
    public static int fluid_synth_get_chorus_group_level(MemorySegment synth, int fx_group, MemorySegment level) {
        var mh$ = fluid_synth_get_chorus_group_level.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_group_level", synth, fx_group, level);
            }
            return (int)mh$.invokeExact(synth, fx_group, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_group_speed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_group_speed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_speed(fluid_synth_t *synth, int fx_group, double *speed)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_group_speed$descriptor() {
        return fluid_synth_get_chorus_group_speed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_speed(fluid_synth_t *synth, int fx_group, double *speed)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_group_speed$handle() {
        return fluid_synth_get_chorus_group_speed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_speed(fluid_synth_t *synth, int fx_group, double *speed)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_group_speed$address() {
        return fluid_synth_get_chorus_group_speed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_speed(fluid_synth_t *synth, int fx_group, double *speed)
     * }
     */
    public static int fluid_synth_get_chorus_group_speed(MemorySegment synth, int fx_group, MemorySegment speed) {
        var mh$ = fluid_synth_get_chorus_group_speed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_group_speed", synth, fx_group, speed);
            }
            return (int)mh$.invokeExact(synth, fx_group, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_group_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_group_depth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_depth(fluid_synth_t *synth, int fx_group, double *depth_ms)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_group_depth$descriptor() {
        return fluid_synth_get_chorus_group_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_depth(fluid_synth_t *synth, int fx_group, double *depth_ms)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_group_depth$handle() {
        return fluid_synth_get_chorus_group_depth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_depth(fluid_synth_t *synth, int fx_group, double *depth_ms)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_group_depth$address() {
        return fluid_synth_get_chorus_group_depth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_depth(fluid_synth_t *synth, int fx_group, double *depth_ms)
     * }
     */
    public static int fluid_synth_get_chorus_group_depth(MemorySegment synth, int fx_group, MemorySegment depth_ms) {
        var mh$ = fluid_synth_get_chorus_group_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_group_depth", synth, fx_group, depth_ms);
            }
            return (int)mh$.invokeExact(synth, fx_group, depth_ms);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_chorus_group_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_chorus_group_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_type(fluid_synth_t *synth, int fx_group, int *type)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_chorus_group_type$descriptor() {
        return fluid_synth_get_chorus_group_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_type(fluid_synth_t *synth, int fx_group, int *type)
     * }
     */
    public static MethodHandle fluid_synth_get_chorus_group_type$handle() {
        return fluid_synth_get_chorus_group_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_type(fluid_synth_t *synth, int fx_group, int *type)
     * }
     */
    public static MemorySegment fluid_synth_get_chorus_group_type$address() {
        return fluid_synth_get_chorus_group_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_chorus_group_type(fluid_synth_t *synth, int fx_group, int *type)
     * }
     */
    public static int fluid_synth_get_chorus_group_type(MemorySegment synth, int fx_group, MemorySegment type) {
        var mh$ = fluid_synth_get_chorus_group_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_chorus_group_type", synth, fx_group, type);
            }
            return (int)mh$.invokeExact(synth, fx_group, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_count_midi_channels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_count_midi_channels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_count_midi_channels(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_count_midi_channels$descriptor() {
        return fluid_synth_count_midi_channels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_count_midi_channels(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_count_midi_channels$handle() {
        return fluid_synth_count_midi_channels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_count_midi_channels(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_count_midi_channels$address() {
        return fluid_synth_count_midi_channels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_count_midi_channels(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_count_midi_channels(MemorySegment synth) {
        var mh$ = fluid_synth_count_midi_channels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_count_midi_channels", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_count_audio_channels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_count_audio_channels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_channels(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_count_audio_channels$descriptor() {
        return fluid_synth_count_audio_channels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_channels(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_count_audio_channels$handle() {
        return fluid_synth_count_audio_channels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_channels(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_count_audio_channels$address() {
        return fluid_synth_count_audio_channels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_count_audio_channels(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_count_audio_channels(MemorySegment synth) {
        var mh$ = fluid_synth_count_audio_channels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_count_audio_channels", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_count_audio_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_count_audio_groups");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_groups(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_count_audio_groups$descriptor() {
        return fluid_synth_count_audio_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_groups(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_count_audio_groups$handle() {
        return fluid_synth_count_audio_groups.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_count_audio_groups(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_count_audio_groups$address() {
        return fluid_synth_count_audio_groups.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_count_audio_groups(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_count_audio_groups(MemorySegment synth) {
        var mh$ = fluid_synth_count_audio_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_count_audio_groups", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_count_effects_channels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_count_effects_channels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_channels(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_count_effects_channels$descriptor() {
        return fluid_synth_count_effects_channels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_channels(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_count_effects_channels$handle() {
        return fluid_synth_count_effects_channels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_channels(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_count_effects_channels$address() {
        return fluid_synth_count_effects_channels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_count_effects_channels(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_count_effects_channels(MemorySegment synth) {
        var mh$ = fluid_synth_count_effects_channels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_count_effects_channels", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_count_effects_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_count_effects_groups");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_groups(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_count_effects_groups$descriptor() {
        return fluid_synth_count_effects_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_groups(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_count_effects_groups$handle() {
        return fluid_synth_count_effects_groups.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_count_effects_groups(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_count_effects_groups$address() {
        return fluid_synth_count_effects_groups.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_count_effects_groups(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_count_effects_groups(MemorySegment synth) {
        var mh$ = fluid_synth_count_effects_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_count_effects_groups", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_sample_rate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_sample_rate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_set_sample_rate(fluid_synth_t *synth, float sample_rate)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_sample_rate$descriptor() {
        return fluid_synth_set_sample_rate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_set_sample_rate(fluid_synth_t *synth, float sample_rate)
     * }
     */
    public static MethodHandle fluid_synth_set_sample_rate$handle() {
        return fluid_synth_set_sample_rate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_set_sample_rate(fluid_synth_t *synth, float sample_rate)
     * }
     */
    public static MemorySegment fluid_synth_set_sample_rate$address() {
        return fluid_synth_set_sample_rate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_set_sample_rate(fluid_synth_t *synth, float sample_rate)
     * }
     */
    public static void fluid_synth_set_sample_rate(MemorySegment synth, float sample_rate) {
        var mh$ = fluid_synth_set_sample_rate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_sample_rate", synth, sample_rate);
            }
            mh$.invokeExact(synth, sample_rate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_gain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_gain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_set_gain(fluid_synth_t *synth, float gain)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_gain$descriptor() {
        return fluid_synth_set_gain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_set_gain(fluid_synth_t *synth, float gain)
     * }
     */
    public static MethodHandle fluid_synth_set_gain$handle() {
        return fluid_synth_set_gain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_set_gain(fluid_synth_t *synth, float gain)
     * }
     */
    public static MemorySegment fluid_synth_set_gain$address() {
        return fluid_synth_set_gain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_set_gain(fluid_synth_t *synth, float gain)
     * }
     */
    public static void fluid_synth_set_gain(MemorySegment synth, float gain) {
        var mh$ = fluid_synth_set_gain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_gain", synth, gain);
            }
            mh$.invokeExact(synth, gain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_gain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_gain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float fluid_synth_get_gain(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_gain$descriptor() {
        return fluid_synth_get_gain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float fluid_synth_get_gain(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_gain$handle() {
        return fluid_synth_get_gain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float fluid_synth_get_gain(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_gain$address() {
        return fluid_synth_get_gain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float fluid_synth_get_gain(fluid_synth_t *synth)
     * }
     */
    public static float fluid_synth_get_gain(MemorySegment synth) {
        var mh$ = fluid_synth_get_gain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_gain", synth);
            }
            return (float)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_polyphony {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_polyphony");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_polyphony(fluid_synth_t *synth, int polyphony)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_polyphony$descriptor() {
        return fluid_synth_set_polyphony.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_polyphony(fluid_synth_t *synth, int polyphony)
     * }
     */
    public static MethodHandle fluid_synth_set_polyphony$handle() {
        return fluid_synth_set_polyphony.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_polyphony(fluid_synth_t *synth, int polyphony)
     * }
     */
    public static MemorySegment fluid_synth_set_polyphony$address() {
        return fluid_synth_set_polyphony.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_polyphony(fluid_synth_t *synth, int polyphony)
     * }
     */
    public static int fluid_synth_set_polyphony(MemorySegment synth, int polyphony) {
        var mh$ = fluid_synth_set_polyphony.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_polyphony", synth, polyphony);
            }
            return (int)mh$.invokeExact(synth, polyphony);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_polyphony {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_polyphony");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_polyphony(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_polyphony$descriptor() {
        return fluid_synth_get_polyphony.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_polyphony(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_polyphony$handle() {
        return fluid_synth_get_polyphony.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_polyphony(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_polyphony$address() {
        return fluid_synth_get_polyphony.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_polyphony(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_get_polyphony(MemorySegment synth) {
        var mh$ = fluid_synth_get_polyphony.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_polyphony", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_active_voice_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_active_voice_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_active_voice_count(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_active_voice_count$descriptor() {
        return fluid_synth_get_active_voice_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_active_voice_count(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_active_voice_count$handle() {
        return fluid_synth_get_active_voice_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_active_voice_count(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_active_voice_count$address() {
        return fluid_synth_get_active_voice_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_active_voice_count(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_get_active_voice_count(MemorySegment synth) {
        var mh$ = fluid_synth_get_active_voice_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_active_voice_count", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_internal_bufsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_internal_bufsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_internal_bufsize(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_internal_bufsize$descriptor() {
        return fluid_synth_get_internal_bufsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_internal_bufsize(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_internal_bufsize$handle() {
        return fluid_synth_get_internal_bufsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_internal_bufsize(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_internal_bufsize$address() {
        return fluid_synth_get_internal_bufsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_internal_bufsize(fluid_synth_t *synth)
     * }
     */
    public static int fluid_synth_get_internal_bufsize(MemorySegment synth) {
        var mh$ = fluid_synth_get_internal_bufsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_internal_bufsize", synth);
            }
            return (int)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_interp_method {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_interp_method");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_interp_method(fluid_synth_t *synth, int chan, int interp_method)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_interp_method$descriptor() {
        return fluid_synth_set_interp_method.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_interp_method(fluid_synth_t *synth, int chan, int interp_method)
     * }
     */
    public static MethodHandle fluid_synth_set_interp_method$handle() {
        return fluid_synth_set_interp_method.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_interp_method(fluid_synth_t *synth, int chan, int interp_method)
     * }
     */
    public static MemorySegment fluid_synth_set_interp_method$address() {
        return fluid_synth_set_interp_method.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_interp_method(fluid_synth_t *synth, int chan, int interp_method)
     * }
     */
    public static int fluid_synth_set_interp_method(MemorySegment synth, int chan, int interp_method) {
        var mh$ = fluid_synth_set_interp_method.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_interp_method", synth, chan, interp_method);
            }
            return (int)mh$.invokeExact(synth, chan, interp_method);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_INTERP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_NONE = 0
     * }
     */
    public static int FLUID_INTERP_NONE() {
        return FLUID_INTERP_NONE;
    }
    private static final int FLUID_INTERP_LINEAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_LINEAR = 1
     * }
     */
    public static int FLUID_INTERP_LINEAR() {
        return FLUID_INTERP_LINEAR;
    }
    private static final int FLUID_INTERP_4THORDER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_4THORDER = 4
     * }
     */
    public static int FLUID_INTERP_4THORDER() {
        return FLUID_INTERP_4THORDER;
    }
    private static final int FLUID_INTERP_7THORDER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_7THORDER = 7
     * }
     */
    public static int FLUID_INTERP_7THORDER() {
        return FLUID_INTERP_7THORDER;
    }
    private static final int FLUID_INTERP_DEFAULT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_DEFAULT = 4
     * }
     */
    public static int FLUID_INTERP_DEFAULT() {
        return FLUID_INTERP_DEFAULT;
    }
    private static final int FLUID_INTERP_HIGHEST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum fluid_interp.FLUID_INTERP_HIGHEST = 7
     * }
     */
    public static int FLUID_INTERP_HIGHEST() {
        return FLUID_INTERP_HIGHEST;
    }
    private static final int FLUID_SYNTH_OVERWRITE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_synth_add_mod.FLUID_SYNTH_OVERWRITE = 0
     * }
     */
    public static int FLUID_SYNTH_OVERWRITE() {
        return FLUID_SYNTH_OVERWRITE;
    }
    private static final int FLUID_SYNTH_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_synth_add_mod.FLUID_SYNTH_ADD = 1
     * }
     */
    public static int FLUID_SYNTH_ADD() {
        return FLUID_SYNTH_ADD;
    }

    private static class fluid_synth_add_default_mod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_add_default_mod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_add_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod, int mode)
     * }
     */
    public static FunctionDescriptor fluid_synth_add_default_mod$descriptor() {
        return fluid_synth_add_default_mod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_add_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod, int mode)
     * }
     */
    public static MethodHandle fluid_synth_add_default_mod$handle() {
        return fluid_synth_add_default_mod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_add_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod, int mode)
     * }
     */
    public static MemorySegment fluid_synth_add_default_mod$address() {
        return fluid_synth_add_default_mod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_add_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod, int mode)
     * }
     */
    public static int fluid_synth_add_default_mod(MemorySegment synth, MemorySegment mod, int mode) {
        var mh$ = fluid_synth_add_default_mod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_add_default_mod", synth, mod, mode);
            }
            return (int)mh$.invokeExact(synth, mod, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_remove_default_mod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_remove_default_mod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_remove_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_synth_remove_default_mod$descriptor() {
        return fluid_synth_remove_default_mod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_remove_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_synth_remove_default_mod$handle() {
        return fluid_synth_remove_default_mod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_remove_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_synth_remove_default_mod$address() {
        return fluid_synth_remove_default_mod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_remove_default_mod(fluid_synth_t *synth, const fluid_mod_t *mod)
     * }
     */
    public static int fluid_synth_remove_default_mod(MemorySegment synth, MemorySegment mod) {
        var mh$ = fluid_synth_remove_default_mod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_remove_default_mod", synth, mod);
            }
            return (int)mh$.invokeExact(synth, mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_activate_key_tuning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_activate_key_tuning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_activate_key_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static FunctionDescriptor fluid_synth_activate_key_tuning$descriptor() {
        return fluid_synth_activate_key_tuning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_activate_key_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static MethodHandle fluid_synth_activate_key_tuning$handle() {
        return fluid_synth_activate_key_tuning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_activate_key_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static MemorySegment fluid_synth_activate_key_tuning$address() {
        return fluid_synth_activate_key_tuning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_activate_key_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static int fluid_synth_activate_key_tuning(MemorySegment synth, int bank, int prog, MemorySegment name, MemorySegment pitch, int apply) {
        var mh$ = fluid_synth_activate_key_tuning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_activate_key_tuning", synth, bank, prog, name, pitch, apply);
            }
            return (int)mh$.invokeExact(synth, bank, prog, name, pitch, apply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_activate_octave_tuning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_activate_octave_tuning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_activate_octave_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static FunctionDescriptor fluid_synth_activate_octave_tuning$descriptor() {
        return fluid_synth_activate_octave_tuning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_activate_octave_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static MethodHandle fluid_synth_activate_octave_tuning$handle() {
        return fluid_synth_activate_octave_tuning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_activate_octave_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static MemorySegment fluid_synth_activate_octave_tuning$address() {
        return fluid_synth_activate_octave_tuning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_activate_octave_tuning(fluid_synth_t *synth, int bank, int prog, const char *name, const double *pitch, int apply)
     * }
     */
    public static int fluid_synth_activate_octave_tuning(MemorySegment synth, int bank, int prog, MemorySegment name, MemorySegment pitch, int apply) {
        var mh$ = fluid_synth_activate_octave_tuning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_activate_octave_tuning", synth, bank, prog, name, pitch, apply);
            }
            return (int)mh$.invokeExact(synth, bank, prog, name, pitch, apply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_tune_notes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_tune_notes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_tune_notes(fluid_synth_t *synth, int bank, int prog, int len, const int *keys, const double *pitch, int apply)
     * }
     */
    public static FunctionDescriptor fluid_synth_tune_notes$descriptor() {
        return fluid_synth_tune_notes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_tune_notes(fluid_synth_t *synth, int bank, int prog, int len, const int *keys, const double *pitch, int apply)
     * }
     */
    public static MethodHandle fluid_synth_tune_notes$handle() {
        return fluid_synth_tune_notes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_tune_notes(fluid_synth_t *synth, int bank, int prog, int len, const int *keys, const double *pitch, int apply)
     * }
     */
    public static MemorySegment fluid_synth_tune_notes$address() {
        return fluid_synth_tune_notes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_tune_notes(fluid_synth_t *synth, int bank, int prog, int len, const int *keys, const double *pitch, int apply)
     * }
     */
    public static int fluid_synth_tune_notes(MemorySegment synth, int bank, int prog, int len, MemorySegment keys, MemorySegment pitch, int apply) {
        var mh$ = fluid_synth_tune_notes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_tune_notes", synth, bank, prog, len, keys, pitch, apply);
            }
            return (int)mh$.invokeExact(synth, bank, prog, len, keys, pitch, apply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_activate_tuning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_activate_tuning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_activate_tuning(fluid_synth_t *synth, int chan, int bank, int prog, int apply)
     * }
     */
    public static FunctionDescriptor fluid_synth_activate_tuning$descriptor() {
        return fluid_synth_activate_tuning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_activate_tuning(fluid_synth_t *synth, int chan, int bank, int prog, int apply)
     * }
     */
    public static MethodHandle fluid_synth_activate_tuning$handle() {
        return fluid_synth_activate_tuning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_activate_tuning(fluid_synth_t *synth, int chan, int bank, int prog, int apply)
     * }
     */
    public static MemorySegment fluid_synth_activate_tuning$address() {
        return fluid_synth_activate_tuning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_activate_tuning(fluid_synth_t *synth, int chan, int bank, int prog, int apply)
     * }
     */
    public static int fluid_synth_activate_tuning(MemorySegment synth, int chan, int bank, int prog, int apply) {
        var mh$ = fluid_synth_activate_tuning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_activate_tuning", synth, chan, bank, prog, apply);
            }
            return (int)mh$.invokeExact(synth, chan, bank, prog, apply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_deactivate_tuning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_deactivate_tuning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_deactivate_tuning(fluid_synth_t *synth, int chan, int apply)
     * }
     */
    public static FunctionDescriptor fluid_synth_deactivate_tuning$descriptor() {
        return fluid_synth_deactivate_tuning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_deactivate_tuning(fluid_synth_t *synth, int chan, int apply)
     * }
     */
    public static MethodHandle fluid_synth_deactivate_tuning$handle() {
        return fluid_synth_deactivate_tuning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_deactivate_tuning(fluid_synth_t *synth, int chan, int apply)
     * }
     */
    public static MemorySegment fluid_synth_deactivate_tuning$address() {
        return fluid_synth_deactivate_tuning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_deactivate_tuning(fluid_synth_t *synth, int chan, int apply)
     * }
     */
    public static int fluid_synth_deactivate_tuning(MemorySegment synth, int chan, int apply) {
        var mh$ = fluid_synth_deactivate_tuning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_deactivate_tuning", synth, chan, apply);
            }
            return (int)mh$.invokeExact(synth, chan, apply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_tuning_iteration_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_tuning_iteration_start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_tuning_iteration_start(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_tuning_iteration_start$descriptor() {
        return fluid_synth_tuning_iteration_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_tuning_iteration_start(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_tuning_iteration_start$handle() {
        return fluid_synth_tuning_iteration_start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_tuning_iteration_start(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_tuning_iteration_start$address() {
        return fluid_synth_tuning_iteration_start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_tuning_iteration_start(fluid_synth_t *synth)
     * }
     */
    public static void fluid_synth_tuning_iteration_start(MemorySegment synth) {
        var mh$ = fluid_synth_tuning_iteration_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_tuning_iteration_start", synth);
            }
            mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_tuning_iteration_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_tuning_iteration_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_iteration_next(fluid_synth_t *synth, int *bank, int *prog)
     * }
     */
    public static FunctionDescriptor fluid_synth_tuning_iteration_next$descriptor() {
        return fluid_synth_tuning_iteration_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_iteration_next(fluid_synth_t *synth, int *bank, int *prog)
     * }
     */
    public static MethodHandle fluid_synth_tuning_iteration_next$handle() {
        return fluid_synth_tuning_iteration_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_iteration_next(fluid_synth_t *synth, int *bank, int *prog)
     * }
     */
    public static MemorySegment fluid_synth_tuning_iteration_next$address() {
        return fluid_synth_tuning_iteration_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_tuning_iteration_next(fluid_synth_t *synth, int *bank, int *prog)
     * }
     */
    public static int fluid_synth_tuning_iteration_next(MemorySegment synth, MemorySegment bank, MemorySegment prog) {
        var mh$ = fluid_synth_tuning_iteration_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_tuning_iteration_next", synth, bank, prog);
            }
            return (int)mh$.invokeExact(synth, bank, prog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_tuning_dump {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_tuning_dump");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_dump(fluid_synth_t *synth, int bank, int prog, char *name, int len, double *pitch)
     * }
     */
    public static FunctionDescriptor fluid_synth_tuning_dump$descriptor() {
        return fluid_synth_tuning_dump.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_dump(fluid_synth_t *synth, int bank, int prog, char *name, int len, double *pitch)
     * }
     */
    public static MethodHandle fluid_synth_tuning_dump$handle() {
        return fluid_synth_tuning_dump.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_tuning_dump(fluid_synth_t *synth, int bank, int prog, char *name, int len, double *pitch)
     * }
     */
    public static MemorySegment fluid_synth_tuning_dump$address() {
        return fluid_synth_tuning_dump.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_tuning_dump(fluid_synth_t *synth, int bank, int prog, char *name, int len, double *pitch)
     * }
     */
    public static int fluid_synth_tuning_dump(MemorySegment synth, int bank, int prog, MemorySegment name, int len, MemorySegment pitch) {
        var mh$ = fluid_synth_tuning_dump.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_tuning_dump", synth, bank, prog, name, len, pitch);
            }
            return (int)mh$.invokeExact(synth, bank, prog, name, len, pitch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_write_s16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_write_s16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_write_s16(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static FunctionDescriptor fluid_synth_write_s16$descriptor() {
        return fluid_synth_write_s16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_write_s16(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static MethodHandle fluid_synth_write_s16$handle() {
        return fluid_synth_write_s16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_write_s16(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static MemorySegment fluid_synth_write_s16$address() {
        return fluid_synth_write_s16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_write_s16(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static int fluid_synth_write_s16(MemorySegment synth, int len, MemorySegment lout, int loff, int lincr, MemorySegment rout, int roff, int rincr) {
        var mh$ = fluid_synth_write_s16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_write_s16", synth, len, lout, loff, lincr, rout, roff, rincr);
            }
            return (int)mh$.invokeExact(synth, len, lout, loff, lincr, rout, roff, rincr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_write_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_write_float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_write_float(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static FunctionDescriptor fluid_synth_write_float$descriptor() {
        return fluid_synth_write_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_write_float(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static MethodHandle fluid_synth_write_float$handle() {
        return fluid_synth_write_float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_write_float(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static MemorySegment fluid_synth_write_float$address() {
        return fluid_synth_write_float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_write_float(fluid_synth_t *synth, int len, void *lout, int loff, int lincr, void *rout, int roff, int rincr)
     * }
     */
    public static int fluid_synth_write_float(MemorySegment synth, int len, MemorySegment lout, int loff, int lincr, MemorySegment rout, int roff, int rincr) {
        var mh$ = fluid_synth_write_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_write_float", synth, len, lout, loff, lincr, rout, roff, rincr);
            }
            return (int)mh$.invokeExact(synth, len, lout, loff, lincr, rout, roff, rincr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_nwrite_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_nwrite_float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_nwrite_float(fluid_synth_t *synth, int len, float **left, float **right, float **fx_left, float **fx_right)
     * }
     */
    public static FunctionDescriptor fluid_synth_nwrite_float$descriptor() {
        return fluid_synth_nwrite_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_nwrite_float(fluid_synth_t *synth, int len, float **left, float **right, float **fx_left, float **fx_right)
     * }
     */
    public static MethodHandle fluid_synth_nwrite_float$handle() {
        return fluid_synth_nwrite_float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_nwrite_float(fluid_synth_t *synth, int len, float **left, float **right, float **fx_left, float **fx_right)
     * }
     */
    public static MemorySegment fluid_synth_nwrite_float$address() {
        return fluid_synth_nwrite_float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_nwrite_float(fluid_synth_t *synth, int len, float **left, float **right, float **fx_left, float **fx_right)
     * }
     */
    public static int fluid_synth_nwrite_float(MemorySegment synth, int len, MemorySegment left, MemorySegment right, MemorySegment fx_left, MemorySegment fx_right) {
        var mh$ = fluid_synth_nwrite_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_nwrite_float", synth, len, left, right, fx_left, fx_right);
            }
            return (int)mh$.invokeExact(synth, len, left, right, fx_left, fx_right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_process {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_process");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_process(fluid_synth_t *synth, int len, int nfx, float *fx[], int nout, float *out[])
     * }
     */
    public static FunctionDescriptor fluid_synth_process$descriptor() {
        return fluid_synth_process.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_process(fluid_synth_t *synth, int len, int nfx, float *fx[], int nout, float *out[])
     * }
     */
    public static MethodHandle fluid_synth_process$handle() {
        return fluid_synth_process.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_process(fluid_synth_t *synth, int len, int nfx, float *fx[], int nout, float *out[])
     * }
     */
    public static MemorySegment fluid_synth_process$address() {
        return fluid_synth_process.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_process(fluid_synth_t *synth, int len, int nfx, float *fx[], int nout, float *out[])
     * }
     */
    public static int fluid_synth_process(MemorySegment synth, int len, int nfx, MemorySegment fx, int nout, MemorySegment out) {
        var mh$ = fluid_synth_process.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_process", synth, len, nfx, fx, nout, out);
            }
            return (int)mh$.invokeExact(synth, len, nfx, fx, nout, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_IIR_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_type.FLUID_IIR_DISABLED = 0
     * }
     */
    public static int FLUID_IIR_DISABLED() {
        return FLUID_IIR_DISABLED;
    }
    private static final int FLUID_IIR_LOWPASS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_type.FLUID_IIR_LOWPASS = 1
     * }
     */
    public static int FLUID_IIR_LOWPASS() {
        return FLUID_IIR_LOWPASS;
    }
    private static final int FLUID_IIR_HIGHPASS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_type.FLUID_IIR_HIGHPASS = 2
     * }
     */
    public static int FLUID_IIR_HIGHPASS() {
        return FLUID_IIR_HIGHPASS;
    }
    private static final int FLUID_IIR_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_type.FLUID_IIR_LAST = 3
     * }
     */
    public static int FLUID_IIR_LAST() {
        return FLUID_IIR_LAST;
    }
    private static final int FLUID_IIR_Q_LINEAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_flags.FLUID_IIR_Q_LINEAR = 1
     * }
     */
    public static int FLUID_IIR_Q_LINEAR() {
        return FLUID_IIR_Q_LINEAR;
    }
    private static final int FLUID_IIR_Q_ZERO_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_flags.FLUID_IIR_Q_ZERO_OFF = 2
     * }
     */
    public static int FLUID_IIR_Q_ZERO_OFF() {
        return FLUID_IIR_Q_ZERO_OFF;
    }
    private static final int FLUID_IIR_NO_GAIN_AMP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_iir_filter_flags.FLUID_IIR_NO_GAIN_AMP = 4
     * }
     */
    public static int FLUID_IIR_NO_GAIN_AMP() {
        return FLUID_IIR_NO_GAIN_AMP;
    }

    private static class fluid_synth_set_custom_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_custom_filter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_custom_filter(fluid_synth_t *, int type, int flags)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_custom_filter$descriptor() {
        return fluid_synth_set_custom_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_custom_filter(fluid_synth_t *, int type, int flags)
     * }
     */
    public static MethodHandle fluid_synth_set_custom_filter$handle() {
        return fluid_synth_set_custom_filter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_custom_filter(fluid_synth_t *, int type, int flags)
     * }
     */
    public static MemorySegment fluid_synth_set_custom_filter$address() {
        return fluid_synth_set_custom_filter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_custom_filter(fluid_synth_t *, int type, int flags)
     * }
     */
    public static int fluid_synth_set_custom_filter(MemorySegment x0, int type, int flags) {
        var mh$ = fluid_synth_set_custom_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_custom_filter", x0, type, flags);
            }
            return (int)mh$.invokeExact(x0, type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CHANNEL_TYPE_MELODIC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_midi_channel_type.CHANNEL_TYPE_MELODIC = 0
     * }
     */
    public static int CHANNEL_TYPE_MELODIC() {
        return CHANNEL_TYPE_MELODIC;
    }
    private static final int CHANNEL_TYPE_DRUM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_midi_channel_type.CHANNEL_TYPE_DRUM = 1
     * }
     */
    public static int CHANNEL_TYPE_DRUM() {
        return CHANNEL_TYPE_DRUM;
    }

    private static class fluid_synth_set_channel_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_channel_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_channel_type(fluid_synth_t *synth, int chan, int type)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_channel_type$descriptor() {
        return fluid_synth_set_channel_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_channel_type(fluid_synth_t *synth, int chan, int type)
     * }
     */
    public static MethodHandle fluid_synth_set_channel_type$handle() {
        return fluid_synth_set_channel_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_channel_type(fluid_synth_t *synth, int chan, int type)
     * }
     */
    public static MemorySegment fluid_synth_set_channel_type$address() {
        return fluid_synth_set_channel_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_channel_type(fluid_synth_t *synth, int chan, int type)
     * }
     */
    public static int fluid_synth_set_channel_type(MemorySegment synth, int chan, int type) {
        var mh$ = fluid_synth_set_channel_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_channel_type", synth, chan, type);
            }
            return (int)mh$.invokeExact(synth, chan, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_CHANNEL_POLY_OFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_mode_flags.FLUID_CHANNEL_POLY_OFF = 1
     * }
     */
    public static int FLUID_CHANNEL_POLY_OFF() {
        return FLUID_CHANNEL_POLY_OFF;
    }
    private static final int FLUID_CHANNEL_OMNI_OFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_mode_flags.FLUID_CHANNEL_OMNI_OFF = 2
     * }
     */
    public static int FLUID_CHANNEL_OMNI_OFF() {
        return FLUID_CHANNEL_OMNI_OFF;
    }
    private static final int FLUID_CHANNEL_MODE_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_MASK = 3
     * }
     */
    public static int FLUID_CHANNEL_MODE_MASK() {
        return FLUID_CHANNEL_MODE_MASK;
    }
    private static final int FLUID_CHANNEL_MODE_OMNION_POLY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_OMNION_POLY = 0
     * }
     */
    public static int FLUID_CHANNEL_MODE_OMNION_POLY() {
        return FLUID_CHANNEL_MODE_OMNION_POLY;
    }
    private static final int FLUID_CHANNEL_MODE_OMNION_MONO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_OMNION_MONO = 1
     * }
     */
    public static int FLUID_CHANNEL_MODE_OMNION_MONO() {
        return FLUID_CHANNEL_MODE_OMNION_MONO;
    }
    private static final int FLUID_CHANNEL_MODE_OMNIOFF_POLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_OMNIOFF_POLY = 2
     * }
     */
    public static int FLUID_CHANNEL_MODE_OMNIOFF_POLY() {
        return FLUID_CHANNEL_MODE_OMNIOFF_POLY;
    }
    private static final int FLUID_CHANNEL_MODE_OMNIOFF_MONO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_OMNIOFF_MONO = 3
     * }
     */
    public static int FLUID_CHANNEL_MODE_OMNIOFF_MONO() {
        return FLUID_CHANNEL_MODE_OMNIOFF_MONO;
    }
    private static final int FLUID_CHANNEL_MODE_LAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_basic_channel_modes.FLUID_CHANNEL_MODE_LAST = 4
     * }
     */
    public static int FLUID_CHANNEL_MODE_LAST() {
        return FLUID_CHANNEL_MODE_LAST;
    }

    private static class fluid_synth_reset_basic_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_reset_basic_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_reset_basic_channel(fluid_synth_t *synth, int chan)
     * }
     */
    public static FunctionDescriptor fluid_synth_reset_basic_channel$descriptor() {
        return fluid_synth_reset_basic_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_reset_basic_channel(fluid_synth_t *synth, int chan)
     * }
     */
    public static MethodHandle fluid_synth_reset_basic_channel$handle() {
        return fluid_synth_reset_basic_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_reset_basic_channel(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_reset_basic_channel$address() {
        return fluid_synth_reset_basic_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_reset_basic_channel(fluid_synth_t *synth, int chan)
     * }
     */
    public static int fluid_synth_reset_basic_channel(MemorySegment synth, int chan) {
        var mh$ = fluid_synth_reset_basic_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_reset_basic_channel", synth, chan);
            }
            return (int)mh$.invokeExact(synth, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_basic_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_basic_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_basic_channel(fluid_synth_t *synth, int chan, int *basic_chan_out, int *mode_chan_out, int *basic_val_out)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_basic_channel$descriptor() {
        return fluid_synth_get_basic_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_basic_channel(fluid_synth_t *synth, int chan, int *basic_chan_out, int *mode_chan_out, int *basic_val_out)
     * }
     */
    public static MethodHandle fluid_synth_get_basic_channel$handle() {
        return fluid_synth_get_basic_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_basic_channel(fluid_synth_t *synth, int chan, int *basic_chan_out, int *mode_chan_out, int *basic_val_out)
     * }
     */
    public static MemorySegment fluid_synth_get_basic_channel$address() {
        return fluid_synth_get_basic_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_basic_channel(fluid_synth_t *synth, int chan, int *basic_chan_out, int *mode_chan_out, int *basic_val_out)
     * }
     */
    public static int fluid_synth_get_basic_channel(MemorySegment synth, int chan, MemorySegment basic_chan_out, MemorySegment mode_chan_out, MemorySegment basic_val_out) {
        var mh$ = fluid_synth_get_basic_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_basic_channel", synth, chan, basic_chan_out, mode_chan_out, basic_val_out);
            }
            return (int)mh$.invokeExact(synth, chan, basic_chan_out, mode_chan_out, basic_val_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_set_basic_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_basic_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_basic_channel(fluid_synth_t *synth, int chan, int mode, int val)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_basic_channel$descriptor() {
        return fluid_synth_set_basic_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_basic_channel(fluid_synth_t *synth, int chan, int mode, int val)
     * }
     */
    public static MethodHandle fluid_synth_set_basic_channel$handle() {
        return fluid_synth_set_basic_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_basic_channel(fluid_synth_t *synth, int chan, int mode, int val)
     * }
     */
    public static MemorySegment fluid_synth_set_basic_channel$address() {
        return fluid_synth_set_basic_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_basic_channel(fluid_synth_t *synth, int chan, int mode, int val)
     * }
     */
    public static int fluid_synth_set_basic_channel(MemorySegment synth, int chan, int mode, int val) {
        var mh$ = fluid_synth_set_basic_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_basic_channel", synth, chan, mode, val);
            }
            return (int)mh$.invokeExact(synth, chan, mode, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_CHANNEL_LEGATO_MODE_RETRIGGER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_legato_mode.FLUID_CHANNEL_LEGATO_MODE_RETRIGGER = 0
     * }
     */
    public static int FLUID_CHANNEL_LEGATO_MODE_RETRIGGER() {
        return FLUID_CHANNEL_LEGATO_MODE_RETRIGGER;
    }
    private static final int FLUID_CHANNEL_LEGATO_MODE_MULTI_RETRIGGER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_legato_mode.FLUID_CHANNEL_LEGATO_MODE_MULTI_RETRIGGER = 1
     * }
     */
    public static int FLUID_CHANNEL_LEGATO_MODE_MULTI_RETRIGGER() {
        return FLUID_CHANNEL_LEGATO_MODE_MULTI_RETRIGGER;
    }
    private static final int FLUID_CHANNEL_LEGATO_MODE_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_legato_mode.FLUID_CHANNEL_LEGATO_MODE_LAST = 2
     * }
     */
    public static int FLUID_CHANNEL_LEGATO_MODE_LAST() {
        return FLUID_CHANNEL_LEGATO_MODE_LAST;
    }

    private static class fluid_synth_set_legato_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_legato_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_legato_mode(fluid_synth_t *synth, int chan, int legatomode)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_legato_mode$descriptor() {
        return fluid_synth_set_legato_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_legato_mode(fluid_synth_t *synth, int chan, int legatomode)
     * }
     */
    public static MethodHandle fluid_synth_set_legato_mode$handle() {
        return fluid_synth_set_legato_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_legato_mode(fluid_synth_t *synth, int chan, int legatomode)
     * }
     */
    public static MemorySegment fluid_synth_set_legato_mode$address() {
        return fluid_synth_set_legato_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_legato_mode(fluid_synth_t *synth, int chan, int legatomode)
     * }
     */
    public static int fluid_synth_set_legato_mode(MemorySegment synth, int chan, int legatomode) {
        var mh$ = fluid_synth_set_legato_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_legato_mode", synth, chan, legatomode);
            }
            return (int)mh$.invokeExact(synth, chan, legatomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_legato_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_legato_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_legato_mode(fluid_synth_t *synth, int chan, int *legatomode)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_legato_mode$descriptor() {
        return fluid_synth_get_legato_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_legato_mode(fluid_synth_t *synth, int chan, int *legatomode)
     * }
     */
    public static MethodHandle fluid_synth_get_legato_mode$handle() {
        return fluid_synth_get_legato_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_legato_mode(fluid_synth_t *synth, int chan, int *legatomode)
     * }
     */
    public static MemorySegment fluid_synth_get_legato_mode$address() {
        return fluid_synth_get_legato_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_legato_mode(fluid_synth_t *synth, int chan, int *legatomode)
     * }
     */
    public static int fluid_synth_get_legato_mode(MemorySegment synth, int chan, MemorySegment legatomode) {
        var mh$ = fluid_synth_get_legato_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_legato_mode", synth, chan, legatomode);
            }
            return (int)mh$.invokeExact(synth, chan, legatomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_CHANNEL_PORTAMENTO_MODE_EACH_NOTE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_portamento_mode.FLUID_CHANNEL_PORTAMENTO_MODE_EACH_NOTE = 0
     * }
     */
    public static int FLUID_CHANNEL_PORTAMENTO_MODE_EACH_NOTE() {
        return FLUID_CHANNEL_PORTAMENTO_MODE_EACH_NOTE;
    }
    private static final int FLUID_CHANNEL_PORTAMENTO_MODE_LEGATO_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_portamento_mode.FLUID_CHANNEL_PORTAMENTO_MODE_LEGATO_ONLY = 1
     * }
     */
    public static int FLUID_CHANNEL_PORTAMENTO_MODE_LEGATO_ONLY() {
        return FLUID_CHANNEL_PORTAMENTO_MODE_LEGATO_ONLY;
    }
    private static final int FLUID_CHANNEL_PORTAMENTO_MODE_STACCATO_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_portamento_mode.FLUID_CHANNEL_PORTAMENTO_MODE_STACCATO_ONLY = 2
     * }
     */
    public static int FLUID_CHANNEL_PORTAMENTO_MODE_STACCATO_ONLY() {
        return FLUID_CHANNEL_PORTAMENTO_MODE_STACCATO_ONLY;
    }
    private static final int FLUID_CHANNEL_PORTAMENTO_MODE_LAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_portamento_mode.FLUID_CHANNEL_PORTAMENTO_MODE_LAST = 3
     * }
     */
    public static int FLUID_CHANNEL_PORTAMENTO_MODE_LAST() {
        return FLUID_CHANNEL_PORTAMENTO_MODE_LAST;
    }

    private static class fluid_synth_set_portamento_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_portamento_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_portamento_mode(fluid_synth_t *synth, int chan, int portamentomode)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_portamento_mode$descriptor() {
        return fluid_synth_set_portamento_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_portamento_mode(fluid_synth_t *synth, int chan, int portamentomode)
     * }
     */
    public static MethodHandle fluid_synth_set_portamento_mode$handle() {
        return fluid_synth_set_portamento_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_portamento_mode(fluid_synth_t *synth, int chan, int portamentomode)
     * }
     */
    public static MemorySegment fluid_synth_set_portamento_mode$address() {
        return fluid_synth_set_portamento_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_portamento_mode(fluid_synth_t *synth, int chan, int portamentomode)
     * }
     */
    public static int fluid_synth_set_portamento_mode(MemorySegment synth, int chan, int portamentomode) {
        var mh$ = fluid_synth_set_portamento_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_portamento_mode", synth, chan, portamentomode);
            }
            return (int)mh$.invokeExact(synth, chan, portamentomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_portamento_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_portamento_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_portamento_mode(fluid_synth_t *synth, int chan, int *portamentomode)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_portamento_mode$descriptor() {
        return fluid_synth_get_portamento_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_portamento_mode(fluid_synth_t *synth, int chan, int *portamentomode)
     * }
     */
    public static MethodHandle fluid_synth_get_portamento_mode$handle() {
        return fluid_synth_get_portamento_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_portamento_mode(fluid_synth_t *synth, int chan, int *portamentomode)
     * }
     */
    public static MemorySegment fluid_synth_get_portamento_mode$address() {
        return fluid_synth_get_portamento_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_portamento_mode(fluid_synth_t *synth, int chan, int *portamentomode)
     * }
     */
    public static int fluid_synth_get_portamento_mode(MemorySegment synth, int chan, MemorySegment portamentomode) {
        var mh$ = fluid_synth_get_portamento_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_portamento_mode", synth, chan, portamentomode);
            }
            return (int)mh$.invokeExact(synth, chan, portamentomode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_CHANNEL_BREATH_POLY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_breath_flags.FLUID_CHANNEL_BREATH_POLY = 16
     * }
     */
    public static int FLUID_CHANNEL_BREATH_POLY() {
        return FLUID_CHANNEL_BREATH_POLY;
    }
    private static final int FLUID_CHANNEL_BREATH_MONO = (int)32L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_breath_flags.FLUID_CHANNEL_BREATH_MONO = 32
     * }
     */
    public static int FLUID_CHANNEL_BREATH_MONO() {
        return FLUID_CHANNEL_BREATH_MONO;
    }
    private static final int FLUID_CHANNEL_BREATH_SYNC = (int)64L;
    /**
     * {@snippet lang=c :
     * enum fluid_channel_breath_flags.FLUID_CHANNEL_BREATH_SYNC = 64
     * }
     */
    public static int FLUID_CHANNEL_BREATH_SYNC() {
        return FLUID_CHANNEL_BREATH_SYNC;
    }

    private static class fluid_synth_set_breath_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_set_breath_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_set_breath_mode(fluid_synth_t *synth, int chan, int breathmode)
     * }
     */
    public static FunctionDescriptor fluid_synth_set_breath_mode$descriptor() {
        return fluid_synth_set_breath_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_set_breath_mode(fluid_synth_t *synth, int chan, int breathmode)
     * }
     */
    public static MethodHandle fluid_synth_set_breath_mode$handle() {
        return fluid_synth_set_breath_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_set_breath_mode(fluid_synth_t *synth, int chan, int breathmode)
     * }
     */
    public static MemorySegment fluid_synth_set_breath_mode$address() {
        return fluid_synth_set_breath_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_set_breath_mode(fluid_synth_t *synth, int chan, int breathmode)
     * }
     */
    public static int fluid_synth_set_breath_mode(MemorySegment synth, int chan, int breathmode) {
        var mh$ = fluid_synth_set_breath_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_set_breath_mode", synth, chan, breathmode);
            }
            return (int)mh$.invokeExact(synth, chan, breathmode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_breath_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_breath_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_get_breath_mode(fluid_synth_t *synth, int chan, int *breathmode)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_breath_mode$descriptor() {
        return fluid_synth_get_breath_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_get_breath_mode(fluid_synth_t *synth, int chan, int *breathmode)
     * }
     */
    public static MethodHandle fluid_synth_get_breath_mode$handle() {
        return fluid_synth_get_breath_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_get_breath_mode(fluid_synth_t *synth, int chan, int *breathmode)
     * }
     */
    public static MemorySegment fluid_synth_get_breath_mode$address() {
        return fluid_synth_get_breath_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_get_breath_mode(fluid_synth_t *synth, int chan, int *breathmode)
     * }
     */
    public static int fluid_synth_get_breath_mode(MemorySegment synth, int chan, MemorySegment breathmode) {
        var mh$ = fluid_synth_get_breath_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_breath_mode", synth, chan, breathmode);
            }
            return (int)mh$.invokeExact(synth, chan, breathmode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_settings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_settings_t *fluid_synth_get_settings(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_settings$descriptor() {
        return fluid_synth_get_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_settings_t *fluid_synth_get_settings(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_settings$handle() {
        return fluid_synth_get_settings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_settings_t *fluid_synth_get_settings(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_settings$address() {
        return fluid_synth_get_settings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_settings_t *fluid_synth_get_settings(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_settings(MemorySegment synth) {
        var mh$ = fluid_synth_get_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_settings", synth);
            }
            return (MemorySegment)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_add_sfloader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_add_sfloader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_synth_add_sfloader(fluid_synth_t *synth, fluid_sfloader_t *loader)
     * }
     */
    public static FunctionDescriptor fluid_synth_add_sfloader$descriptor() {
        return fluid_synth_add_sfloader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_synth_add_sfloader(fluid_synth_t *synth, fluid_sfloader_t *loader)
     * }
     */
    public static MethodHandle fluid_synth_add_sfloader$handle() {
        return fluid_synth_add_sfloader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_synth_add_sfloader(fluid_synth_t *synth, fluid_sfloader_t *loader)
     * }
     */
    public static MemorySegment fluid_synth_add_sfloader$address() {
        return fluid_synth_add_sfloader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_synth_add_sfloader(fluid_synth_t *synth, fluid_sfloader_t *loader)
     * }
     */
    public static void fluid_synth_add_sfloader(MemorySegment synth, MemorySegment loader) {
        var mh$ = fluid_synth_add_sfloader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_add_sfloader", synth, loader);
            }
            mh$.invokeExact(synth, loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_channel_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_channel_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_synth_get_channel_preset(fluid_synth_t *synth, int chan)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_channel_preset$descriptor() {
        return fluid_synth_get_channel_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_synth_get_channel_preset(fluid_synth_t *synth, int chan)
     * }
     */
    public static MethodHandle fluid_synth_get_channel_preset$handle() {
        return fluid_synth_get_channel_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_synth_get_channel_preset(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_get_channel_preset$address() {
        return fluid_synth_get_channel_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_preset_t *fluid_synth_get_channel_preset(fluid_synth_t *synth, int chan)
     * }
     */
    public static MemorySegment fluid_synth_get_channel_preset(MemorySegment synth, int chan) {
        var mh$ = fluid_synth_get_channel_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_channel_preset", synth, chan);
            }
            return (MemorySegment)mh$.invokeExact(synth, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_handle_midi_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_handle_midi_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor fluid_synth_handle_midi_event$descriptor() {
        return fluid_synth_handle_midi_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle fluid_synth_handle_midi_event$handle() {
        return fluid_synth_handle_midi_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment fluid_synth_handle_midi_event$address() {
        return fluid_synth_handle_midi_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static int fluid_synth_handle_midi_event(MemorySegment data, MemorySegment event) {
        var mh$ = fluid_synth_handle_midi_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_handle_midi_event", data, event);
            }
            return (int)mh$.invokeExact(data, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_pin_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_pin_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_pin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static FunctionDescriptor fluid_synth_pin_preset$descriptor() {
        return fluid_synth_pin_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_pin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MethodHandle fluid_synth_pin_preset$handle() {
        return fluid_synth_pin_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_pin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MemorySegment fluid_synth_pin_preset$address() {
        return fluid_synth_pin_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_pin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static int fluid_synth_pin_preset(MemorySegment synth, int sfont_id, int bank_num, int preset_num) {
        var mh$ = fluid_synth_pin_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_pin_preset", synth, sfont_id, bank_num, preset_num);
            }
            return (int)mh$.invokeExact(synth, sfont_id, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_unpin_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_unpin_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_synth_unpin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static FunctionDescriptor fluid_synth_unpin_preset$descriptor() {
        return fluid_synth_unpin_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_synth_unpin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MethodHandle fluid_synth_unpin_preset$handle() {
        return fluid_synth_unpin_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_synth_unpin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static MemorySegment fluid_synth_unpin_preset$address() {
        return fluid_synth_unpin_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_synth_unpin_preset(fluid_synth_t *synth, int sfont_id, int bank_num, int preset_num)
     * }
     */
    public static int fluid_synth_unpin_preset(MemorySegment synth, int sfont_id, int bank_num, int preset_num) {
        var mh$ = fluid_synth_unpin_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_unpin_preset", synth, sfont_id, bank_num, preset_num);
            }
            return (int)mh$.invokeExact(synth, sfont_id, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_synth_get_ladspa_fx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_synth_get_ladspa_fx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_ladspa_fx_t *fluid_synth_get_ladspa_fx(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_synth_get_ladspa_fx$descriptor() {
        return fluid_synth_get_ladspa_fx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_ladspa_fx_t *fluid_synth_get_ladspa_fx(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_synth_get_ladspa_fx$handle() {
        return fluid_synth_get_ladspa_fx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_ladspa_fx_t *fluid_synth_get_ladspa_fx(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_ladspa_fx$address() {
        return fluid_synth_get_ladspa_fx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_ladspa_fx_t *fluid_synth_get_ladspa_fx(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_synth_get_ladspa_fx(MemorySegment synth) {
        var mh$ = fluid_synth_get_ladspa_fx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_synth_get_ladspa_fx", synth);
            }
            return (MemorySegment)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_get_stdin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_get_stdin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_istream_t fluid_get_stdin()
     * }
     */
    public static FunctionDescriptor fluid_get_stdin$descriptor() {
        return fluid_get_stdin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_istream_t fluid_get_stdin()
     * }
     */
    public static MethodHandle fluid_get_stdin$handle() {
        return fluid_get_stdin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_istream_t fluid_get_stdin()
     * }
     */
    public static MemorySegment fluid_get_stdin$address() {
        return fluid_get_stdin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_istream_t fluid_get_stdin()
     * }
     */
    public static int fluid_get_stdin() {
        var mh$ = fluid_get_stdin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_get_stdin");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_get_stdout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_get_stdout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_ostream_t fluid_get_stdout()
     * }
     */
    public static FunctionDescriptor fluid_get_stdout$descriptor() {
        return fluid_get_stdout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_ostream_t fluid_get_stdout()
     * }
     */
    public static MethodHandle fluid_get_stdout$handle() {
        return fluid_get_stdout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_ostream_t fluid_get_stdout()
     * }
     */
    public static MemorySegment fluid_get_stdout$address() {
        return fluid_get_stdout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_ostream_t fluid_get_stdout()
     * }
     */
    public static int fluid_get_stdout() {
        var mh$ = fluid_get_stdout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_get_stdout");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_get_userconf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_get_userconf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fluid_get_userconf(char *buf, int len)
     * }
     */
    public static FunctionDescriptor fluid_get_userconf$descriptor() {
        return fluid_get_userconf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fluid_get_userconf(char *buf, int len)
     * }
     */
    public static MethodHandle fluid_get_userconf$handle() {
        return fluid_get_userconf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fluid_get_userconf(char *buf, int len)
     * }
     */
    public static MemorySegment fluid_get_userconf$address() {
        return fluid_get_userconf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fluid_get_userconf(char *buf, int len)
     * }
     */
    public static MemorySegment fluid_get_userconf(MemorySegment buf, int len) {
        var mh$ = fluid_get_userconf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_get_userconf", buf, len);
            }
            return (MemorySegment)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_get_sysconf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_get_sysconf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fluid_get_sysconf(char *buf, int len)
     * }
     */
    public static FunctionDescriptor fluid_get_sysconf$descriptor() {
        return fluid_get_sysconf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fluid_get_sysconf(char *buf, int len)
     * }
     */
    public static MethodHandle fluid_get_sysconf$handle() {
        return fluid_get_sysconf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fluid_get_sysconf(char *buf, int len)
     * }
     */
    public static MemorySegment fluid_get_sysconf$address() {
        return fluid_get_sysconf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fluid_get_sysconf(char *buf, int len)
     * }
     */
    public static MemorySegment fluid_get_sysconf(MemorySegment buf, int len) {
        var mh$ = fluid_get_sysconf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_get_sysconf", buf, len);
            }
            return (MemorySegment)mh$.invokeExact(buf, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_cmd_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_cmd_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler(fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static FunctionDescriptor new_fluid_cmd_handler$descriptor() {
        return new_fluid_cmd_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler(fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MethodHandle new_fluid_cmd_handler$handle() {
        return new_fluid_cmd_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler(fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment new_fluid_cmd_handler$address() {
        return new_fluid_cmd_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler(fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment new_fluid_cmd_handler(MemorySegment synth, MemorySegment router) {
        var mh$ = new_fluid_cmd_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_cmd_handler", synth, router);
            }
            return (MemorySegment)mh$.invokeExact(synth, router);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_cmd_handler2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_cmd_handler2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor new_fluid_cmd_handler2$descriptor() {
        return new_fluid_cmd_handler2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MethodHandle new_fluid_cmd_handler2$handle() {
        return new_fluid_cmd_handler2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MemorySegment new_fluid_cmd_handler2$address() {
        return new_fluid_cmd_handler2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_cmd_handler_t *new_fluid_cmd_handler2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MemorySegment new_fluid_cmd_handler2(MemorySegment settings, MemorySegment synth, MemorySegment router, MemorySegment player) {
        var mh$ = new_fluid_cmd_handler2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_cmd_handler2", settings, synth, router, player);
            }
            return (MemorySegment)mh$.invokeExact(settings, synth, router, player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_cmd_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_cmd_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_cmd_handler(fluid_cmd_handler_t *handler)
     * }
     */
    public static FunctionDescriptor delete_fluid_cmd_handler$descriptor() {
        return delete_fluid_cmd_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_cmd_handler(fluid_cmd_handler_t *handler)
     * }
     */
    public static MethodHandle delete_fluid_cmd_handler$handle() {
        return delete_fluid_cmd_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_cmd_handler(fluid_cmd_handler_t *handler)
     * }
     */
    public static MemorySegment delete_fluid_cmd_handler$address() {
        return delete_fluid_cmd_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_cmd_handler(fluid_cmd_handler_t *handler)
     * }
     */
    public static void delete_fluid_cmd_handler(MemorySegment handler) {
        var mh$ = delete_fluid_cmd_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_cmd_handler", handler);
            }
            mh$.invokeExact(handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_cmd_handler_set_synth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_cmd_handler_set_synth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_cmd_handler_set_synth(fluid_cmd_handler_t *handler, fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_cmd_handler_set_synth$descriptor() {
        return fluid_cmd_handler_set_synth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_cmd_handler_set_synth(fluid_cmd_handler_t *handler, fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_cmd_handler_set_synth$handle() {
        return fluid_cmd_handler_set_synth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_cmd_handler_set_synth(fluid_cmd_handler_t *handler, fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_cmd_handler_set_synth$address() {
        return fluid_cmd_handler_set_synth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_cmd_handler_set_synth(fluid_cmd_handler_t *handler, fluid_synth_t *synth)
     * }
     */
    public static void fluid_cmd_handler_set_synth(MemorySegment handler, MemorySegment synth) {
        var mh$ = fluid_cmd_handler_set_synth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_cmd_handler_set_synth", handler, synth);
            }
            mh$.invokeExact(handler, synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_command {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_command");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_command(fluid_cmd_handler_t *handler, const char *cmd, fluid_ostream_t out)
     * }
     */
    public static FunctionDescriptor fluid_command$descriptor() {
        return fluid_command.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_command(fluid_cmd_handler_t *handler, const char *cmd, fluid_ostream_t out)
     * }
     */
    public static MethodHandle fluid_command$handle() {
        return fluid_command.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_command(fluid_cmd_handler_t *handler, const char *cmd, fluid_ostream_t out)
     * }
     */
    public static MemorySegment fluid_command$address() {
        return fluid_command.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_command(fluid_cmd_handler_t *handler, const char *cmd, fluid_ostream_t out)
     * }
     */
    public static int fluid_command(MemorySegment handler, MemorySegment cmd, int out) {
        var mh$ = fluid_command.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_command", handler, cmd, out);
            }
            return (int)mh$.invokeExact(handler, cmd, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_source(fluid_cmd_handler_t *handler, const char *filename)
     * }
     */
    public static FunctionDescriptor fluid_source$descriptor() {
        return fluid_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_source(fluid_cmd_handler_t *handler, const char *filename)
     * }
     */
    public static MethodHandle fluid_source$handle() {
        return fluid_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_source(fluid_cmd_handler_t *handler, const char *filename)
     * }
     */
    public static MemorySegment fluid_source$address() {
        return fluid_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_source(fluid_cmd_handler_t *handler, const char *filename)
     * }
     */
    public static int fluid_source(MemorySegment handler, MemorySegment filename) {
        var mh$ = fluid_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_source", handler, filename);
            }
            return (int)mh$.invokeExact(handler, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_shell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_shell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_shell_t *new_fluid_shell(fluid_settings_t *settings, fluid_cmd_handler_t *handler, fluid_istream_t in, fluid_ostream_t out, int thread)
     * }
     */
    public static FunctionDescriptor new_fluid_shell$descriptor() {
        return new_fluid_shell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_shell_t *new_fluid_shell(fluid_settings_t *settings, fluid_cmd_handler_t *handler, fluid_istream_t in, fluid_ostream_t out, int thread)
     * }
     */
    public static MethodHandle new_fluid_shell$handle() {
        return new_fluid_shell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_shell_t *new_fluid_shell(fluid_settings_t *settings, fluid_cmd_handler_t *handler, fluid_istream_t in, fluid_ostream_t out, int thread)
     * }
     */
    public static MemorySegment new_fluid_shell$address() {
        return new_fluid_shell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_shell_t *new_fluid_shell(fluid_settings_t *settings, fluid_cmd_handler_t *handler, fluid_istream_t in, fluid_ostream_t out, int thread)
     * }
     */
    public static MemorySegment new_fluid_shell(MemorySegment settings, MemorySegment handler, int in, int out, int thread) {
        var mh$ = new_fluid_shell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_shell", settings, handler, in, out, thread);
            }
            return (MemorySegment)mh$.invokeExact(settings, handler, in, out, thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_usershell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_usershell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_usershell(fluid_settings_t *settings, fluid_cmd_handler_t *handler)
     * }
     */
    public static FunctionDescriptor fluid_usershell$descriptor() {
        return fluid_usershell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_usershell(fluid_settings_t *settings, fluid_cmd_handler_t *handler)
     * }
     */
    public static MethodHandle fluid_usershell$handle() {
        return fluid_usershell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_usershell(fluid_settings_t *settings, fluid_cmd_handler_t *handler)
     * }
     */
    public static MemorySegment fluid_usershell$address() {
        return fluid_usershell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_usershell(fluid_settings_t *settings, fluid_cmd_handler_t *handler)
     * }
     */
    public static void fluid_usershell(MemorySegment settings, MemorySegment handler) {
        var mh$ = fluid_usershell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_usershell", settings, handler);
            }
            mh$.invokeExact(settings, handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_shell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_shell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_shell(fluid_shell_t *shell)
     * }
     */
    public static FunctionDescriptor delete_fluid_shell$descriptor() {
        return delete_fluid_shell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_shell(fluid_shell_t *shell)
     * }
     */
    public static MethodHandle delete_fluid_shell$handle() {
        return delete_fluid_shell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_shell(fluid_shell_t *shell)
     * }
     */
    public static MemorySegment delete_fluid_shell$address() {
        return delete_fluid_shell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_shell(fluid_shell_t *shell)
     * }
     */
    public static void delete_fluid_shell(MemorySegment shell) {
        var mh$ = delete_fluid_shell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_shell", shell);
            }
            mh$.invokeExact(shell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_server");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static FunctionDescriptor new_fluid_server$descriptor() {
        return new_fluid_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MethodHandle new_fluid_server$handle() {
        return new_fluid_server.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment new_fluid_server$address() {
        return new_fluid_server.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment new_fluid_server(MemorySegment settings, MemorySegment synth, MemorySegment router) {
        var mh$ = new_fluid_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_server", settings, synth, router);
            }
            return (MemorySegment)mh$.invokeExact(settings, synth, router);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_server2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_server2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor new_fluid_server2$descriptor() {
        return new_fluid_server2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MethodHandle new_fluid_server2$handle() {
        return new_fluid_server2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MemorySegment new_fluid_server2$address() {
        return new_fluid_server2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_server_t *new_fluid_server2(fluid_settings_t *settings, fluid_synth_t *synth, fluid_midi_router_t *router, fluid_player_t *player)
     * }
     */
    public static MemorySegment new_fluid_server2(MemorySegment settings, MemorySegment synth, MemorySegment router, MemorySegment player) {
        var mh$ = new_fluid_server2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_server2", settings, synth, router, player);
            }
            return (MemorySegment)mh$.invokeExact(settings, synth, router, player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_server {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_server");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_server(fluid_server_t *server)
     * }
     */
    public static FunctionDescriptor delete_fluid_server$descriptor() {
        return delete_fluid_server.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_server(fluid_server_t *server)
     * }
     */
    public static MethodHandle delete_fluid_server$handle() {
        return delete_fluid_server.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_server(fluid_server_t *server)
     * }
     */
    public static MemorySegment delete_fluid_server$address() {
        return delete_fluid_server.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_server(fluid_server_t *server)
     * }
     */
    public static void delete_fluid_server(MemorySegment server) {
        var mh$ = delete_fluid_server.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_server", server);
            }
            mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_server_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_server_join");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_server_join(fluid_server_t *server)
     * }
     */
    public static FunctionDescriptor fluid_server_join$descriptor() {
        return fluid_server_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_server_join(fluid_server_t *server)
     * }
     */
    public static MethodHandle fluid_server_join$handle() {
        return fluid_server_join.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_server_join(fluid_server_t *server)
     * }
     */
    public static MemorySegment fluid_server_join$address() {
        return fluid_server_join.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_server_join(fluid_server_t *server)
     * }
     */
    public static int fluid_server_join(MemorySegment server) {
        var mh$ = fluid_server_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_server_join", server);
            }
            return (int)mh$.invokeExact(server);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_PRESET_SELECTED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_PRESET_SELECTED = 0
     * }
     */
    public static int FLUID_PRESET_SELECTED() {
        return FLUID_PRESET_SELECTED;
    }
    private static final int FLUID_PRESET_UNSELECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_PRESET_UNSELECTED = 1
     * }
     */
    public static int FLUID_PRESET_UNSELECTED() {
        return FLUID_PRESET_UNSELECTED;
    }
    private static final int FLUID_SAMPLE_DONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_SAMPLE_DONE = 2
     * }
     */
    public static int FLUID_SAMPLE_DONE() {
        return FLUID_SAMPLE_DONE;
    }
    private static final int FLUID_PRESET_PIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_PRESET_PIN = 3
     * }
     */
    public static int FLUID_PRESET_PIN() {
        return FLUID_PRESET_PIN;
    }
    private static final int FLUID_PRESET_UNPIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_PRESET_UNPIN = 4
     * }
     */
    public static int FLUID_PRESET_UNPIN() {
        return FLUID_PRESET_UNPIN;
    }
    private static final int FLUID_SAMPLETYPE_MONO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_MONO = 1
     * }
     */
    public static int FLUID_SAMPLETYPE_MONO() {
        return FLUID_SAMPLETYPE_MONO;
    }
    private static final int FLUID_SAMPLETYPE_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_RIGHT = 2
     * }
     */
    public static int FLUID_SAMPLETYPE_RIGHT() {
        return FLUID_SAMPLETYPE_RIGHT;
    }
    private static final int FLUID_SAMPLETYPE_LEFT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_LEFT = 4
     * }
     */
    public static int FLUID_SAMPLETYPE_LEFT() {
        return FLUID_SAMPLETYPE_LEFT;
    }
    private static final int FLUID_SAMPLETYPE_LINKED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_LINKED = 8
     * }
     */
    public static int FLUID_SAMPLETYPE_LINKED() {
        return FLUID_SAMPLETYPE_LINKED;
    }
    private static final int FLUID_SAMPLETYPE_OGG_VORBIS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_OGG_VORBIS = 16
     * }
     */
    public static int FLUID_SAMPLETYPE_OGG_VORBIS() {
        return FLUID_SAMPLETYPE_OGG_VORBIS;
    }
    private static final int FLUID_SAMPLETYPE_ROM = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum fluid_sample_type.FLUID_SAMPLETYPE_ROM = 32768
     * }
     */
    public static int FLUID_SAMPLETYPE_ROM() {
        return FLUID_SAMPLETYPE_ROM;
    }

    private static class new_fluid_sfloader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_sfloader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_sfloader(fluid_sfloader_load_t load, fluid_sfloader_free_t free)
     * }
     */
    public static FunctionDescriptor new_fluid_sfloader$descriptor() {
        return new_fluid_sfloader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_sfloader(fluid_sfloader_load_t load, fluid_sfloader_free_t free)
     * }
     */
    public static MethodHandle new_fluid_sfloader$handle() {
        return new_fluid_sfloader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_sfloader(fluid_sfloader_load_t load, fluid_sfloader_free_t free)
     * }
     */
    public static MemorySegment new_fluid_sfloader$address() {
        return new_fluid_sfloader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_sfloader(fluid_sfloader_load_t load, fluid_sfloader_free_t free)
     * }
     */
    public static MemorySegment new_fluid_sfloader(MemorySegment load, MemorySegment free) {
        var mh$ = new_fluid_sfloader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_sfloader", load, free);
            }
            return (MemorySegment)mh$.invokeExact(load, free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_sfloader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_sfloader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_sfloader(fluid_sfloader_t *loader)
     * }
     */
    public static FunctionDescriptor delete_fluid_sfloader$descriptor() {
        return delete_fluid_sfloader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_sfloader(fluid_sfloader_t *loader)
     * }
     */
    public static MethodHandle delete_fluid_sfloader$handle() {
        return delete_fluid_sfloader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_sfloader(fluid_sfloader_t *loader)
     * }
     */
    public static MemorySegment delete_fluid_sfloader$address() {
        return delete_fluid_sfloader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_sfloader(fluid_sfloader_t *loader)
     * }
     */
    public static void delete_fluid_sfloader(MemorySegment loader) {
        var mh$ = delete_fluid_sfloader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_sfloader", loader);
            }
            mh$.invokeExact(loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_defsfloader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_defsfloader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_defsfloader(fluid_settings_t *settings)
     * }
     */
    public static FunctionDescriptor new_fluid_defsfloader$descriptor() {
        return new_fluid_defsfloader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_defsfloader(fluid_settings_t *settings)
     * }
     */
    public static MethodHandle new_fluid_defsfloader$handle() {
        return new_fluid_defsfloader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_defsfloader(fluid_settings_t *settings)
     * }
     */
    public static MemorySegment new_fluid_defsfloader$address() {
        return new_fluid_defsfloader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfloader_t *new_fluid_defsfloader(fluid_settings_t *settings)
     * }
     */
    public static MemorySegment new_fluid_defsfloader(MemorySegment settings) {
        var mh$ = new_fluid_defsfloader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_defsfloader", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfloader_set_callbacks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfloader_set_callbacks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_callbacks(fluid_sfloader_t *loader, fluid_sfloader_callback_open_t open, fluid_sfloader_callback_read_t read, fluid_sfloader_callback_seek_t seek, fluid_sfloader_callback_tell_t tell, fluid_sfloader_callback_close_t close)
     * }
     */
    public static FunctionDescriptor fluid_sfloader_set_callbacks$descriptor() {
        return fluid_sfloader_set_callbacks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_callbacks(fluid_sfloader_t *loader, fluid_sfloader_callback_open_t open, fluid_sfloader_callback_read_t read, fluid_sfloader_callback_seek_t seek, fluid_sfloader_callback_tell_t tell, fluid_sfloader_callback_close_t close)
     * }
     */
    public static MethodHandle fluid_sfloader_set_callbacks$handle() {
        return fluid_sfloader_set_callbacks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_callbacks(fluid_sfloader_t *loader, fluid_sfloader_callback_open_t open, fluid_sfloader_callback_read_t read, fluid_sfloader_callback_seek_t seek, fluid_sfloader_callback_tell_t tell, fluid_sfloader_callback_close_t close)
     * }
     */
    public static MemorySegment fluid_sfloader_set_callbacks$address() {
        return fluid_sfloader_set_callbacks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sfloader_set_callbacks(fluid_sfloader_t *loader, fluid_sfloader_callback_open_t open, fluid_sfloader_callback_read_t read, fluid_sfloader_callback_seek_t seek, fluid_sfloader_callback_tell_t tell, fluid_sfloader_callback_close_t close)
     * }
     */
    public static int fluid_sfloader_set_callbacks(MemorySegment loader, MemorySegment open, MemorySegment read, MemorySegment seek, MemorySegment tell, MemorySegment close) {
        var mh$ = fluid_sfloader_set_callbacks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfloader_set_callbacks", loader, open, read, seek, tell, close);
            }
            return (int)mh$.invokeExact(loader, open, read, seek, tell, close);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfloader_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfloader_set_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_data(fluid_sfloader_t *loader, void *data)
     * }
     */
    public static FunctionDescriptor fluid_sfloader_set_data$descriptor() {
        return fluid_sfloader_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_data(fluid_sfloader_t *loader, void *data)
     * }
     */
    public static MethodHandle fluid_sfloader_set_data$handle() {
        return fluid_sfloader_set_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sfloader_set_data(fluid_sfloader_t *loader, void *data)
     * }
     */
    public static MemorySegment fluid_sfloader_set_data$address() {
        return fluid_sfloader_set_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sfloader_set_data(fluid_sfloader_t *loader, void *data)
     * }
     */
    public static int fluid_sfloader_set_data(MemorySegment loader, MemorySegment data) {
        var mh$ = fluid_sfloader_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfloader_set_data", loader, data);
            }
            return (int)mh$.invokeExact(loader, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfloader_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfloader_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *fluid_sfloader_get_data(fluid_sfloader_t *loader)
     * }
     */
    public static FunctionDescriptor fluid_sfloader_get_data$descriptor() {
        return fluid_sfloader_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *fluid_sfloader_get_data(fluid_sfloader_t *loader)
     * }
     */
    public static MethodHandle fluid_sfloader_get_data$handle() {
        return fluid_sfloader_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *fluid_sfloader_get_data(fluid_sfloader_t *loader)
     * }
     */
    public static MemorySegment fluid_sfloader_get_data$address() {
        return fluid_sfloader_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *fluid_sfloader_get_data(fluid_sfloader_t *loader)
     * }
     */
    public static MemorySegment fluid_sfloader_get_data(MemorySegment loader) {
        var mh$ = fluid_sfloader_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfloader_get_data", loader);
            }
            return (MemorySegment)mh$.invokeExact(loader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfont_t *new_fluid_sfont(fluid_sfont_get_name_t get_name, fluid_sfont_get_preset_t get_preset, fluid_sfont_iteration_start_t iter_start, fluid_sfont_iteration_next_t iter_next, fluid_sfont_free_t free)
     * }
     */
    public static FunctionDescriptor new_fluid_sfont$descriptor() {
        return new_fluid_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfont_t *new_fluid_sfont(fluid_sfont_get_name_t get_name, fluid_sfont_get_preset_t get_preset, fluid_sfont_iteration_start_t iter_start, fluid_sfont_iteration_next_t iter_next, fluid_sfont_free_t free)
     * }
     */
    public static MethodHandle new_fluid_sfont$handle() {
        return new_fluid_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfont_t *new_fluid_sfont(fluid_sfont_get_name_t get_name, fluid_sfont_get_preset_t get_preset, fluid_sfont_iteration_start_t iter_start, fluid_sfont_iteration_next_t iter_next, fluid_sfont_free_t free)
     * }
     */
    public static MemorySegment new_fluid_sfont$address() {
        return new_fluid_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfont_t *new_fluid_sfont(fluid_sfont_get_name_t get_name, fluid_sfont_get_preset_t get_preset, fluid_sfont_iteration_start_t iter_start, fluid_sfont_iteration_next_t iter_next, fluid_sfont_free_t free)
     * }
     */
    public static MemorySegment new_fluid_sfont(MemorySegment get_name, MemorySegment get_preset, MemorySegment iter_start, MemorySegment iter_next, MemorySegment free) {
        var mh$ = new_fluid_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_sfont", get_name, get_preset, iter_start, iter_next, free);
            }
            return (MemorySegment)mh$.invokeExact(get_name, get_preset, iter_start, iter_next, free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int delete_fluid_sfont(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor delete_fluid_sfont$descriptor() {
        return delete_fluid_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int delete_fluid_sfont(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle delete_fluid_sfont$handle() {
        return delete_fluid_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int delete_fluid_sfont(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment delete_fluid_sfont$address() {
        return delete_fluid_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int delete_fluid_sfont(fluid_sfont_t *sfont)
     * }
     */
    public static int delete_fluid_sfont(MemorySegment sfont) {
        var mh$ = delete_fluid_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_sfont", sfont);
            }
            return (int)mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_set_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sfont_set_data(fluid_sfont_t *sfont, void *data)
     * }
     */
    public static FunctionDescriptor fluid_sfont_set_data$descriptor() {
        return fluid_sfont_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sfont_set_data(fluid_sfont_t *sfont, void *data)
     * }
     */
    public static MethodHandle fluid_sfont_set_data$handle() {
        return fluid_sfont_set_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sfont_set_data(fluid_sfont_t *sfont, void *data)
     * }
     */
    public static MemorySegment fluid_sfont_set_data$address() {
        return fluid_sfont_set_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sfont_set_data(fluid_sfont_t *sfont, void *data)
     * }
     */
    public static int fluid_sfont_set_data(MemorySegment sfont, MemorySegment data) {
        var mh$ = fluid_sfont_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_set_data", sfont, data);
            }
            return (int)mh$.invokeExact(sfont, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *fluid_sfont_get_data(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_sfont_get_data$descriptor() {
        return fluid_sfont_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *fluid_sfont_get_data(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_sfont_get_data$handle() {
        return fluid_sfont_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *fluid_sfont_get_data(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_get_data$address() {
        return fluid_sfont_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *fluid_sfont_get_data(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_get_data(MemorySegment sfont) {
        var mh$ = fluid_sfont_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_get_data", sfont);
            }
            return (MemorySegment)mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_get_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sfont_get_id(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_sfont_get_id$descriptor() {
        return fluid_sfont_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sfont_get_id(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_sfont_get_id$handle() {
        return fluid_sfont_get_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sfont_get_id(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_get_id$address() {
        return fluid_sfont_get_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sfont_get_id(fluid_sfont_t *sfont)
     * }
     */
    public static int fluid_sfont_get_id(MemorySegment sfont) {
        var mh$ = fluid_sfont_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_get_id", sfont);
            }
            return (int)mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fluid_sfont_get_name(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_sfont_get_name$descriptor() {
        return fluid_sfont_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fluid_sfont_get_name(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_sfont_get_name$handle() {
        return fluid_sfont_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fluid_sfont_get_name(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_get_name$address() {
        return fluid_sfont_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fluid_sfont_get_name(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_get_name(MemorySegment sfont) {
        var mh$ = fluid_sfont_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_get_name", sfont);
            }
            return (MemorySegment)mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_get_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_get_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_get_preset(fluid_sfont_t *sfont, int bank, int prenum)
     * }
     */
    public static FunctionDescriptor fluid_sfont_get_preset$descriptor() {
        return fluid_sfont_get_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_get_preset(fluid_sfont_t *sfont, int bank, int prenum)
     * }
     */
    public static MethodHandle fluid_sfont_get_preset$handle() {
        return fluid_sfont_get_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_get_preset(fluid_sfont_t *sfont, int bank, int prenum)
     * }
     */
    public static MemorySegment fluid_sfont_get_preset$address() {
        return fluid_sfont_get_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_get_preset(fluid_sfont_t *sfont, int bank, int prenum)
     * }
     */
    public static MemorySegment fluid_sfont_get_preset(MemorySegment sfont, int bank, int prenum) {
        var mh$ = fluid_sfont_get_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_get_preset", sfont, bank, prenum);
            }
            return (MemorySegment)mh$.invokeExact(sfont, bank, prenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_iteration_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_iteration_start");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sfont_iteration_start(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_sfont_iteration_start$descriptor() {
        return fluid_sfont_iteration_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sfont_iteration_start(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_sfont_iteration_start$handle() {
        return fluid_sfont_iteration_start.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sfont_iteration_start(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_iteration_start$address() {
        return fluid_sfont_iteration_start.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sfont_iteration_start(fluid_sfont_t *sfont)
     * }
     */
    public static void fluid_sfont_iteration_start(MemorySegment sfont) {
        var mh$ = fluid_sfont_iteration_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_iteration_start", sfont);
            }
            mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sfont_iteration_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sfont_iteration_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_iteration_next(fluid_sfont_t *sfont)
     * }
     */
    public static FunctionDescriptor fluid_sfont_iteration_next$descriptor() {
        return fluid_sfont_iteration_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_iteration_next(fluid_sfont_t *sfont)
     * }
     */
    public static MethodHandle fluid_sfont_iteration_next$handle() {
        return fluid_sfont_iteration_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_iteration_next(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_iteration_next$address() {
        return fluid_sfont_iteration_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_preset_t *fluid_sfont_iteration_next(fluid_sfont_t *sfont)
     * }
     */
    public static MemorySegment fluid_sfont_iteration_next(MemorySegment sfont) {
        var mh$ = fluid_sfont_iteration_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sfont_iteration_next", sfont);
            }
            return (MemorySegment)mh$.invokeExact(sfont);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_preset_t *new_fluid_preset(fluid_sfont_t *parent_sfont, fluid_preset_get_name_t get_name, fluid_preset_get_banknum_t get_bank, fluid_preset_get_num_t get_num, fluid_preset_noteon_t noteon, fluid_preset_free_t free)
     * }
     */
    public static FunctionDescriptor new_fluid_preset$descriptor() {
        return new_fluid_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_preset_t *new_fluid_preset(fluid_sfont_t *parent_sfont, fluid_preset_get_name_t get_name, fluid_preset_get_banknum_t get_bank, fluid_preset_get_num_t get_num, fluid_preset_noteon_t noteon, fluid_preset_free_t free)
     * }
     */
    public static MethodHandle new_fluid_preset$handle() {
        return new_fluid_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_preset_t *new_fluid_preset(fluid_sfont_t *parent_sfont, fluid_preset_get_name_t get_name, fluid_preset_get_banknum_t get_bank, fluid_preset_get_num_t get_num, fluid_preset_noteon_t noteon, fluid_preset_free_t free)
     * }
     */
    public static MemorySegment new_fluid_preset$address() {
        return new_fluid_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_preset_t *new_fluid_preset(fluid_sfont_t *parent_sfont, fluid_preset_get_name_t get_name, fluid_preset_get_banknum_t get_bank, fluid_preset_get_num_t get_num, fluid_preset_noteon_t noteon, fluid_preset_free_t free)
     * }
     */
    public static MemorySegment new_fluid_preset(MemorySegment parent_sfont, MemorySegment get_name, MemorySegment get_bank, MemorySegment get_num, MemorySegment noteon, MemorySegment free) {
        var mh$ = new_fluid_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_preset", parent_sfont, get_name, get_bank, get_num, noteon, free);
            }
            return (MemorySegment)mh$.invokeExact(parent_sfont, get_name, get_bank, get_num, noteon, free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_preset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_preset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_preset(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor delete_fluid_preset$descriptor() {
        return delete_fluid_preset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_preset(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle delete_fluid_preset$handle() {
        return delete_fluid_preset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_preset(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment delete_fluid_preset$address() {
        return delete_fluid_preset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_preset(fluid_preset_t *preset)
     * }
     */
    public static void delete_fluid_preset(MemorySegment preset) {
        var mh$ = delete_fluid_preset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_preset", preset);
            }
            mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_set_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_preset_set_data(fluid_preset_t *preset, void *data)
     * }
     */
    public static FunctionDescriptor fluid_preset_set_data$descriptor() {
        return fluid_preset_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_preset_set_data(fluid_preset_t *preset, void *data)
     * }
     */
    public static MethodHandle fluid_preset_set_data$handle() {
        return fluid_preset_set_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_preset_set_data(fluid_preset_t *preset, void *data)
     * }
     */
    public static MemorySegment fluid_preset_set_data$address() {
        return fluid_preset_set_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_preset_set_data(fluid_preset_t *preset, void *data)
     * }
     */
    public static int fluid_preset_set_data(MemorySegment preset, MemorySegment data) {
        var mh$ = fluid_preset_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_set_data", preset, data);
            }
            return (int)mh$.invokeExact(preset, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *fluid_preset_get_data(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor fluid_preset_get_data$descriptor() {
        return fluid_preset_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *fluid_preset_get_data(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle fluid_preset_get_data$handle() {
        return fluid_preset_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *fluid_preset_get_data(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_data$address() {
        return fluid_preset_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *fluid_preset_get_data(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_data(MemorySegment preset) {
        var mh$ = fluid_preset_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_get_data", preset);
            }
            return (MemorySegment)mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fluid_preset_get_name(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor fluid_preset_get_name$descriptor() {
        return fluid_preset_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fluid_preset_get_name(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle fluid_preset_get_name$handle() {
        return fluid_preset_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fluid_preset_get_name(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_name$address() {
        return fluid_preset_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fluid_preset_get_name(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_name(MemorySegment preset) {
        var mh$ = fluid_preset_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_get_name", preset);
            }
            return (MemorySegment)mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_get_banknum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_get_banknum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_preset_get_banknum(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor fluid_preset_get_banknum$descriptor() {
        return fluid_preset_get_banknum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_preset_get_banknum(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle fluid_preset_get_banknum$handle() {
        return fluid_preset_get_banknum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_preset_get_banknum(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_banknum$address() {
        return fluid_preset_get_banknum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_preset_get_banknum(fluid_preset_t *preset)
     * }
     */
    public static int fluid_preset_get_banknum(MemorySegment preset) {
        var mh$ = fluid_preset_get_banknum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_get_banknum", preset);
            }
            return (int)mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_get_num {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_get_num");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_preset_get_num(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor fluid_preset_get_num$descriptor() {
        return fluid_preset_get_num.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_preset_get_num(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle fluid_preset_get_num$handle() {
        return fluid_preset_get_num.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_preset_get_num(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_num$address() {
        return fluid_preset_get_num.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_preset_get_num(fluid_preset_t *preset)
     * }
     */
    public static int fluid_preset_get_num(MemorySegment preset) {
        var mh$ = fluid_preset_get_num.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_get_num", preset);
            }
            return (int)mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_preset_get_sfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_preset_get_sfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_preset_get_sfont(fluid_preset_t *preset)
     * }
     */
    public static FunctionDescriptor fluid_preset_get_sfont$descriptor() {
        return fluid_preset_get_sfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_preset_get_sfont(fluid_preset_t *preset)
     * }
     */
    public static MethodHandle fluid_preset_get_sfont$handle() {
        return fluid_preset_get_sfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_preset_get_sfont(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_sfont$address() {
        return fluid_preset_get_sfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sfont_t *fluid_preset_get_sfont(fluid_preset_t *preset)
     * }
     */
    public static MemorySegment fluid_preset_get_sfont(MemorySegment preset) {
        var mh$ = fluid_preset_get_sfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_preset_get_sfont", preset);
            }
            return (MemorySegment)mh$.invokeExact(preset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_sample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_sample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sample_t *new_fluid_sample()
     * }
     */
    public static FunctionDescriptor new_fluid_sample$descriptor() {
        return new_fluid_sample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sample_t *new_fluid_sample()
     * }
     */
    public static MethodHandle new_fluid_sample$handle() {
        return new_fluid_sample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sample_t *new_fluid_sample()
     * }
     */
    public static MemorySegment new_fluid_sample$address() {
        return new_fluid_sample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sample_t *new_fluid_sample()
     * }
     */
    public static MemorySegment new_fluid_sample() {
        var mh$ = new_fluid_sample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_sample");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_sample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_sample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_sample(fluid_sample_t *sample)
     * }
     */
    public static FunctionDescriptor delete_fluid_sample$descriptor() {
        return delete_fluid_sample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_sample(fluid_sample_t *sample)
     * }
     */
    public static MethodHandle delete_fluid_sample$handle() {
        return delete_fluid_sample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_sample(fluid_sample_t *sample)
     * }
     */
    public static MemorySegment delete_fluid_sample$address() {
        return delete_fluid_sample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_sample(fluid_sample_t *sample)
     * }
     */
    public static void delete_fluid_sample(MemorySegment sample) {
        var mh$ = delete_fluid_sample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_sample", sample);
            }
            mh$.invokeExact(sample);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sample_sizeof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sample_sizeof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t fluid_sample_sizeof()
     * }
     */
    public static FunctionDescriptor fluid_sample_sizeof$descriptor() {
        return fluid_sample_sizeof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t fluid_sample_sizeof()
     * }
     */
    public static MethodHandle fluid_sample_sizeof$handle() {
        return fluid_sample_sizeof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t fluid_sample_sizeof()
     * }
     */
    public static MemorySegment fluid_sample_sizeof$address() {
        return fluid_sample_sizeof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t fluid_sample_sizeof()
     * }
     */
    public static long fluid_sample_sizeof() {
        var mh$ = fluid_sample_sizeof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sample_sizeof");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sample_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sample_set_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sample_set_name(fluid_sample_t *sample, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_sample_set_name$descriptor() {
        return fluid_sample_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sample_set_name(fluid_sample_t *sample, const char *name)
     * }
     */
    public static MethodHandle fluid_sample_set_name$handle() {
        return fluid_sample_set_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sample_set_name(fluid_sample_t *sample, const char *name)
     * }
     */
    public static MemorySegment fluid_sample_set_name$address() {
        return fluid_sample_set_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sample_set_name(fluid_sample_t *sample, const char *name)
     * }
     */
    public static int fluid_sample_set_name(MemorySegment sample, MemorySegment name) {
        var mh$ = fluid_sample_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sample_set_name", sample, name);
            }
            return (int)mh$.invokeExact(sample, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sample_set_sound_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sample_set_sound_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sample_set_sound_data(fluid_sample_t *sample, short *data, char *data24, unsigned int nbframes, unsigned int sample_rate, short copy_data)
     * }
     */
    public static FunctionDescriptor fluid_sample_set_sound_data$descriptor() {
        return fluid_sample_set_sound_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sample_set_sound_data(fluid_sample_t *sample, short *data, char *data24, unsigned int nbframes, unsigned int sample_rate, short copy_data)
     * }
     */
    public static MethodHandle fluid_sample_set_sound_data$handle() {
        return fluid_sample_set_sound_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sample_set_sound_data(fluid_sample_t *sample, short *data, char *data24, unsigned int nbframes, unsigned int sample_rate, short copy_data)
     * }
     */
    public static MemorySegment fluid_sample_set_sound_data$address() {
        return fluid_sample_set_sound_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sample_set_sound_data(fluid_sample_t *sample, short *data, char *data24, unsigned int nbframes, unsigned int sample_rate, short copy_data)
     * }
     */
    public static int fluid_sample_set_sound_data(MemorySegment sample, MemorySegment data, MemorySegment data24, int nbframes, int sample_rate, short copy_data) {
        var mh$ = fluid_sample_set_sound_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sample_set_sound_data", sample, data, data24, nbframes, sample_rate, copy_data);
            }
            return (int)mh$.invokeExact(sample, data, data24, nbframes, sample_rate, copy_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sample_set_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sample_set_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sample_set_loop(fluid_sample_t *sample, unsigned int loop_start, unsigned int loop_end)
     * }
     */
    public static FunctionDescriptor fluid_sample_set_loop$descriptor() {
        return fluid_sample_set_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sample_set_loop(fluid_sample_t *sample, unsigned int loop_start, unsigned int loop_end)
     * }
     */
    public static MethodHandle fluid_sample_set_loop$handle() {
        return fluid_sample_set_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sample_set_loop(fluid_sample_t *sample, unsigned int loop_start, unsigned int loop_end)
     * }
     */
    public static MemorySegment fluid_sample_set_loop$address() {
        return fluid_sample_set_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sample_set_loop(fluid_sample_t *sample, unsigned int loop_start, unsigned int loop_end)
     * }
     */
    public static int fluid_sample_set_loop(MemorySegment sample, int loop_start, int loop_end) {
        var mh$ = fluid_sample_set_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sample_set_loop", sample, loop_start, loop_end);
            }
            return (int)mh$.invokeExact(sample, loop_start, loop_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sample_set_pitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sample_set_pitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sample_set_pitch(fluid_sample_t *sample, int root_key, int fine_tune)
     * }
     */
    public static FunctionDescriptor fluid_sample_set_pitch$descriptor() {
        return fluid_sample_set_pitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sample_set_pitch(fluid_sample_t *sample, int root_key, int fine_tune)
     * }
     */
    public static MethodHandle fluid_sample_set_pitch$handle() {
        return fluid_sample_set_pitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sample_set_pitch(fluid_sample_t *sample, int root_key, int fine_tune)
     * }
     */
    public static MemorySegment fluid_sample_set_pitch$address() {
        return fluid_sample_set_pitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sample_set_pitch(fluid_sample_t *sample, int root_key, int fine_tune)
     * }
     */
    public static int fluid_sample_set_pitch(MemorySegment sample, int root_key, int fine_tune) {
        var mh$ = fluid_sample_set_pitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sample_set_pitch", sample, root_key, fine_tune);
            }
            return (int)mh$.invokeExact(sample, root_key, fine_tune);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_audio_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_audio_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor new_fluid_audio_driver$descriptor() {
        return new_fluid_audio_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
     * }
     */
    public static MethodHandle new_fluid_audio_driver$handle() {
        return new_fluid_audio_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_audio_driver$address() {
        return new_fluid_audio_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver(fluid_settings_t *settings, fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_audio_driver(MemorySegment settings, MemorySegment synth) {
        var mh$ = new_fluid_audio_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_audio_driver", settings, synth);
            }
            return (MemorySegment)mh$.invokeExact(settings, synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_audio_driver2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_audio_driver2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver2(fluid_settings_t *settings, fluid_audio_func_t func, void *data)
     * }
     */
    public static FunctionDescriptor new_fluid_audio_driver2$descriptor() {
        return new_fluid_audio_driver2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver2(fluid_settings_t *settings, fluid_audio_func_t func, void *data)
     * }
     */
    public static MethodHandle new_fluid_audio_driver2$handle() {
        return new_fluid_audio_driver2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver2(fluid_settings_t *settings, fluid_audio_func_t func, void *data)
     * }
     */
    public static MemorySegment new_fluid_audio_driver2$address() {
        return new_fluid_audio_driver2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_audio_driver_t *new_fluid_audio_driver2(fluid_settings_t *settings, fluid_audio_func_t func, void *data)
     * }
     */
    public static MemorySegment new_fluid_audio_driver2(MemorySegment settings, MemorySegment func, MemorySegment data) {
        var mh$ = new_fluid_audio_driver2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_audio_driver2", settings, func, data);
            }
            return (MemorySegment)mh$.invokeExact(settings, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_audio_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_audio_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_audio_driver(fluid_audio_driver_t *driver)
     * }
     */
    public static FunctionDescriptor delete_fluid_audio_driver$descriptor() {
        return delete_fluid_audio_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_audio_driver(fluid_audio_driver_t *driver)
     * }
     */
    public static MethodHandle delete_fluid_audio_driver$handle() {
        return delete_fluid_audio_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_audio_driver(fluid_audio_driver_t *driver)
     * }
     */
    public static MemorySegment delete_fluid_audio_driver$address() {
        return delete_fluid_audio_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_audio_driver(fluid_audio_driver_t *driver)
     * }
     */
    public static void delete_fluid_audio_driver(MemorySegment driver) {
        var mh$ = delete_fluid_audio_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_audio_driver", driver);
            }
            mh$.invokeExact(driver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_audio_driver_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_audio_driver_register");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_audio_driver_register(const char **adrivers)
     * }
     */
    public static FunctionDescriptor fluid_audio_driver_register$descriptor() {
        return fluid_audio_driver_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_audio_driver_register(const char **adrivers)
     * }
     */
    public static MethodHandle fluid_audio_driver_register$handle() {
        return fluid_audio_driver_register.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_audio_driver_register(const char **adrivers)
     * }
     */
    public static MemorySegment fluid_audio_driver_register$address() {
        return fluid_audio_driver_register.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_audio_driver_register(const char **adrivers)
     * }
     */
    public static int fluid_audio_driver_register(MemorySegment adrivers) {
        var mh$ = fluid_audio_driver_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_audio_driver_register", adrivers);
            }
            return (int)mh$.invokeExact(adrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_file_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_file_renderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_file_renderer_t *new_fluid_file_renderer(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor new_fluid_file_renderer$descriptor() {
        return new_fluid_file_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_file_renderer_t *new_fluid_file_renderer(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle new_fluid_file_renderer$handle() {
        return new_fluid_file_renderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_file_renderer_t *new_fluid_file_renderer(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_file_renderer$address() {
        return new_fluid_file_renderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_file_renderer_t *new_fluid_file_renderer(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_file_renderer(MemorySegment synth) {
        var mh$ = new_fluid_file_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_file_renderer", synth);
            }
            return (MemorySegment)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_file_renderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_file_renderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_file_renderer(fluid_file_renderer_t *dev)
     * }
     */
    public static FunctionDescriptor delete_fluid_file_renderer$descriptor() {
        return delete_fluid_file_renderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_file_renderer(fluid_file_renderer_t *dev)
     * }
     */
    public static MethodHandle delete_fluid_file_renderer$handle() {
        return delete_fluid_file_renderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_file_renderer(fluid_file_renderer_t *dev)
     * }
     */
    public static MemorySegment delete_fluid_file_renderer$address() {
        return delete_fluid_file_renderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_file_renderer(fluid_file_renderer_t *dev)
     * }
     */
    public static void delete_fluid_file_renderer(MemorySegment dev) {
        var mh$ = delete_fluid_file_renderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_file_renderer", dev);
            }
            mh$.invokeExact(dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_file_renderer_process_block {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_file_renderer_process_block");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_file_renderer_process_block(fluid_file_renderer_t *dev)
     * }
     */
    public static FunctionDescriptor fluid_file_renderer_process_block$descriptor() {
        return fluid_file_renderer_process_block.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_file_renderer_process_block(fluid_file_renderer_t *dev)
     * }
     */
    public static MethodHandle fluid_file_renderer_process_block$handle() {
        return fluid_file_renderer_process_block.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_file_renderer_process_block(fluid_file_renderer_t *dev)
     * }
     */
    public static MemorySegment fluid_file_renderer_process_block$address() {
        return fluid_file_renderer_process_block.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_file_renderer_process_block(fluid_file_renderer_t *dev)
     * }
     */
    public static int fluid_file_renderer_process_block(MemorySegment dev) {
        var mh$ = fluid_file_renderer_process_block.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_file_renderer_process_block", dev);
            }
            return (int)mh$.invokeExact(dev);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_file_set_encoding_quality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_file_set_encoding_quality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_file_set_encoding_quality(fluid_file_renderer_t *dev, double q)
     * }
     */
    public static FunctionDescriptor fluid_file_set_encoding_quality$descriptor() {
        return fluid_file_set_encoding_quality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_file_set_encoding_quality(fluid_file_renderer_t *dev, double q)
     * }
     */
    public static MethodHandle fluid_file_set_encoding_quality$handle() {
        return fluid_file_set_encoding_quality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_file_set_encoding_quality(fluid_file_renderer_t *dev, double q)
     * }
     */
    public static MemorySegment fluid_file_set_encoding_quality$address() {
        return fluid_file_set_encoding_quality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_file_set_encoding_quality(fluid_file_renderer_t *dev, double q)
     * }
     */
    public static int fluid_file_set_encoding_quality(MemorySegment dev, double q) {
        var mh$ = fluid_file_set_encoding_quality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_file_set_encoding_quality", dev, q);
            }
            return (int)mh$.invokeExact(dev, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_SEQ_NOTE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_NOTE = 0
     * }
     */
    public static int FLUID_SEQ_NOTE() {
        return FLUID_SEQ_NOTE;
    }
    private static final int FLUID_SEQ_NOTEON = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_NOTEON = 1
     * }
     */
    public static int FLUID_SEQ_NOTEON() {
        return FLUID_SEQ_NOTEON;
    }
    private static final int FLUID_SEQ_NOTEOFF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_NOTEOFF = 2
     * }
     */
    public static int FLUID_SEQ_NOTEOFF() {
        return FLUID_SEQ_NOTEOFF;
    }
    private static final int FLUID_SEQ_ALLSOUNDSOFF = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_ALLSOUNDSOFF = 3
     * }
     */
    public static int FLUID_SEQ_ALLSOUNDSOFF() {
        return FLUID_SEQ_ALLSOUNDSOFF;
    }
    private static final int FLUID_SEQ_ALLNOTESOFF = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_ALLNOTESOFF = 4
     * }
     */
    public static int FLUID_SEQ_ALLNOTESOFF() {
        return FLUID_SEQ_ALLNOTESOFF;
    }
    private static final int FLUID_SEQ_BANKSELECT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_BANKSELECT = 5
     * }
     */
    public static int FLUID_SEQ_BANKSELECT() {
        return FLUID_SEQ_BANKSELECT;
    }
    private static final int FLUID_SEQ_PROGRAMCHANGE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_PROGRAMCHANGE = 6
     * }
     */
    public static int FLUID_SEQ_PROGRAMCHANGE() {
        return FLUID_SEQ_PROGRAMCHANGE;
    }
    private static final int FLUID_SEQ_PROGRAMSELECT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_PROGRAMSELECT = 7
     * }
     */
    public static int FLUID_SEQ_PROGRAMSELECT() {
        return FLUID_SEQ_PROGRAMSELECT;
    }
    private static final int FLUID_SEQ_PITCHBEND = (int)8L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_PITCHBEND = 8
     * }
     */
    public static int FLUID_SEQ_PITCHBEND() {
        return FLUID_SEQ_PITCHBEND;
    }
    private static final int FLUID_SEQ_PITCHWHEELSENS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_PITCHWHEELSENS = 9
     * }
     */
    public static int FLUID_SEQ_PITCHWHEELSENS() {
        return FLUID_SEQ_PITCHWHEELSENS;
    }
    private static final int FLUID_SEQ_MODULATION = (int)10L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_MODULATION = 10
     * }
     */
    public static int FLUID_SEQ_MODULATION() {
        return FLUID_SEQ_MODULATION;
    }
    private static final int FLUID_SEQ_SUSTAIN = (int)11L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_SUSTAIN = 11
     * }
     */
    public static int FLUID_SEQ_SUSTAIN() {
        return FLUID_SEQ_SUSTAIN;
    }
    private static final int FLUID_SEQ_CONTROLCHANGE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_CONTROLCHANGE = 12
     * }
     */
    public static int FLUID_SEQ_CONTROLCHANGE() {
        return FLUID_SEQ_CONTROLCHANGE;
    }
    private static final int FLUID_SEQ_PAN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_PAN = 13
     * }
     */
    public static int FLUID_SEQ_PAN() {
        return FLUID_SEQ_PAN;
    }
    private static final int FLUID_SEQ_VOLUME = (int)14L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_VOLUME = 14
     * }
     */
    public static int FLUID_SEQ_VOLUME() {
        return FLUID_SEQ_VOLUME;
    }
    private static final int FLUID_SEQ_REVERBSEND = (int)15L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_REVERBSEND = 15
     * }
     */
    public static int FLUID_SEQ_REVERBSEND() {
        return FLUID_SEQ_REVERBSEND;
    }
    private static final int FLUID_SEQ_CHORUSSEND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_CHORUSSEND = 16
     * }
     */
    public static int FLUID_SEQ_CHORUSSEND() {
        return FLUID_SEQ_CHORUSSEND;
    }
    private static final int FLUID_SEQ_TIMER = (int)17L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_TIMER = 17
     * }
     */
    public static int FLUID_SEQ_TIMER() {
        return FLUID_SEQ_TIMER;
    }
    private static final int FLUID_SEQ_CHANNELPRESSURE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_CHANNELPRESSURE = 18
     * }
     */
    public static int FLUID_SEQ_CHANNELPRESSURE() {
        return FLUID_SEQ_CHANNELPRESSURE;
    }
    private static final int FLUID_SEQ_KEYPRESSURE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_KEYPRESSURE = 19
     * }
     */
    public static int FLUID_SEQ_KEYPRESSURE() {
        return FLUID_SEQ_KEYPRESSURE;
    }
    private static final int FLUID_SEQ_SYSTEMRESET = (int)20L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_SYSTEMRESET = 20
     * }
     */
    public static int FLUID_SEQ_SYSTEMRESET() {
        return FLUID_SEQ_SYSTEMRESET;
    }
    private static final int FLUID_SEQ_UNREGISTERING = (int)21L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_UNREGISTERING = 21
     * }
     */
    public static int FLUID_SEQ_UNREGISTERING() {
        return FLUID_SEQ_UNREGISTERING;
    }
    private static final int FLUID_SEQ_SCALE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_SCALE = 22
     * }
     */
    public static int FLUID_SEQ_SCALE() {
        return FLUID_SEQ_SCALE;
    }
    private static final int FLUID_SEQ_LASTEVENT = (int)23L;
    /**
     * {@snippet lang=c :
     * enum fluid_seq_event_type.FLUID_SEQ_LASTEVENT = 23
     * }
     */
    public static int FLUID_SEQ_LASTEVENT() {
        return FLUID_SEQ_LASTEVENT;
    }

    private static class new_fluid_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_event_t *new_fluid_event()
     * }
     */
    public static FunctionDescriptor new_fluid_event$descriptor() {
        return new_fluid_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_event_t *new_fluid_event()
     * }
     */
    public static MethodHandle new_fluid_event$handle() {
        return new_fluid_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_event_t *new_fluid_event()
     * }
     */
    public static MemorySegment new_fluid_event$address() {
        return new_fluid_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_event_t *new_fluid_event()
     * }
     */
    public static MemorySegment new_fluid_event() {
        var mh$ = new_fluid_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_event");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_event(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor delete_fluid_event$descriptor() {
        return delete_fluid_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_event(fluid_event_t *evt)
     * }
     */
    public static MethodHandle delete_fluid_event$handle() {
        return delete_fluid_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_event(fluid_event_t *evt)
     * }
     */
    public static MemorySegment delete_fluid_event$address() {
        return delete_fluid_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_event(fluid_event_t *evt)
     * }
     */
    public static void delete_fluid_event(MemorySegment evt) {
        var mh$ = delete_fluid_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_event", evt);
            }
            mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_set_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_set_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_set_source(fluid_event_t *evt, fluid_seq_id_t src)
     * }
     */
    public static FunctionDescriptor fluid_event_set_source$descriptor() {
        return fluid_event_set_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_set_source(fluid_event_t *evt, fluid_seq_id_t src)
     * }
     */
    public static MethodHandle fluid_event_set_source$handle() {
        return fluid_event_set_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_set_source(fluid_event_t *evt, fluid_seq_id_t src)
     * }
     */
    public static MemorySegment fluid_event_set_source$address() {
        return fluid_event_set_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_set_source(fluid_event_t *evt, fluid_seq_id_t src)
     * }
     */
    public static void fluid_event_set_source(MemorySegment evt, short src) {
        var mh$ = fluid_event_set_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_set_source", evt, src);
            }
            mh$.invokeExact(evt, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_set_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_set_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_set_dest(fluid_event_t *evt, fluid_seq_id_t dest)
     * }
     */
    public static FunctionDescriptor fluid_event_set_dest$descriptor() {
        return fluid_event_set_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_set_dest(fluid_event_t *evt, fluid_seq_id_t dest)
     * }
     */
    public static MethodHandle fluid_event_set_dest$handle() {
        return fluid_event_set_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_set_dest(fluid_event_t *evt, fluid_seq_id_t dest)
     * }
     */
    public static MemorySegment fluid_event_set_dest$address() {
        return fluid_event_set_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_set_dest(fluid_event_t *evt, fluid_seq_id_t dest)
     * }
     */
    public static void fluid_event_set_dest(MemorySegment evt, short dest) {
        var mh$ = fluid_event_set_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_set_dest", evt, dest);
            }
            mh$.invokeExact(evt, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_timer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_timer(fluid_event_t *evt, void *data)
     * }
     */
    public static FunctionDescriptor fluid_event_timer$descriptor() {
        return fluid_event_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_timer(fluid_event_t *evt, void *data)
     * }
     */
    public static MethodHandle fluid_event_timer$handle() {
        return fluid_event_timer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_timer(fluid_event_t *evt, void *data)
     * }
     */
    public static MemorySegment fluid_event_timer$address() {
        return fluid_event_timer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_timer(fluid_event_t *evt, void *data)
     * }
     */
    public static void fluid_event_timer(MemorySegment evt, MemorySegment data) {
        var mh$ = fluid_event_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_timer", evt, data);
            }
            mh$.invokeExact(evt, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_note {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_note");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_note(fluid_event_t *evt, int channel, short key, short vel, unsigned int duration)
     * }
     */
    public static FunctionDescriptor fluid_event_note$descriptor() {
        return fluid_event_note.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_note(fluid_event_t *evt, int channel, short key, short vel, unsigned int duration)
     * }
     */
    public static MethodHandle fluid_event_note$handle() {
        return fluid_event_note.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_note(fluid_event_t *evt, int channel, short key, short vel, unsigned int duration)
     * }
     */
    public static MemorySegment fluid_event_note$address() {
        return fluid_event_note.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_note(fluid_event_t *evt, int channel, short key, short vel, unsigned int duration)
     * }
     */
    public static void fluid_event_note(MemorySegment evt, int channel, short key, short vel, int duration) {
        var mh$ = fluid_event_note.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_note", evt, channel, key, vel, duration);
            }
            mh$.invokeExact(evt, channel, key, vel, duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_noteon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_noteon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_noteon(fluid_event_t *evt, int channel, short key, short vel)
     * }
     */
    public static FunctionDescriptor fluid_event_noteon$descriptor() {
        return fluid_event_noteon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_noteon(fluid_event_t *evt, int channel, short key, short vel)
     * }
     */
    public static MethodHandle fluid_event_noteon$handle() {
        return fluid_event_noteon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_noteon(fluid_event_t *evt, int channel, short key, short vel)
     * }
     */
    public static MemorySegment fluid_event_noteon$address() {
        return fluid_event_noteon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_noteon(fluid_event_t *evt, int channel, short key, short vel)
     * }
     */
    public static void fluid_event_noteon(MemorySegment evt, int channel, short key, short vel) {
        var mh$ = fluid_event_noteon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_noteon", evt, channel, key, vel);
            }
            mh$.invokeExact(evt, channel, key, vel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_noteoff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_noteoff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_noteoff(fluid_event_t *evt, int channel, short key)
     * }
     */
    public static FunctionDescriptor fluid_event_noteoff$descriptor() {
        return fluid_event_noteoff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_noteoff(fluid_event_t *evt, int channel, short key)
     * }
     */
    public static MethodHandle fluid_event_noteoff$handle() {
        return fluid_event_noteoff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_noteoff(fluid_event_t *evt, int channel, short key)
     * }
     */
    public static MemorySegment fluid_event_noteoff$address() {
        return fluid_event_noteoff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_noteoff(fluid_event_t *evt, int channel, short key)
     * }
     */
    public static void fluid_event_noteoff(MemorySegment evt, int channel, short key) {
        var mh$ = fluid_event_noteoff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_noteoff", evt, channel, key);
            }
            mh$.invokeExact(evt, channel, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_all_sounds_off {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_all_sounds_off");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_all_sounds_off(fluid_event_t *evt, int channel)
     * }
     */
    public static FunctionDescriptor fluid_event_all_sounds_off$descriptor() {
        return fluid_event_all_sounds_off.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_all_sounds_off(fluid_event_t *evt, int channel)
     * }
     */
    public static MethodHandle fluid_event_all_sounds_off$handle() {
        return fluid_event_all_sounds_off.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_all_sounds_off(fluid_event_t *evt, int channel)
     * }
     */
    public static MemorySegment fluid_event_all_sounds_off$address() {
        return fluid_event_all_sounds_off.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_all_sounds_off(fluid_event_t *evt, int channel)
     * }
     */
    public static void fluid_event_all_sounds_off(MemorySegment evt, int channel) {
        var mh$ = fluid_event_all_sounds_off.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_all_sounds_off", evt, channel);
            }
            mh$.invokeExact(evt, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_all_notes_off {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_all_notes_off");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_all_notes_off(fluid_event_t *evt, int channel)
     * }
     */
    public static FunctionDescriptor fluid_event_all_notes_off$descriptor() {
        return fluid_event_all_notes_off.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_all_notes_off(fluid_event_t *evt, int channel)
     * }
     */
    public static MethodHandle fluid_event_all_notes_off$handle() {
        return fluid_event_all_notes_off.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_all_notes_off(fluid_event_t *evt, int channel)
     * }
     */
    public static MemorySegment fluid_event_all_notes_off$address() {
        return fluid_event_all_notes_off.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_all_notes_off(fluid_event_t *evt, int channel)
     * }
     */
    public static void fluid_event_all_notes_off(MemorySegment evt, int channel) {
        var mh$ = fluid_event_all_notes_off.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_all_notes_off", evt, channel);
            }
            mh$.invokeExact(evt, channel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_bank_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_bank_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_bank_select(fluid_event_t *evt, int channel, short bank_num)
     * }
     */
    public static FunctionDescriptor fluid_event_bank_select$descriptor() {
        return fluid_event_bank_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_bank_select(fluid_event_t *evt, int channel, short bank_num)
     * }
     */
    public static MethodHandle fluid_event_bank_select$handle() {
        return fluid_event_bank_select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_bank_select(fluid_event_t *evt, int channel, short bank_num)
     * }
     */
    public static MemorySegment fluid_event_bank_select$address() {
        return fluid_event_bank_select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_bank_select(fluid_event_t *evt, int channel, short bank_num)
     * }
     */
    public static void fluid_event_bank_select(MemorySegment evt, int channel, short bank_num) {
        var mh$ = fluid_event_bank_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_bank_select", evt, channel, bank_num);
            }
            mh$.invokeExact(evt, channel, bank_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_program_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_program_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_program_change(fluid_event_t *evt, int channel, int preset_num)
     * }
     */
    public static FunctionDescriptor fluid_event_program_change$descriptor() {
        return fluid_event_program_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_program_change(fluid_event_t *evt, int channel, int preset_num)
     * }
     */
    public static MethodHandle fluid_event_program_change$handle() {
        return fluid_event_program_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_program_change(fluid_event_t *evt, int channel, int preset_num)
     * }
     */
    public static MemorySegment fluid_event_program_change$address() {
        return fluid_event_program_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_program_change(fluid_event_t *evt, int channel, int preset_num)
     * }
     */
    public static void fluid_event_program_change(MemorySegment evt, int channel, int preset_num) {
        var mh$ = fluid_event_program_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_program_change", evt, channel, preset_num);
            }
            mh$.invokeExact(evt, channel, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_program_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_program_select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_program_select(fluid_event_t *evt, int channel, unsigned int sfont_id, short bank_num, short preset_num)
     * }
     */
    public static FunctionDescriptor fluid_event_program_select$descriptor() {
        return fluid_event_program_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_program_select(fluid_event_t *evt, int channel, unsigned int sfont_id, short bank_num, short preset_num)
     * }
     */
    public static MethodHandle fluid_event_program_select$handle() {
        return fluid_event_program_select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_program_select(fluid_event_t *evt, int channel, unsigned int sfont_id, short bank_num, short preset_num)
     * }
     */
    public static MemorySegment fluid_event_program_select$address() {
        return fluid_event_program_select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_program_select(fluid_event_t *evt, int channel, unsigned int sfont_id, short bank_num, short preset_num)
     * }
     */
    public static void fluid_event_program_select(MemorySegment evt, int channel, int sfont_id, short bank_num, short preset_num) {
        var mh$ = fluid_event_program_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_program_select", evt, channel, sfont_id, bank_num, preset_num);
            }
            mh$.invokeExact(evt, channel, sfont_id, bank_num, preset_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_control_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_control_change");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_control_change(fluid_event_t *evt, int channel, short control, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_control_change$descriptor() {
        return fluid_event_control_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_control_change(fluid_event_t *evt, int channel, short control, int val)
     * }
     */
    public static MethodHandle fluid_event_control_change$handle() {
        return fluid_event_control_change.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_control_change(fluid_event_t *evt, int channel, short control, int val)
     * }
     */
    public static MemorySegment fluid_event_control_change$address() {
        return fluid_event_control_change.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_control_change(fluid_event_t *evt, int channel, short control, int val)
     * }
     */
    public static void fluid_event_control_change(MemorySegment evt, int channel, short control, int val) {
        var mh$ = fluid_event_control_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_control_change", evt, channel, control, val);
            }
            mh$.invokeExact(evt, channel, control, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_pitch_bend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_pitch_bend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_pitch_bend(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_pitch_bend$descriptor() {
        return fluid_event_pitch_bend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_pitch_bend(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_pitch_bend$handle() {
        return fluid_event_pitch_bend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_pitch_bend(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_pitch_bend$address() {
        return fluid_event_pitch_bend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_pitch_bend(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_pitch_bend(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_pitch_bend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_pitch_bend", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_pitch_wheelsens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_pitch_wheelsens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_pitch_wheelsens(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_pitch_wheelsens$descriptor() {
        return fluid_event_pitch_wheelsens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_pitch_wheelsens(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_pitch_wheelsens$handle() {
        return fluid_event_pitch_wheelsens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_pitch_wheelsens(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_pitch_wheelsens$address() {
        return fluid_event_pitch_wheelsens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_pitch_wheelsens(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_pitch_wheelsens(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_pitch_wheelsens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_pitch_wheelsens", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_modulation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_modulation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_modulation(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_modulation$descriptor() {
        return fluid_event_modulation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_modulation(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_modulation$handle() {
        return fluid_event_modulation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_modulation(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_modulation$address() {
        return fluid_event_modulation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_modulation(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_modulation(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_modulation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_modulation", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_sustain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_sustain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_sustain(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_sustain$descriptor() {
        return fluid_event_sustain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_sustain(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_sustain$handle() {
        return fluid_event_sustain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_sustain(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_sustain$address() {
        return fluid_event_sustain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_sustain(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_sustain(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_sustain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_sustain", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_pan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_pan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_pan(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_pan$descriptor() {
        return fluid_event_pan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_pan(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_pan$handle() {
        return fluid_event_pan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_pan(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_pan$address() {
        return fluid_event_pan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_pan(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_pan(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_pan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_pan", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_volume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_volume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_volume(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_volume$descriptor() {
        return fluid_event_volume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_volume(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_volume$handle() {
        return fluid_event_volume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_volume(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_volume$address() {
        return fluid_event_volume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_volume(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_volume(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_volume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_volume", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_reverb_send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_reverb_send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_reverb_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_reverb_send$descriptor() {
        return fluid_event_reverb_send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_reverb_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_reverb_send$handle() {
        return fluid_event_reverb_send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_reverb_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_reverb_send$address() {
        return fluid_event_reverb_send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_reverb_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_reverb_send(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_reverb_send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_reverb_send", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_chorus_send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_chorus_send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_chorus_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_chorus_send$descriptor() {
        return fluid_event_chorus_send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_chorus_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_chorus_send$handle() {
        return fluid_event_chorus_send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_chorus_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_chorus_send$address() {
        return fluid_event_chorus_send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_chorus_send(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_chorus_send(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_chorus_send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_chorus_send", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_key_pressure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_key_pressure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_key_pressure(fluid_event_t *evt, int channel, short key, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_key_pressure$descriptor() {
        return fluid_event_key_pressure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_key_pressure(fluid_event_t *evt, int channel, short key, int val)
     * }
     */
    public static MethodHandle fluid_event_key_pressure$handle() {
        return fluid_event_key_pressure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_key_pressure(fluid_event_t *evt, int channel, short key, int val)
     * }
     */
    public static MemorySegment fluid_event_key_pressure$address() {
        return fluid_event_key_pressure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_key_pressure(fluid_event_t *evt, int channel, short key, int val)
     * }
     */
    public static void fluid_event_key_pressure(MemorySegment evt, int channel, short key, int val) {
        var mh$ = fluid_event_key_pressure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_key_pressure", evt, channel, key, val);
            }
            mh$.invokeExact(evt, channel, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_channel_pressure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_channel_pressure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_channel_pressure(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static FunctionDescriptor fluid_event_channel_pressure$descriptor() {
        return fluid_event_channel_pressure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_channel_pressure(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MethodHandle fluid_event_channel_pressure$handle() {
        return fluid_event_channel_pressure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_channel_pressure(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static MemorySegment fluid_event_channel_pressure$address() {
        return fluid_event_channel_pressure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_channel_pressure(fluid_event_t *evt, int channel, int val)
     * }
     */
    public static void fluid_event_channel_pressure(MemorySegment evt, int channel, int val) {
        var mh$ = fluid_event_channel_pressure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_channel_pressure", evt, channel, val);
            }
            mh$.invokeExact(evt, channel, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_system_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_system_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_system_reset(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_system_reset$descriptor() {
        return fluid_event_system_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_system_reset(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_system_reset$handle() {
        return fluid_event_system_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_system_reset(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_system_reset$address() {
        return fluid_event_system_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_system_reset(fluid_event_t *evt)
     * }
     */
    public static void fluid_event_system_reset(MemorySegment evt) {
        var mh$ = fluid_event_system_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_system_reset", evt);
            }
            mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_unregistering {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_unregistering");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_unregistering(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_unregistering$descriptor() {
        return fluid_event_unregistering.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_unregistering(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_unregistering$handle() {
        return fluid_event_unregistering.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_unregistering(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_unregistering$address() {
        return fluid_event_unregistering.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_unregistering(fluid_event_t *evt)
     * }
     */
    public static void fluid_event_unregistering(MemorySegment evt) {
        var mh$ = fluid_event_unregistering.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_unregistering", evt);
            }
            mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_event_scale(fluid_event_t *evt, double new_scale)
     * }
     */
    public static FunctionDescriptor fluid_event_scale$descriptor() {
        return fluid_event_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_event_scale(fluid_event_t *evt, double new_scale)
     * }
     */
    public static MethodHandle fluid_event_scale$handle() {
        return fluid_event_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_event_scale(fluid_event_t *evt, double new_scale)
     * }
     */
    public static MemorySegment fluid_event_scale$address() {
        return fluid_event_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_event_scale(fluid_event_t *evt, double new_scale)
     * }
     */
    public static void fluid_event_scale(MemorySegment evt, double new_scale) {
        var mh$ = fluid_event_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_scale", evt, new_scale);
            }
            mh$.invokeExact(evt, new_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_from_midi_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_from_midi_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_from_midi_event(fluid_event_t *, const fluid_midi_event_t *)
     * }
     */
    public static FunctionDescriptor fluid_event_from_midi_event$descriptor() {
        return fluid_event_from_midi_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_from_midi_event(fluid_event_t *, const fluid_midi_event_t *)
     * }
     */
    public static MethodHandle fluid_event_from_midi_event$handle() {
        return fluid_event_from_midi_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_from_midi_event(fluid_event_t *, const fluid_midi_event_t *)
     * }
     */
    public static MemorySegment fluid_event_from_midi_event$address() {
        return fluid_event_from_midi_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_from_midi_event(fluid_event_t *, const fluid_midi_event_t *)
     * }
     */
    public static int fluid_event_from_midi_event(MemorySegment x0, MemorySegment x1) {
        var mh$ = fluid_event_from_midi_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_from_midi_event", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_get_type(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_type$descriptor() {
        return fluid_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_get_type(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_type$handle() {
        return fluid_event_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_get_type(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_type$address() {
        return fluid_event_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_get_type(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_type(MemorySegment evt) {
        var mh$ = fluid_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_type", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_source(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_source$descriptor() {
        return fluid_event_get_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_source(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_source$handle() {
        return fluid_event_get_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_source(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_source$address() {
        return fluid_event_get_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_source(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_source(MemorySegment evt) {
        var mh$ = fluid_event_get_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_source", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_dest(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_dest$descriptor() {
        return fluid_event_get_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_dest(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_dest$handle() {
        return fluid_event_get_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_dest(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_dest$address() {
        return fluid_event_get_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_event_get_dest(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_dest(MemorySegment evt) {
        var mh$ = fluid_event_get_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_dest", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_get_channel(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_channel$descriptor() {
        return fluid_event_get_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_get_channel(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_channel$handle() {
        return fluid_event_get_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_get_channel(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_channel$address() {
        return fluid_event_get_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_get_channel(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_channel(MemorySegment evt) {
        var mh$ = fluid_event_get_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_channel", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short fluid_event_get_key(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_key$descriptor() {
        return fluid_event_get_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short fluid_event_get_key(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_key$handle() {
        return fluid_event_get_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short fluid_event_get_key(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_key$address() {
        return fluid_event_get_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short fluid_event_get_key(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_key(MemorySegment evt) {
        var mh$ = fluid_event_get_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_key", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_velocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short fluid_event_get_velocity(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_velocity$descriptor() {
        return fluid_event_get_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short fluid_event_get_velocity(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_velocity$handle() {
        return fluid_event_get_velocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short fluid_event_get_velocity(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_velocity$address() {
        return fluid_event_get_velocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short fluid_event_get_velocity(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_velocity(MemorySegment evt) {
        var mh$ = fluid_event_get_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_velocity", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short fluid_event_get_control(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_control$descriptor() {
        return fluid_event_get_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short fluid_event_get_control(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_control$handle() {
        return fluid_event_get_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short fluid_event_get_control(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_control$address() {
        return fluid_event_get_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short fluid_event_get_control(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_control(MemorySegment evt) {
        var mh$ = fluid_event_get_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_control", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_get_value(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_value$descriptor() {
        return fluid_event_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_get_value(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_value$handle() {
        return fluid_event_get_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_get_value(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_value$address() {
        return fluid_event_get_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_get_value(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_value(MemorySegment evt) {
        var mh$ = fluid_event_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_value", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_program {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_program");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_get_program(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_program$descriptor() {
        return fluid_event_get_program.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_get_program(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_program$handle() {
        return fluid_event_get_program.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_get_program(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_program$address() {
        return fluid_event_get_program.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_get_program(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_program(MemorySegment evt) {
        var mh$ = fluid_event_get_program.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_program", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *fluid_event_get_data(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_data$descriptor() {
        return fluid_event_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *fluid_event_get_data(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_data$handle() {
        return fluid_event_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *fluid_event_get_data(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_data$address() {
        return fluid_event_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *fluid_event_get_data(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_data(MemorySegment evt) {
        var mh$ = fluid_event_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_data", evt);
            }
            return (MemorySegment)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_duration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_duration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_duration(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_duration$descriptor() {
        return fluid_event_get_duration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_duration(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_duration$handle() {
        return fluid_event_get_duration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_duration(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_duration$address() {
        return fluid_event_get_duration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int fluid_event_get_duration(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_duration(MemorySegment evt) {
        var mh$ = fluid_event_get_duration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_duration", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_bank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_bank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short fluid_event_get_bank(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_bank$descriptor() {
        return fluid_event_get_bank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short fluid_event_get_bank(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_bank$handle() {
        return fluid_event_get_bank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short fluid_event_get_bank(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_bank$address() {
        return fluid_event_get_bank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short fluid_event_get_bank(fluid_event_t *evt)
     * }
     */
    public static short fluid_event_get_bank(MemorySegment evt) {
        var mh$ = fluid_event_get_bank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_bank", evt);
            }
            return (short)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_pitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_pitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_event_get_pitch(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_pitch$descriptor() {
        return fluid_event_get_pitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_event_get_pitch(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_pitch$handle() {
        return fluid_event_get_pitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_event_get_pitch(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_pitch$address() {
        return fluid_event_get_pitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_event_get_pitch(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_pitch(MemorySegment evt) {
        var mh$ = fluid_event_get_pitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_pitch", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_event_get_scale(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_scale$descriptor() {
        return fluid_event_get_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_event_get_scale(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_scale$handle() {
        return fluid_event_get_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_event_get_scale(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_scale$address() {
        return fluid_event_get_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_event_get_scale(fluid_event_t *evt)
     * }
     */
    public static double fluid_event_get_scale(MemorySegment evt) {
        var mh$ = fluid_event_get_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_scale", evt);
            }
            return (double)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_event_get_sfont_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_event_get_sfont_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_sfont_id(fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_event_get_sfont_id$descriptor() {
        return fluid_event_get_sfont_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_sfont_id(fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_event_get_sfont_id$handle() {
        return fluid_event_get_sfont_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int fluid_event_get_sfont_id(fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_event_get_sfont_id$address() {
        return fluid_event_get_sfont_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int fluid_event_get_sfont_id(fluid_event_t *evt)
     * }
     */
    public static int fluid_event_get_sfont_id(MemorySegment evt) {
        var mh$ = fluid_event_get_sfont_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_event_get_sfont_id", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_midi_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_midi_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_midi_event_t *new_fluid_midi_event()
     * }
     */
    public static FunctionDescriptor new_fluid_midi_event$descriptor() {
        return new_fluid_midi_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_midi_event_t *new_fluid_midi_event()
     * }
     */
    public static MethodHandle new_fluid_midi_event$handle() {
        return new_fluid_midi_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_midi_event_t *new_fluid_midi_event()
     * }
     */
    public static MemorySegment new_fluid_midi_event$address() {
        return new_fluid_midi_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_midi_event_t *new_fluid_midi_event()
     * }
     */
    public static MemorySegment new_fluid_midi_event() {
        var mh$ = new_fluid_midi_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_midi_event");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_midi_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_midi_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_midi_event(fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor delete_fluid_midi_event$descriptor() {
        return delete_fluid_midi_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_midi_event(fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle delete_fluid_midi_event$handle() {
        return delete_fluid_midi_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_midi_event(fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment delete_fluid_midi_event$address() {
        return delete_fluid_midi_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_midi_event(fluid_midi_event_t *event)
     * }
     */
    public static void delete_fluid_midi_event(MemorySegment event) {
        var mh$ = delete_fluid_midi_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_midi_event", event);
            }
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_type(fluid_midi_event_t *evt, int type)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_type$descriptor() {
        return fluid_midi_event_set_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_type(fluid_midi_event_t *evt, int type)
     * }
     */
    public static MethodHandle fluid_midi_event_set_type$handle() {
        return fluid_midi_event_set_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_type(fluid_midi_event_t *evt, int type)
     * }
     */
    public static MemorySegment fluid_midi_event_set_type$address() {
        return fluid_midi_event_set_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_type(fluid_midi_event_t *evt, int type)
     * }
     */
    public static int fluid_midi_event_set_type(MemorySegment evt, int type) {
        var mh$ = fluid_midi_event_set_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_type", evt, type);
            }
            return (int)mh$.invokeExact(evt, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_type(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_type$descriptor() {
        return fluid_midi_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_type(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_type$handle() {
        return fluid_midi_event_get_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_type(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_type$address() {
        return fluid_midi_event_get_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_type(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_type(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_type", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_channel(fluid_midi_event_t *evt, int chan)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_channel$descriptor() {
        return fluid_midi_event_set_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_channel(fluid_midi_event_t *evt, int chan)
     * }
     */
    public static MethodHandle fluid_midi_event_set_channel$handle() {
        return fluid_midi_event_set_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_channel(fluid_midi_event_t *evt, int chan)
     * }
     */
    public static MemorySegment fluid_midi_event_set_channel$address() {
        return fluid_midi_event_set_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_channel(fluid_midi_event_t *evt, int chan)
     * }
     */
    public static int fluid_midi_event_set_channel(MemorySegment evt, int chan) {
        var mh$ = fluid_midi_event_set_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_channel", evt, chan);
            }
            return (int)mh$.invokeExact(evt, chan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_channel(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_channel$descriptor() {
        return fluid_midi_event_get_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_channel(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_channel$handle() {
        return fluid_midi_event_get_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_channel(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_channel$address() {
        return fluid_midi_event_get_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_channel(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_channel(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_channel", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_key(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_key$descriptor() {
        return fluid_midi_event_get_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_key(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_key$handle() {
        return fluid_midi_event_get_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_key(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_key$address() {
        return fluid_midi_event_get_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_key(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_key(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_key", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_key(fluid_midi_event_t *evt, int key)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_key$descriptor() {
        return fluid_midi_event_set_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_key(fluid_midi_event_t *evt, int key)
     * }
     */
    public static MethodHandle fluid_midi_event_set_key$handle() {
        return fluid_midi_event_set_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_key(fluid_midi_event_t *evt, int key)
     * }
     */
    public static MemorySegment fluid_midi_event_set_key$address() {
        return fluid_midi_event_set_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_key(fluid_midi_event_t *evt, int key)
     * }
     */
    public static int fluid_midi_event_set_key(MemorySegment evt, int key) {
        var mh$ = fluid_midi_event_set_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_key", evt, key);
            }
            return (int)mh$.invokeExact(evt, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_velocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_velocity(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_velocity$descriptor() {
        return fluid_midi_event_get_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_velocity(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_velocity$handle() {
        return fluid_midi_event_get_velocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_velocity(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_velocity$address() {
        return fluid_midi_event_get_velocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_velocity(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_velocity(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_velocity", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_velocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_velocity(fluid_midi_event_t *evt, int vel)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_velocity$descriptor() {
        return fluid_midi_event_set_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_velocity(fluid_midi_event_t *evt, int vel)
     * }
     */
    public static MethodHandle fluid_midi_event_set_velocity$handle() {
        return fluid_midi_event_set_velocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_velocity(fluid_midi_event_t *evt, int vel)
     * }
     */
    public static MemorySegment fluid_midi_event_set_velocity$address() {
        return fluid_midi_event_set_velocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_velocity(fluid_midi_event_t *evt, int vel)
     * }
     */
    public static int fluid_midi_event_set_velocity(MemorySegment evt, int vel) {
        var mh$ = fluid_midi_event_set_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_velocity", evt, vel);
            }
            return (int)mh$.invokeExact(evt, vel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_control(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_control$descriptor() {
        return fluid_midi_event_get_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_control(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_control$handle() {
        return fluid_midi_event_get_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_control(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_control$address() {
        return fluid_midi_event_get_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_control(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_control(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_control", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_control(fluid_midi_event_t *evt, int ctrl)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_control$descriptor() {
        return fluid_midi_event_set_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_control(fluid_midi_event_t *evt, int ctrl)
     * }
     */
    public static MethodHandle fluid_midi_event_set_control$handle() {
        return fluid_midi_event_set_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_control(fluid_midi_event_t *evt, int ctrl)
     * }
     */
    public static MemorySegment fluid_midi_event_set_control$address() {
        return fluid_midi_event_set_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_control(fluid_midi_event_t *evt, int ctrl)
     * }
     */
    public static int fluid_midi_event_set_control(MemorySegment evt, int ctrl) {
        var mh$ = fluid_midi_event_set_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_control", evt, ctrl);
            }
            return (int)mh$.invokeExact(evt, ctrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_value(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_value$descriptor() {
        return fluid_midi_event_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_value(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_value$handle() {
        return fluid_midi_event_get_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_value(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_value$address() {
        return fluid_midi_event_get_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_value(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_value(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_value", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_value(fluid_midi_event_t *evt, int val)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_value$descriptor() {
        return fluid_midi_event_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_value(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MethodHandle fluid_midi_event_set_value$handle() {
        return fluid_midi_event_set_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_value(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MemorySegment fluid_midi_event_set_value$address() {
        return fluid_midi_event_set_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_value(fluid_midi_event_t *evt, int val)
     * }
     */
    public static int fluid_midi_event_set_value(MemorySegment evt, int val) {
        var mh$ = fluid_midi_event_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_value", evt, val);
            }
            return (int)mh$.invokeExact(evt, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_program {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_program");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_program(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_program$descriptor() {
        return fluid_midi_event_get_program.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_program(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_program$handle() {
        return fluid_midi_event_get_program.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_program(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_program$address() {
        return fluid_midi_event_get_program.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_program(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_program(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_program.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_program", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_program {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_program");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_program(fluid_midi_event_t *evt, int val)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_program$descriptor() {
        return fluid_midi_event_set_program.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_program(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MethodHandle fluid_midi_event_set_program$handle() {
        return fluid_midi_event_set_program.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_program(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MemorySegment fluid_midi_event_set_program$address() {
        return fluid_midi_event_set_program.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_program(fluid_midi_event_t *evt, int val)
     * }
     */
    public static int fluid_midi_event_set_program(MemorySegment evt, int val) {
        var mh$ = fluid_midi_event_set_program.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_program", evt, val);
            }
            return (int)mh$.invokeExact(evt, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_pitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_pitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_pitch(const fluid_midi_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_pitch$descriptor() {
        return fluid_midi_event_get_pitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_pitch(const fluid_midi_event_t *evt)
     * }
     */
    public static MethodHandle fluid_midi_event_get_pitch$handle() {
        return fluid_midi_event_get_pitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_pitch(const fluid_midi_event_t *evt)
     * }
     */
    public static MemorySegment fluid_midi_event_get_pitch$address() {
        return fluid_midi_event_get_pitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_pitch(const fluid_midi_event_t *evt)
     * }
     */
    public static int fluid_midi_event_get_pitch(MemorySegment evt) {
        var mh$ = fluid_midi_event_get_pitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_pitch", evt);
            }
            return (int)mh$.invokeExact(evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_pitch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_pitch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_pitch(fluid_midi_event_t *evt, int val)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_pitch$descriptor() {
        return fluid_midi_event_set_pitch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_pitch(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MethodHandle fluid_midi_event_set_pitch$handle() {
        return fluid_midi_event_set_pitch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_pitch(fluid_midi_event_t *evt, int val)
     * }
     */
    public static MemorySegment fluid_midi_event_set_pitch$address() {
        return fluid_midi_event_set_pitch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_pitch(fluid_midi_event_t *evt, int val)
     * }
     */
    public static int fluid_midi_event_set_pitch(MemorySegment evt, int val) {
        var mh$ = fluid_midi_event_set_pitch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_pitch", evt, val);
            }
            return (int)mh$.invokeExact(evt, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_sysex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_sysex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_sysex(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_sysex$descriptor() {
        return fluid_midi_event_set_sysex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_sysex(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MethodHandle fluid_midi_event_set_sysex$handle() {
        return fluid_midi_event_set_sysex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_sysex(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MemorySegment fluid_midi_event_set_sysex$address() {
        return fluid_midi_event_set_sysex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_sysex(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static int fluid_midi_event_set_sysex(MemorySegment evt, MemorySegment data, int size, int dynamic) {
        var mh$ = fluid_midi_event_set_sysex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_sysex", evt, data, size, dynamic);
            }
            return (int)mh$.invokeExact(evt, data, size, dynamic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_text(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_text$descriptor() {
        return fluid_midi_event_set_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_text(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MethodHandle fluid_midi_event_set_text$handle() {
        return fluid_midi_event_set_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_text(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MemorySegment fluid_midi_event_set_text$address() {
        return fluid_midi_event_set_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_text(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static int fluid_midi_event_set_text(MemorySegment evt, MemorySegment data, int size, int dynamic) {
        var mh$ = fluid_midi_event_set_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_text", evt, data, size, dynamic);
            }
            return (int)mh$.invokeExact(evt, data, size, dynamic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_text");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_text(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_text$descriptor() {
        return fluid_midi_event_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_text(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static MethodHandle fluid_midi_event_get_text$handle() {
        return fluid_midi_event_get_text.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_text(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static MemorySegment fluid_midi_event_get_text$address() {
        return fluid_midi_event_get_text.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_text(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static int fluid_midi_event_get_text(MemorySegment evt, MemorySegment data, MemorySegment size) {
        var mh$ = fluid_midi_event_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_text", evt, data, size);
            }
            return (int)mh$.invokeExact(evt, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_set_lyrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_set_lyrics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_lyrics(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_set_lyrics$descriptor() {
        return fluid_midi_event_set_lyrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_lyrics(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MethodHandle fluid_midi_event_set_lyrics$handle() {
        return fluid_midi_event_set_lyrics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_set_lyrics(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static MemorySegment fluid_midi_event_set_lyrics$address() {
        return fluid_midi_event_set_lyrics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_set_lyrics(fluid_midi_event_t *evt, void *data, int size, int dynamic)
     * }
     */
    public static int fluid_midi_event_set_lyrics(MemorySegment evt, MemorySegment data, int size, int dynamic) {
        var mh$ = fluid_midi_event_set_lyrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_set_lyrics", evt, data, size, dynamic);
            }
            return (int)mh$.invokeExact(evt, data, size, dynamic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_event_get_lyrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_event_get_lyrics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_lyrics(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static FunctionDescriptor fluid_midi_event_get_lyrics$descriptor() {
        return fluid_midi_event_get_lyrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_lyrics(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static MethodHandle fluid_midi_event_get_lyrics$handle() {
        return fluid_midi_event_get_lyrics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_event_get_lyrics(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static MemorySegment fluid_midi_event_get_lyrics$address() {
        return fluid_midi_event_get_lyrics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_event_get_lyrics(fluid_midi_event_t *evt, void **data, int *size)
     * }
     */
    public static int fluid_midi_event_get_lyrics(MemorySegment evt, MemorySegment data, MemorySegment size) {
        var mh$ = fluid_midi_event_get_lyrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_event_get_lyrics", evt, data, size);
            }
            return (int)mh$.invokeExact(evt, data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_MIDI_ROUTER_RULE_NOTE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_NOTE = 0
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_NOTE() {
        return FLUID_MIDI_ROUTER_RULE_NOTE;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_CC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_CC = 1
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_CC() {
        return FLUID_MIDI_ROUTER_RULE_CC;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_PROG_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_PROG_CHANGE = 2
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_PROG_CHANGE() {
        return FLUID_MIDI_ROUTER_RULE_PROG_CHANGE;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_PITCH_BEND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_PITCH_BEND = 3
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_PITCH_BEND() {
        return FLUID_MIDI_ROUTER_RULE_PITCH_BEND;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE = 4
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE() {
        return FLUID_MIDI_ROUTER_RULE_CHANNEL_PRESSURE;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE = 5
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE() {
        return FLUID_MIDI_ROUTER_RULE_KEY_PRESSURE;
    }
    private static final int FLUID_MIDI_ROUTER_RULE_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FLUID_MIDI_ROUTER_RULE_COUNT = 6
     * }
     */
    public static int FLUID_MIDI_ROUTER_RULE_COUNT() {
        return FLUID_MIDI_ROUTER_RULE_COUNT;
    }

    private static class new_fluid_midi_router {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_midi_router");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_midi_router_t *new_fluid_midi_router(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static FunctionDescriptor new_fluid_midi_router$descriptor() {
        return new_fluid_midi_router.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_midi_router_t *new_fluid_midi_router(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MethodHandle new_fluid_midi_router$handle() {
        return new_fluid_midi_router.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_midi_router_t *new_fluid_midi_router(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MemorySegment new_fluid_midi_router$address() {
        return new_fluid_midi_router.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_midi_router_t *new_fluid_midi_router(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MemorySegment new_fluid_midi_router(MemorySegment settings, MemorySegment handler, MemorySegment event_handler_data) {
        var mh$ = new_fluid_midi_router.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_midi_router", settings, handler, event_handler_data);
            }
            return (MemorySegment)mh$.invokeExact(settings, handler, event_handler_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_midi_router {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_midi_router");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router(fluid_midi_router_t *handler)
     * }
     */
    public static FunctionDescriptor delete_fluid_midi_router$descriptor() {
        return delete_fluid_midi_router.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router(fluid_midi_router_t *handler)
     * }
     */
    public static MethodHandle delete_fluid_midi_router$handle() {
        return delete_fluid_midi_router.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router(fluid_midi_router_t *handler)
     * }
     */
    public static MemorySegment delete_fluid_midi_router$address() {
        return delete_fluid_midi_router.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_midi_router(fluid_midi_router_t *handler)
     * }
     */
    public static void delete_fluid_midi_router(MemorySegment handler) {
        var mh$ = delete_fluid_midi_router.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_midi_router", handler);
            }
            mh$.invokeExact(handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_set_default_rules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_set_default_rules");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_router_set_default_rules(fluid_midi_router_t *router)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_set_default_rules$descriptor() {
        return fluid_midi_router_set_default_rules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_router_set_default_rules(fluid_midi_router_t *router)
     * }
     */
    public static MethodHandle fluid_midi_router_set_default_rules$handle() {
        return fluid_midi_router_set_default_rules.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_router_set_default_rules(fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment fluid_midi_router_set_default_rules$address() {
        return fluid_midi_router_set_default_rules.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_router_set_default_rules(fluid_midi_router_t *router)
     * }
     */
    public static int fluid_midi_router_set_default_rules(MemorySegment router) {
        var mh$ = fluid_midi_router_set_default_rules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_set_default_rules", router);
            }
            return (int)mh$.invokeExact(router);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_clear_rules {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_clear_rules");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_router_clear_rules(fluid_midi_router_t *router)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_clear_rules$descriptor() {
        return fluid_midi_router_clear_rules.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_router_clear_rules(fluid_midi_router_t *router)
     * }
     */
    public static MethodHandle fluid_midi_router_clear_rules$handle() {
        return fluid_midi_router_clear_rules.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_router_clear_rules(fluid_midi_router_t *router)
     * }
     */
    public static MemorySegment fluid_midi_router_clear_rules$address() {
        return fluid_midi_router_clear_rules.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_router_clear_rules(fluid_midi_router_t *router)
     * }
     */
    public static int fluid_midi_router_clear_rules(MemorySegment router) {
        var mh$ = fluid_midi_router_clear_rules.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_clear_rules", router);
            }
            return (int)mh$.invokeExact(router);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_add_rule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_add_rule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_router_add_rule(fluid_midi_router_t *router, fluid_midi_router_rule_t *rule, int type)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_add_rule$descriptor() {
        return fluid_midi_router_add_rule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_router_add_rule(fluid_midi_router_t *router, fluid_midi_router_rule_t *rule, int type)
     * }
     */
    public static MethodHandle fluid_midi_router_add_rule$handle() {
        return fluid_midi_router_add_rule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_router_add_rule(fluid_midi_router_t *router, fluid_midi_router_rule_t *rule, int type)
     * }
     */
    public static MemorySegment fluid_midi_router_add_rule$address() {
        return fluid_midi_router_add_rule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_router_add_rule(fluid_midi_router_t *router, fluid_midi_router_rule_t *rule, int type)
     * }
     */
    public static int fluid_midi_router_add_rule(MemorySegment router, MemorySegment rule, int type) {
        var mh$ = fluid_midi_router_add_rule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_add_rule", router, rule, type);
            }
            return (int)mh$.invokeExact(router, rule, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_midi_router_rule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_midi_router_rule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_midi_router_rule_t *new_fluid_midi_router_rule()
     * }
     */
    public static FunctionDescriptor new_fluid_midi_router_rule$descriptor() {
        return new_fluid_midi_router_rule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_midi_router_rule_t *new_fluid_midi_router_rule()
     * }
     */
    public static MethodHandle new_fluid_midi_router_rule$handle() {
        return new_fluid_midi_router_rule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_midi_router_rule_t *new_fluid_midi_router_rule()
     * }
     */
    public static MemorySegment new_fluid_midi_router_rule$address() {
        return new_fluid_midi_router_rule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_midi_router_rule_t *new_fluid_midi_router_rule()
     * }
     */
    public static MemorySegment new_fluid_midi_router_rule() {
        var mh$ = new_fluid_midi_router_rule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_midi_router_rule");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_midi_router_rule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_midi_router_rule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router_rule(fluid_midi_router_rule_t *rule)
     * }
     */
    public static FunctionDescriptor delete_fluid_midi_router_rule$descriptor() {
        return delete_fluid_midi_router_rule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router_rule(fluid_midi_router_rule_t *rule)
     * }
     */
    public static MethodHandle delete_fluid_midi_router_rule$handle() {
        return delete_fluid_midi_router_rule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_midi_router_rule(fluid_midi_router_rule_t *rule)
     * }
     */
    public static MemorySegment delete_fluid_midi_router_rule$address() {
        return delete_fluid_midi_router_rule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_midi_router_rule(fluid_midi_router_rule_t *rule)
     * }
     */
    public static void delete_fluid_midi_router_rule(MemorySegment rule) {
        var mh$ = delete_fluid_midi_router_rule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_midi_router_rule", rule);
            }
            mh$.invokeExact(rule);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_rule_set_chan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_rule_set_chan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_chan(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_rule_set_chan$descriptor() {
        return fluid_midi_router_rule_set_chan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_chan(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MethodHandle fluid_midi_router_rule_set_chan$handle() {
        return fluid_midi_router_rule_set_chan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_chan(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MemorySegment fluid_midi_router_rule_set_chan$address() {
        return fluid_midi_router_rule_set_chan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_chan(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static void fluid_midi_router_rule_set_chan(MemorySegment rule, int min, int max, float mul, int add) {
        var mh$ = fluid_midi_router_rule_set_chan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_rule_set_chan", rule, min, max, mul, add);
            }
            mh$.invokeExact(rule, min, max, mul, add);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_rule_set_param1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_rule_set_param1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param1(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_rule_set_param1$descriptor() {
        return fluid_midi_router_rule_set_param1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param1(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MethodHandle fluid_midi_router_rule_set_param1$handle() {
        return fluid_midi_router_rule_set_param1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param1(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MemorySegment fluid_midi_router_rule_set_param1$address() {
        return fluid_midi_router_rule_set_param1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param1(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static void fluid_midi_router_rule_set_param1(MemorySegment rule, int min, int max, float mul, int add) {
        var mh$ = fluid_midi_router_rule_set_param1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_rule_set_param1", rule, min, max, mul, add);
            }
            mh$.invokeExact(rule, min, max, mul, add);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_rule_set_param2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_rule_set_param2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param2(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_rule_set_param2$descriptor() {
        return fluid_midi_router_rule_set_param2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param2(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MethodHandle fluid_midi_router_rule_set_param2$handle() {
        return fluid_midi_router_rule_set_param2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param2(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static MemorySegment fluid_midi_router_rule_set_param2$address() {
        return fluid_midi_router_rule_set_param2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_midi_router_rule_set_param2(fluid_midi_router_rule_t *rule, int min, int max, float mul, int add)
     * }
     */
    public static void fluid_midi_router_rule_set_param2(MemorySegment rule, int min, int max, float mul, int add) {
        var mh$ = fluid_midi_router_rule_set_param2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_rule_set_param2", rule, min, max, mul, add);
            }
            mh$.invokeExact(rule, min, max, mul, add);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_router_handle_midi_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_router_handle_midi_event");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_router_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor fluid_midi_router_handle_midi_event$descriptor() {
        return fluid_midi_router_handle_midi_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_router_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle fluid_midi_router_handle_midi_event$handle() {
        return fluid_midi_router_handle_midi_event.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_router_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment fluid_midi_router_handle_midi_event$address() {
        return fluid_midi_router_handle_midi_event.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_router_handle_midi_event(void *data, fluid_midi_event_t *event)
     * }
     */
    public static int fluid_midi_router_handle_midi_event(MemorySegment data, MemorySegment event) {
        var mh$ = fluid_midi_router_handle_midi_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_router_handle_midi_event", data, event);
            }
            return (int)mh$.invokeExact(data, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_dump_prerouter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_dump_prerouter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_dump_prerouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor fluid_midi_dump_prerouter$descriptor() {
        return fluid_midi_dump_prerouter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_dump_prerouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle fluid_midi_dump_prerouter$handle() {
        return fluid_midi_dump_prerouter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_dump_prerouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment fluid_midi_dump_prerouter$address() {
        return fluid_midi_dump_prerouter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_dump_prerouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static int fluid_midi_dump_prerouter(MemorySegment data, MemorySegment event) {
        var mh$ = fluid_midi_dump_prerouter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_dump_prerouter", data, event);
            }
            return (int)mh$.invokeExact(data, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_midi_dump_postrouter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_midi_dump_postrouter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_midi_dump_postrouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor fluid_midi_dump_postrouter$descriptor() {
        return fluid_midi_dump_postrouter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_midi_dump_postrouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle fluid_midi_dump_postrouter$handle() {
        return fluid_midi_dump_postrouter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_midi_dump_postrouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment fluid_midi_dump_postrouter$address() {
        return fluid_midi_dump_postrouter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_midi_dump_postrouter(void *data, fluid_midi_event_t *event)
     * }
     */
    public static int fluid_midi_dump_postrouter(MemorySegment data, MemorySegment event) {
        var mh$ = fluid_midi_dump_postrouter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_midi_dump_postrouter", data, event);
            }
            return (int)mh$.invokeExact(data, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_midi_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_midi_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_midi_driver_t *new_fluid_midi_driver(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static FunctionDescriptor new_fluid_midi_driver$descriptor() {
        return new_fluid_midi_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_midi_driver_t *new_fluid_midi_driver(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MethodHandle new_fluid_midi_driver$handle() {
        return new_fluid_midi_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_midi_driver_t *new_fluid_midi_driver(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MemorySegment new_fluid_midi_driver$address() {
        return new_fluid_midi_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_midi_driver_t *new_fluid_midi_driver(fluid_settings_t *settings, handle_midi_event_func_t handler, void *event_handler_data)
     * }
     */
    public static MemorySegment new_fluid_midi_driver(MemorySegment settings, MemorySegment handler, MemorySegment event_handler_data) {
        var mh$ = new_fluid_midi_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_midi_driver", settings, handler, event_handler_data);
            }
            return (MemorySegment)mh$.invokeExact(settings, handler, event_handler_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_midi_driver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_midi_driver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_midi_driver(fluid_midi_driver_t *driver)
     * }
     */
    public static FunctionDescriptor delete_fluid_midi_driver$descriptor() {
        return delete_fluid_midi_driver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_midi_driver(fluid_midi_driver_t *driver)
     * }
     */
    public static MethodHandle delete_fluid_midi_driver$handle() {
        return delete_fluid_midi_driver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_midi_driver(fluid_midi_driver_t *driver)
     * }
     */
    public static MemorySegment delete_fluid_midi_driver$address() {
        return delete_fluid_midi_driver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_midi_driver(fluid_midi_driver_t *driver)
     * }
     */
    public static void delete_fluid_midi_driver(MemorySegment driver) {
        var mh$ = delete_fluid_midi_driver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_midi_driver", driver);
            }
            mh$.invokeExact(driver);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_PLAYER_READY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_status.FLUID_PLAYER_READY = 0
     * }
     */
    public static int FLUID_PLAYER_READY() {
        return FLUID_PLAYER_READY;
    }
    private static final int FLUID_PLAYER_PLAYING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_status.FLUID_PLAYER_PLAYING = 1
     * }
     */
    public static int FLUID_PLAYER_PLAYING() {
        return FLUID_PLAYER_PLAYING;
    }
    private static final int FLUID_PLAYER_STOPPING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_status.FLUID_PLAYER_STOPPING = 2
     * }
     */
    public static int FLUID_PLAYER_STOPPING() {
        return FLUID_PLAYER_STOPPING;
    }
    private static final int FLUID_PLAYER_DONE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_status.FLUID_PLAYER_DONE = 3
     * }
     */
    public static int FLUID_PLAYER_DONE() {
        return FLUID_PLAYER_DONE;
    }
    private static final int FLUID_PLAYER_TEMPO_INTERNAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_set_tempo_type.FLUID_PLAYER_TEMPO_INTERNAL = 0
     * }
     */
    public static int FLUID_PLAYER_TEMPO_INTERNAL() {
        return FLUID_PLAYER_TEMPO_INTERNAL;
    }
    private static final int FLUID_PLAYER_TEMPO_EXTERNAL_BPM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_set_tempo_type.FLUID_PLAYER_TEMPO_EXTERNAL_BPM = 1
     * }
     */
    public static int FLUID_PLAYER_TEMPO_EXTERNAL_BPM() {
        return FLUID_PLAYER_TEMPO_EXTERNAL_BPM;
    }
    private static final int FLUID_PLAYER_TEMPO_EXTERNAL_MIDI = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_set_tempo_type.FLUID_PLAYER_TEMPO_EXTERNAL_MIDI = 2
     * }
     */
    public static int FLUID_PLAYER_TEMPO_EXTERNAL_MIDI() {
        return FLUID_PLAYER_TEMPO_EXTERNAL_MIDI;
    }
    private static final int FLUID_PLAYER_TEMPO_NBR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_player_set_tempo_type.FLUID_PLAYER_TEMPO_NBR = 3
     * }
     */
    public static int FLUID_PLAYER_TEMPO_NBR() {
        return FLUID_PLAYER_TEMPO_NBR;
    }

    private static class new_fluid_player {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_player");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_player_t *new_fluid_player(fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor new_fluid_player$descriptor() {
        return new_fluid_player.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_player_t *new_fluid_player(fluid_synth_t *synth)
     * }
     */
    public static MethodHandle new_fluid_player$handle() {
        return new_fluid_player.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_player_t *new_fluid_player(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_player$address() {
        return new_fluid_player.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_player_t *new_fluid_player(fluid_synth_t *synth)
     * }
     */
    public static MemorySegment new_fluid_player(MemorySegment synth) {
        var mh$ = new_fluid_player.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_player", synth);
            }
            return (MemorySegment)mh$.invokeExact(synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_player {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_player");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_player(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor delete_fluid_player$descriptor() {
        return delete_fluid_player.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_player(fluid_player_t *player)
     * }
     */
    public static MethodHandle delete_fluid_player$handle() {
        return delete_fluid_player.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_player(fluid_player_t *player)
     * }
     */
    public static MemorySegment delete_fluid_player$address() {
        return delete_fluid_player.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_player(fluid_player_t *player)
     * }
     */
    public static void delete_fluid_player(MemorySegment player) {
        var mh$ = delete_fluid_player.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_player", player);
            }
            mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_add(fluid_player_t *player, const char *midifile)
     * }
     */
    public static FunctionDescriptor fluid_player_add$descriptor() {
        return fluid_player_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_add(fluid_player_t *player, const char *midifile)
     * }
     */
    public static MethodHandle fluid_player_add$handle() {
        return fluid_player_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_add(fluid_player_t *player, const char *midifile)
     * }
     */
    public static MemorySegment fluid_player_add$address() {
        return fluid_player_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_add(fluid_player_t *player, const char *midifile)
     * }
     */
    public static int fluid_player_add(MemorySegment player, MemorySegment midifile) {
        var mh$ = fluid_player_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_add", player, midifile);
            }
            return (int)mh$.invokeExact(player, midifile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_add_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_LONG
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_add_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_add_mem(fluid_player_t *player, const void *buffer, size_t len)
     * }
     */
    public static FunctionDescriptor fluid_player_add_mem$descriptor() {
        return fluid_player_add_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_add_mem(fluid_player_t *player, const void *buffer, size_t len)
     * }
     */
    public static MethodHandle fluid_player_add_mem$handle() {
        return fluid_player_add_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_add_mem(fluid_player_t *player, const void *buffer, size_t len)
     * }
     */
    public static MemorySegment fluid_player_add_mem$address() {
        return fluid_player_add_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_add_mem(fluid_player_t *player, const void *buffer, size_t len)
     * }
     */
    public static int fluid_player_add_mem(MemorySegment player, MemorySegment buffer, long len) {
        var mh$ = fluid_player_add_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_add_mem", player, buffer, len);
            }
            return (int)mh$.invokeExact(player, buffer, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_play {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_play");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_play(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_play$descriptor() {
        return fluid_player_play.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_play(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_play$handle() {
        return fluid_player_play.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_play(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_play$address() {
        return fluid_player_play.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_play(fluid_player_t *player)
     * }
     */
    public static int fluid_player_play(MemorySegment player) {
        var mh$ = fluid_player_play.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_play", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_stop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_stop(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_stop$descriptor() {
        return fluid_player_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_stop(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_stop$handle() {
        return fluid_player_stop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_stop(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_stop$address() {
        return fluid_player_stop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_stop(fluid_player_t *player)
     * }
     */
    public static int fluid_player_stop(MemorySegment player) {
        var mh$ = fluid_player_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_stop", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_join");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_join(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_join$descriptor() {
        return fluid_player_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_join(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_join$handle() {
        return fluid_player_join.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_join(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_join$address() {
        return fluid_player_join.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_join(fluid_player_t *player)
     * }
     */
    public static int fluid_player_join(MemorySegment player) {
        var mh$ = fluid_player_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_join", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_loop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_loop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_loop(fluid_player_t *player, int loop)
     * }
     */
    public static FunctionDescriptor fluid_player_set_loop$descriptor() {
        return fluid_player_set_loop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_loop(fluid_player_t *player, int loop)
     * }
     */
    public static MethodHandle fluid_player_set_loop$handle() {
        return fluid_player_set_loop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_loop(fluid_player_t *player, int loop)
     * }
     */
    public static MemorySegment fluid_player_set_loop$address() {
        return fluid_player_set_loop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_loop(fluid_player_t *player, int loop)
     * }
     */
    public static int fluid_player_set_loop(MemorySegment player, int loop) {
        var mh$ = fluid_player_set_loop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_loop", player, loop);
            }
            return (int)mh$.invokeExact(player, loop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_tempo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_tempo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_tempo(fluid_player_t *player, int tempo_type, double tempo)
     * }
     */
    public static FunctionDescriptor fluid_player_set_tempo$descriptor() {
        return fluid_player_set_tempo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_tempo(fluid_player_t *player, int tempo_type, double tempo)
     * }
     */
    public static MethodHandle fluid_player_set_tempo$handle() {
        return fluid_player_set_tempo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_tempo(fluid_player_t *player, int tempo_type, double tempo)
     * }
     */
    public static MemorySegment fluid_player_set_tempo$address() {
        return fluid_player_set_tempo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_tempo(fluid_player_t *player, int tempo_type, double tempo)
     * }
     */
    public static int fluid_player_set_tempo(MemorySegment player, int tempo_type, double tempo) {
        var mh$ = fluid_player_set_tempo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_tempo", player, tempo_type, tempo);
            }
            return (int)mh$.invokeExact(player, tempo_type, tempo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_midi_tempo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_midi_tempo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_midi_tempo(fluid_player_t *player, int tempo)
     * }
     */
    public static FunctionDescriptor fluid_player_set_midi_tempo$descriptor() {
        return fluid_player_set_midi_tempo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_midi_tempo(fluid_player_t *player, int tempo)
     * }
     */
    public static MethodHandle fluid_player_set_midi_tempo$handle() {
        return fluid_player_set_midi_tempo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_midi_tempo(fluid_player_t *player, int tempo)
     * }
     */
    public static MemorySegment fluid_player_set_midi_tempo$address() {
        return fluid_player_set_midi_tempo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_midi_tempo(fluid_player_t *player, int tempo)
     * }
     */
    public static int fluid_player_set_midi_tempo(MemorySegment player, int tempo) {
        var mh$ = fluid_player_set_midi_tempo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_midi_tempo", player, tempo);
            }
            return (int)mh$.invokeExact(player, tempo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_bpm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_bpm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_bpm(fluid_player_t *player, int bpm)
     * }
     */
    public static FunctionDescriptor fluid_player_set_bpm$descriptor() {
        return fluid_player_set_bpm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_bpm(fluid_player_t *player, int bpm)
     * }
     */
    public static MethodHandle fluid_player_set_bpm$handle() {
        return fluid_player_set_bpm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_bpm(fluid_player_t *player, int bpm)
     * }
     */
    public static MemorySegment fluid_player_set_bpm$address() {
        return fluid_player_set_bpm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_bpm(fluid_player_t *player, int bpm)
     * }
     */
    public static int fluid_player_set_bpm(MemorySegment player, int bpm) {
        var mh$ = fluid_player_set_bpm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_bpm", player, bpm);
            }
            return (int)mh$.invokeExact(player, bpm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_playback_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_playback_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_playback_callback(fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data)
     * }
     */
    public static FunctionDescriptor fluid_player_set_playback_callback$descriptor() {
        return fluid_player_set_playback_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_playback_callback(fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data)
     * }
     */
    public static MethodHandle fluid_player_set_playback_callback$handle() {
        return fluid_player_set_playback_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_playback_callback(fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data)
     * }
     */
    public static MemorySegment fluid_player_set_playback_callback$address() {
        return fluid_player_set_playback_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_playback_callback(fluid_player_t *player, handle_midi_event_func_t handler, void *handler_data)
     * }
     */
    public static int fluid_player_set_playback_callback(MemorySegment player, MemorySegment handler, MemorySegment handler_data) {
        var mh$ = fluid_player_set_playback_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_playback_callback", player, handler, handler_data);
            }
            return (int)mh$.invokeExact(player, handler, handler_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_set_tick_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_set_tick_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_set_tick_callback(fluid_player_t *player, handle_midi_tick_func_t handler, void *handler_data)
     * }
     */
    public static FunctionDescriptor fluid_player_set_tick_callback$descriptor() {
        return fluid_player_set_tick_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_set_tick_callback(fluid_player_t *player, handle_midi_tick_func_t handler, void *handler_data)
     * }
     */
    public static MethodHandle fluid_player_set_tick_callback$handle() {
        return fluid_player_set_tick_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_set_tick_callback(fluid_player_t *player, handle_midi_tick_func_t handler, void *handler_data)
     * }
     */
    public static MemorySegment fluid_player_set_tick_callback$address() {
        return fluid_player_set_tick_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_set_tick_callback(fluid_player_t *player, handle_midi_tick_func_t handler, void *handler_data)
     * }
     */
    public static int fluid_player_set_tick_callback(MemorySegment player, MemorySegment handler, MemorySegment handler_data) {
        var mh$ = fluid_player_set_tick_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_set_tick_callback", player, handler, handler_data);
            }
            return (int)mh$.invokeExact(player, handler, handler_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_status(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_status$descriptor() {
        return fluid_player_get_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_status(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_status$handle() {
        return fluid_player_get_status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_status(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_status$address() {
        return fluid_player_get_status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_status(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_status(MemorySegment player) {
        var mh$ = fluid_player_get_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_status", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_current_tick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_current_tick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_current_tick(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_current_tick$descriptor() {
        return fluid_player_get_current_tick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_current_tick(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_current_tick$handle() {
        return fluid_player_get_current_tick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_current_tick(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_current_tick$address() {
        return fluid_player_get_current_tick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_current_tick(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_current_tick(MemorySegment player) {
        var mh$ = fluid_player_get_current_tick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_current_tick", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_total_ticks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_total_ticks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_total_ticks(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_total_ticks$descriptor() {
        return fluid_player_get_total_ticks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_total_ticks(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_total_ticks$handle() {
        return fluid_player_get_total_ticks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_total_ticks(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_total_ticks$address() {
        return fluid_player_get_total_ticks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_total_ticks(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_total_ticks(MemorySegment player) {
        var mh$ = fluid_player_get_total_ticks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_total_ticks", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_bpm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_bpm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_bpm(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_bpm$descriptor() {
        return fluid_player_get_bpm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_bpm(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_bpm$handle() {
        return fluid_player_get_bpm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_bpm(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_bpm$address() {
        return fluid_player_get_bpm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_bpm(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_bpm(MemorySegment player) {
        var mh$ = fluid_player_get_bpm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_bpm", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_division {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_division");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_division(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_division$descriptor() {
        return fluid_player_get_division.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_division(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_division$handle() {
        return fluid_player_get_division.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_division(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_division$address() {
        return fluid_player_get_division.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_division(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_division(MemorySegment player) {
        var mh$ = fluid_player_get_division.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_division", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_get_midi_tempo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_get_midi_tempo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_get_midi_tempo(fluid_player_t *player)
     * }
     */
    public static FunctionDescriptor fluid_player_get_midi_tempo$descriptor() {
        return fluid_player_get_midi_tempo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_get_midi_tempo(fluid_player_t *player)
     * }
     */
    public static MethodHandle fluid_player_get_midi_tempo$handle() {
        return fluid_player_get_midi_tempo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_get_midi_tempo(fluid_player_t *player)
     * }
     */
    public static MemorySegment fluid_player_get_midi_tempo$address() {
        return fluid_player_get_midi_tempo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_get_midi_tempo(fluid_player_t *player)
     * }
     */
    public static int fluid_player_get_midi_tempo(MemorySegment player) {
        var mh$ = fluid_player_get_midi_tempo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_get_midi_tempo", player);
            }
            return (int)mh$.invokeExact(player);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_player_seek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_player_seek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_player_seek(fluid_player_t *player, int ticks)
     * }
     */
    public static FunctionDescriptor fluid_player_seek$descriptor() {
        return fluid_player_seek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_player_seek(fluid_player_t *player, int ticks)
     * }
     */
    public static MethodHandle fluid_player_seek$handle() {
        return fluid_player_seek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_player_seek(fluid_player_t *player, int ticks)
     * }
     */
    public static MemorySegment fluid_player_seek$address() {
        return fluid_player_seek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_player_seek(fluid_player_t *player, int ticks)
     * }
     */
    public static int fluid_player_seek(MemorySegment player, int ticks) {
        var mh$ = fluid_player_seek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_player_seek", player, ticks);
            }
            return (int)mh$.invokeExact(player, ticks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_sequencer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_sequencer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer()
     * }
     */
    public static FunctionDescriptor new_fluid_sequencer$descriptor() {
        return new_fluid_sequencer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer()
     * }
     */
    public static MethodHandle new_fluid_sequencer$handle() {
        return new_fluid_sequencer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer()
     * }
     */
    public static MemorySegment new_fluid_sequencer$address() {
        return new_fluid_sequencer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer()
     * }
     */
    public static MemorySegment new_fluid_sequencer() {
        var mh$ = new_fluid_sequencer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_sequencer");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class new_fluid_sequencer2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_sequencer2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer2(int use_system_timer)
     * }
     */
    public static FunctionDescriptor new_fluid_sequencer2$descriptor() {
        return new_fluid_sequencer2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer2(int use_system_timer)
     * }
     */
    public static MethodHandle new_fluid_sequencer2$handle() {
        return new_fluid_sequencer2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer2(int use_system_timer)
     * }
     */
    public static MemorySegment new_fluid_sequencer2$address() {
        return new_fluid_sequencer2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_sequencer_t *new_fluid_sequencer2(int use_system_timer)
     * }
     */
    public static MemorySegment new_fluid_sequencer2(int use_system_timer) {
        var mh$ = new_fluid_sequencer2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_sequencer2", use_system_timer);
            }
            return (MemorySegment)mh$.invokeExact(use_system_timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_sequencer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_sequencer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_sequencer(fluid_sequencer_t *seq)
     * }
     */
    public static FunctionDescriptor delete_fluid_sequencer$descriptor() {
        return delete_fluid_sequencer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_sequencer(fluid_sequencer_t *seq)
     * }
     */
    public static MethodHandle delete_fluid_sequencer$handle() {
        return delete_fluid_sequencer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_sequencer(fluid_sequencer_t *seq)
     * }
     */
    public static MemorySegment delete_fluid_sequencer$address() {
        return delete_fluid_sequencer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_sequencer(fluid_sequencer_t *seq)
     * }
     */
    public static void delete_fluid_sequencer(MemorySegment seq) {
        var mh$ = delete_fluid_sequencer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_sequencer", seq);
            }
            mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_get_use_system_timer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_get_use_system_timer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sequencer_get_use_system_timer(fluid_sequencer_t *seq)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_get_use_system_timer$descriptor() {
        return fluid_sequencer_get_use_system_timer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sequencer_get_use_system_timer(fluid_sequencer_t *seq)
     * }
     */
    public static MethodHandle fluid_sequencer_get_use_system_timer$handle() {
        return fluid_sequencer_get_use_system_timer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sequencer_get_use_system_timer(fluid_sequencer_t *seq)
     * }
     */
    public static MemorySegment fluid_sequencer_get_use_system_timer$address() {
        return fluid_sequencer_get_use_system_timer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sequencer_get_use_system_timer(fluid_sequencer_t *seq)
     * }
     */
    public static int fluid_sequencer_get_use_system_timer(MemorySegment seq) {
        var mh$ = fluid_sequencer_get_use_system_timer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_get_use_system_timer", seq);
            }
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_register_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_register_client");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_client(fluid_sequencer_t *seq, const char *name, fluid_event_callback_t callback, void *data)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_register_client$descriptor() {
        return fluid_sequencer_register_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_client(fluid_sequencer_t *seq, const char *name, fluid_event_callback_t callback, void *data)
     * }
     */
    public static MethodHandle fluid_sequencer_register_client$handle() {
        return fluid_sequencer_register_client.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_client(fluid_sequencer_t *seq, const char *name, fluid_event_callback_t callback, void *data)
     * }
     */
    public static MemorySegment fluid_sequencer_register_client$address() {
        return fluid_sequencer_register_client.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_client(fluid_sequencer_t *seq, const char *name, fluid_event_callback_t callback, void *data)
     * }
     */
    public static short fluid_sequencer_register_client(MemorySegment seq, MemorySegment name, MemorySegment callback, MemorySegment data) {
        var mh$ = fluid_sequencer_register_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_register_client", seq, name, callback, data);
            }
            return (short)mh$.invokeExact(seq, name, callback, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_unregister_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_unregister_client");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sequencer_unregister_client(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_unregister_client$descriptor() {
        return fluid_sequencer_unregister_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sequencer_unregister_client(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MethodHandle fluid_sequencer_unregister_client$handle() {
        return fluid_sequencer_unregister_client.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sequencer_unregister_client(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MemorySegment fluid_sequencer_unregister_client$address() {
        return fluid_sequencer_unregister_client.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sequencer_unregister_client(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static void fluid_sequencer_unregister_client(MemorySegment seq, short id) {
        var mh$ = fluid_sequencer_unregister_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_unregister_client", seq, id);
            }
            mh$.invokeExact(seq, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_count_clients {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_count_clients");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sequencer_count_clients(fluid_sequencer_t *seq)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_count_clients$descriptor() {
        return fluid_sequencer_count_clients.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sequencer_count_clients(fluid_sequencer_t *seq)
     * }
     */
    public static MethodHandle fluid_sequencer_count_clients$handle() {
        return fluid_sequencer_count_clients.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sequencer_count_clients(fluid_sequencer_t *seq)
     * }
     */
    public static MemorySegment fluid_sequencer_count_clients$address() {
        return fluid_sequencer_count_clients.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sequencer_count_clients(fluid_sequencer_t *seq)
     * }
     */
    public static int fluid_sequencer_count_clients(MemorySegment seq) {
        var mh$ = fluid_sequencer_count_clients.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_count_clients", seq);
            }
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_get_client_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_get_client_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_get_client_id(fluid_sequencer_t *seq, int index)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_get_client_id$descriptor() {
        return fluid_sequencer_get_client_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_get_client_id(fluid_sequencer_t *seq, int index)
     * }
     */
    public static MethodHandle fluid_sequencer_get_client_id$handle() {
        return fluid_sequencer_get_client_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_get_client_id(fluid_sequencer_t *seq, int index)
     * }
     */
    public static MemorySegment fluid_sequencer_get_client_id$address() {
        return fluid_sequencer_get_client_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_get_client_id(fluid_sequencer_t *seq, int index)
     * }
     */
    public static short fluid_sequencer_get_client_id(MemorySegment seq, int index) {
        var mh$ = fluid_sequencer_get_client_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_get_client_id", seq, index);
            }
            return (short)mh$.invokeExact(seq, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_get_client_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_get_client_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fluid_sequencer_get_client_name(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_get_client_name$descriptor() {
        return fluid_sequencer_get_client_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fluid_sequencer_get_client_name(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MethodHandle fluid_sequencer_get_client_name$handle() {
        return fluid_sequencer_get_client_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fluid_sequencer_get_client_name(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MemorySegment fluid_sequencer_get_client_name$address() {
        return fluid_sequencer_get_client_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fluid_sequencer_get_client_name(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MemorySegment fluid_sequencer_get_client_name(MemorySegment seq, short id) {
        var mh$ = fluid_sequencer_get_client_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_get_client_name", seq, id);
            }
            return (MemorySegment)mh$.invokeExact(seq, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_client_is_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_client_is_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sequencer_client_is_dest(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_client_is_dest$descriptor() {
        return fluid_sequencer_client_is_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sequencer_client_is_dest(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MethodHandle fluid_sequencer_client_is_dest$handle() {
        return fluid_sequencer_client_is_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sequencer_client_is_dest(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static MemorySegment fluid_sequencer_client_is_dest$address() {
        return fluid_sequencer_client_is_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sequencer_client_is_dest(fluid_sequencer_t *seq, fluid_seq_id_t id)
     * }
     */
    public static int fluid_sequencer_client_is_dest(MemorySegment seq, short id) {
        var mh$ = fluid_sequencer_client_is_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_client_is_dest", seq, id);
            }
            return (int)mh$.invokeExact(seq, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_process {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_process");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sequencer_process(fluid_sequencer_t *seq, unsigned int msec)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_process$descriptor() {
        return fluid_sequencer_process.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sequencer_process(fluid_sequencer_t *seq, unsigned int msec)
     * }
     */
    public static MethodHandle fluid_sequencer_process$handle() {
        return fluid_sequencer_process.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sequencer_process(fluid_sequencer_t *seq, unsigned int msec)
     * }
     */
    public static MemorySegment fluid_sequencer_process$address() {
        return fluid_sequencer_process.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sequencer_process(fluid_sequencer_t *seq, unsigned int msec)
     * }
     */
    public static void fluid_sequencer_process(MemorySegment seq, int msec) {
        var mh$ = fluid_sequencer_process.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_process", seq, msec);
            }
            mh$.invokeExact(seq, msec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_send_now {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_send_now");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sequencer_send_now(fluid_sequencer_t *seq, fluid_event_t *evt)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_send_now$descriptor() {
        return fluid_sequencer_send_now.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sequencer_send_now(fluid_sequencer_t *seq, fluid_event_t *evt)
     * }
     */
    public static MethodHandle fluid_sequencer_send_now$handle() {
        return fluid_sequencer_send_now.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sequencer_send_now(fluid_sequencer_t *seq, fluid_event_t *evt)
     * }
     */
    public static MemorySegment fluid_sequencer_send_now$address() {
        return fluid_sequencer_send_now.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sequencer_send_now(fluid_sequencer_t *seq, fluid_event_t *evt)
     * }
     */
    public static void fluid_sequencer_send_now(MemorySegment seq, MemorySegment evt) {
        var mh$ = fluid_sequencer_send_now.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_send_now", seq, evt);
            }
            mh$.invokeExact(seq, evt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_send_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_send_at");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sequencer_send_at(fluid_sequencer_t *seq, fluid_event_t *evt, unsigned int time, int absolute)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_send_at$descriptor() {
        return fluid_sequencer_send_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sequencer_send_at(fluid_sequencer_t *seq, fluid_event_t *evt, unsigned int time, int absolute)
     * }
     */
    public static MethodHandle fluid_sequencer_send_at$handle() {
        return fluid_sequencer_send_at.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sequencer_send_at(fluid_sequencer_t *seq, fluid_event_t *evt, unsigned int time, int absolute)
     * }
     */
    public static MemorySegment fluid_sequencer_send_at$address() {
        return fluid_sequencer_send_at.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sequencer_send_at(fluid_sequencer_t *seq, fluid_event_t *evt, unsigned int time, int absolute)
     * }
     */
    public static int fluid_sequencer_send_at(MemorySegment seq, MemorySegment evt, int time, int absolute) {
        var mh$ = fluid_sequencer_send_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_send_at", seq, evt, time, absolute);
            }
            return (int)mh$.invokeExact(seq, evt, time, absolute);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_remove_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_remove_events");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sequencer_remove_events(fluid_sequencer_t *seq, fluid_seq_id_t source, fluid_seq_id_t dest, int type)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_remove_events$descriptor() {
        return fluid_sequencer_remove_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sequencer_remove_events(fluid_sequencer_t *seq, fluid_seq_id_t source, fluid_seq_id_t dest, int type)
     * }
     */
    public static MethodHandle fluid_sequencer_remove_events$handle() {
        return fluid_sequencer_remove_events.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sequencer_remove_events(fluid_sequencer_t *seq, fluid_seq_id_t source, fluid_seq_id_t dest, int type)
     * }
     */
    public static MemorySegment fluid_sequencer_remove_events$address() {
        return fluid_sequencer_remove_events.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sequencer_remove_events(fluid_sequencer_t *seq, fluid_seq_id_t source, fluid_seq_id_t dest, int type)
     * }
     */
    public static void fluid_sequencer_remove_events(MemorySegment seq, short source, short dest, int type) {
        var mh$ = fluid_sequencer_remove_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_remove_events", seq, source, dest, type);
            }
            mh$.invokeExact(seq, source, dest, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_get_tick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_get_tick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int fluid_sequencer_get_tick(fluid_sequencer_t *seq)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_get_tick$descriptor() {
        return fluid_sequencer_get_tick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int fluid_sequencer_get_tick(fluid_sequencer_t *seq)
     * }
     */
    public static MethodHandle fluid_sequencer_get_tick$handle() {
        return fluid_sequencer_get_tick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int fluid_sequencer_get_tick(fluid_sequencer_t *seq)
     * }
     */
    public static MemorySegment fluid_sequencer_get_tick$address() {
        return fluid_sequencer_get_tick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int fluid_sequencer_get_tick(fluid_sequencer_t *seq)
     * }
     */
    public static int fluid_sequencer_get_tick(MemorySegment seq) {
        var mh$ = fluid_sequencer_get_tick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_get_tick", seq);
            }
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_set_time_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_set_time_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_sequencer_set_time_scale(fluid_sequencer_t *seq, double scale)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_set_time_scale$descriptor() {
        return fluid_sequencer_set_time_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_sequencer_set_time_scale(fluid_sequencer_t *seq, double scale)
     * }
     */
    public static MethodHandle fluid_sequencer_set_time_scale$handle() {
        return fluid_sequencer_set_time_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_sequencer_set_time_scale(fluid_sequencer_t *seq, double scale)
     * }
     */
    public static MemorySegment fluid_sequencer_set_time_scale$address() {
        return fluid_sequencer_set_time_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_sequencer_set_time_scale(fluid_sequencer_t *seq, double scale)
     * }
     */
    public static void fluid_sequencer_set_time_scale(MemorySegment seq, double scale) {
        var mh$ = fluid_sequencer_set_time_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_set_time_scale", seq, scale);
            }
            mh$.invokeExact(seq, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_get_time_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_get_time_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_sequencer_get_time_scale(fluid_sequencer_t *seq)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_get_time_scale$descriptor() {
        return fluid_sequencer_get_time_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_sequencer_get_time_scale(fluid_sequencer_t *seq)
     * }
     */
    public static MethodHandle fluid_sequencer_get_time_scale$handle() {
        return fluid_sequencer_get_time_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_sequencer_get_time_scale(fluid_sequencer_t *seq)
     * }
     */
    public static MemorySegment fluid_sequencer_get_time_scale$address() {
        return fluid_sequencer_get_time_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_sequencer_get_time_scale(fluid_sequencer_t *seq)
     * }
     */
    public static double fluid_sequencer_get_time_scale(MemorySegment seq) {
        var mh$ = fluid_sequencer_get_time_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_get_time_scale", seq);
            }
            return (double)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_register_fluidsynth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_SHORT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_register_fluidsynth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_fluidsynth(fluid_sequencer_t *seq, fluid_synth_t *synth)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_register_fluidsynth$descriptor() {
        return fluid_sequencer_register_fluidsynth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_fluidsynth(fluid_sequencer_t *seq, fluid_synth_t *synth)
     * }
     */
    public static MethodHandle fluid_sequencer_register_fluidsynth$handle() {
        return fluid_sequencer_register_fluidsynth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_fluidsynth(fluid_sequencer_t *seq, fluid_synth_t *synth)
     * }
     */
    public static MemorySegment fluid_sequencer_register_fluidsynth$address() {
        return fluid_sequencer_register_fluidsynth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_seq_id_t fluid_sequencer_register_fluidsynth(fluid_sequencer_t *seq, fluid_synth_t *synth)
     * }
     */
    public static short fluid_sequencer_register_fluidsynth(MemorySegment seq, MemorySegment synth) {
        var mh$ = fluid_sequencer_register_fluidsynth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_register_fluidsynth", seq, synth);
            }
            return (short)mh$.invokeExact(seq, synth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_sequencer_add_midi_event_to_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_sequencer_add_midi_event_to_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_sequencer_add_midi_event_to_buffer(void *data, fluid_midi_event_t *event)
     * }
     */
    public static FunctionDescriptor fluid_sequencer_add_midi_event_to_buffer$descriptor() {
        return fluid_sequencer_add_midi_event_to_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_sequencer_add_midi_event_to_buffer(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MethodHandle fluid_sequencer_add_midi_event_to_buffer$handle() {
        return fluid_sequencer_add_midi_event_to_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_sequencer_add_midi_event_to_buffer(void *data, fluid_midi_event_t *event)
     * }
     */
    public static MemorySegment fluid_sequencer_add_midi_event_to_buffer$address() {
        return fluid_sequencer_add_midi_event_to_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_sequencer_add_midi_event_to_buffer(void *data, fluid_midi_event_t *event)
     * }
     */
    public static int fluid_sequencer_add_midi_event_to_buffer(MemorySegment data, MemorySegment event) {
        var mh$ = fluid_sequencer_add_midi_event_to_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_sequencer_add_midi_event_to_buffer", data, event);
            }
            return (int)mh$.invokeExact(data, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_PANIC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.FLUID_PANIC = 0
     * }
     */
    public static int FLUID_PANIC() {
        return FLUID_PANIC;
    }
    private static final int FLUID_ERR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.FLUID_ERR = 1
     * }
     */
    public static int FLUID_ERR() {
        return FLUID_ERR;
    }
    private static final int FLUID_WARN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.FLUID_WARN = 2
     * }
     */
    public static int FLUID_WARN() {
        return FLUID_WARN;
    }
    private static final int FLUID_INFO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.FLUID_INFO = 3
     * }
     */
    public static int FLUID_INFO() {
        return FLUID_INFO;
    }
    private static final int FLUID_DBG = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.FLUID_DBG = 4
     * }
     */
    public static int FLUID_DBG() {
        return FLUID_DBG;
    }
    private static final int LAST_LOG_LEVEL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum fluid_log_level.LAST_LOG_LEVEL = 5
     * }
     */
    public static int LAST_LOG_LEVEL() {
        return LAST_LOG_LEVEL;
    }

    private static class fluid_set_log_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_set_log_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_log_function_t fluid_set_log_function(int level, fluid_log_function_t fun, void *data)
     * }
     */
    public static FunctionDescriptor fluid_set_log_function$descriptor() {
        return fluid_set_log_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_log_function_t fluid_set_log_function(int level, fluid_log_function_t fun, void *data)
     * }
     */
    public static MethodHandle fluid_set_log_function$handle() {
        return fluid_set_log_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_log_function_t fluid_set_log_function(int level, fluid_log_function_t fun, void *data)
     * }
     */
    public static MemorySegment fluid_set_log_function$address() {
        return fluid_set_log_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_log_function_t fluid_set_log_function(int level, fluid_log_function_t fun, void *data)
     * }
     */
    public static MemorySegment fluid_set_log_function(int level, MemorySegment fun, MemorySegment data) {
        var mh$ = fluid_set_log_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_set_log_function", level, fun, data);
            }
            return (MemorySegment)mh$.invokeExact(level, fun, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_default_log_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_default_log_function");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_default_log_function(int level, const char *message, void *data)
     * }
     */
    public static FunctionDescriptor fluid_default_log_function$descriptor() {
        return fluid_default_log_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_default_log_function(int level, const char *message, void *data)
     * }
     */
    public static MethodHandle fluid_default_log_function$handle() {
        return fluid_default_log_function.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_default_log_function(int level, const char *message, void *data)
     * }
     */
    public static MemorySegment fluid_default_log_function$address() {
        return fluid_default_log_function.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_default_log_function(int level, const char *message, void *data)
     * }
     */
    public static void fluid_default_log_function(int level, MemorySegment message, MemorySegment data) {
        var mh$ = fluid_default_log_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_default_log_function", level, message, data);
            }
            mh$.invokeExact(level, message, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fluid_log(int level, const char *fmt, ...)
     * }
     */
    public static class fluid_log {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                fluidsynth_h.C_INT,
                fluidsynth_h.C_INT,
                fluidsynth_h.C_POINTER
            );
        private static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_log");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fluid_log(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fluid_log(int level, const char *fmt, ...)
         * }
         */
        public static fluid_log makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fluid_log(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int level, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fluid_log", level, fmt, x2);
                }
                return (int) spreader.invokeExact(level, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fluid_is_soundfont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_is_soundfont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_is_soundfont(const char *filename)
     * }
     */
    public static FunctionDescriptor fluid_is_soundfont$descriptor() {
        return fluid_is_soundfont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_is_soundfont(const char *filename)
     * }
     */
    public static MethodHandle fluid_is_soundfont$handle() {
        return fluid_is_soundfont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_is_soundfont(const char *filename)
     * }
     */
    public static MemorySegment fluid_is_soundfont$address() {
        return fluid_is_soundfont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_is_soundfont(const char *filename)
     * }
     */
    public static int fluid_is_soundfont(MemorySegment filename) {
        var mh$ = fluid_is_soundfont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_is_soundfont", filename);
            }
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_is_midifile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_is_midifile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_is_midifile(const char *filename)
     * }
     */
    public static FunctionDescriptor fluid_is_midifile$descriptor() {
        return fluid_is_midifile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_is_midifile(const char *filename)
     * }
     */
    public static MethodHandle fluid_is_midifile$handle() {
        return fluid_is_midifile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_is_midifile(const char *filename)
     * }
     */
    public static MemorySegment fluid_is_midifile$address() {
        return fluid_is_midifile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_is_midifile(const char *filename)
     * }
     */
    public static int fluid_is_midifile(MemorySegment filename) {
        var mh$ = fluid_is_midifile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_is_midifile", filename);
            }
            return (int)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_free(void *ptr)
     * }
     */
    public static FunctionDescriptor fluid_free$descriptor() {
        return fluid_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_free(void *ptr)
     * }
     */
    public static MethodHandle fluid_free$handle() {
        return fluid_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_free(void *ptr)
     * }
     */
    public static MemorySegment fluid_free$address() {
        return fluid_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_free(void *ptr)
     * }
     */
    public static void fluid_free(MemorySegment ptr) {
        var mh$ = fluid_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_free", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FLUID_MOD_POSITIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_POSITIVE = 0
     * }
     */
    public static int FLUID_MOD_POSITIVE() {
        return FLUID_MOD_POSITIVE;
    }
    private static final int FLUID_MOD_NEGATIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_NEGATIVE = 1
     * }
     */
    public static int FLUID_MOD_NEGATIVE() {
        return FLUID_MOD_NEGATIVE;
    }
    private static final int FLUID_MOD_UNIPOLAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_UNIPOLAR = 0
     * }
     */
    public static int FLUID_MOD_UNIPOLAR() {
        return FLUID_MOD_UNIPOLAR;
    }
    private static final int FLUID_MOD_BIPOLAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_BIPOLAR = 2
     * }
     */
    public static int FLUID_MOD_BIPOLAR() {
        return FLUID_MOD_BIPOLAR;
    }
    private static final int FLUID_MOD_LINEAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_LINEAR = 0
     * }
     */
    public static int FLUID_MOD_LINEAR() {
        return FLUID_MOD_LINEAR;
    }
    private static final int FLUID_MOD_CONCAVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_CONCAVE = 4
     * }
     */
    public static int FLUID_MOD_CONCAVE() {
        return FLUID_MOD_CONCAVE;
    }
    private static final int FLUID_MOD_CONVEX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_CONVEX = 8
     * }
     */
    public static int FLUID_MOD_CONVEX() {
        return FLUID_MOD_CONVEX;
    }
    private static final int FLUID_MOD_SWITCH = (int)12L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_SWITCH = 12
     * }
     */
    public static int FLUID_MOD_SWITCH() {
        return FLUID_MOD_SWITCH;
    }
    private static final int FLUID_MOD_GC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_GC = 0
     * }
     */
    public static int FLUID_MOD_GC() {
        return FLUID_MOD_GC;
    }
    private static final int FLUID_MOD_CC = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_CC = 16
     * }
     */
    public static int FLUID_MOD_CC() {
        return FLUID_MOD_CC;
    }
    private static final int FLUID_MOD_SIN = (int)128L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_flags.FLUID_MOD_SIN = 128
     * }
     */
    public static int FLUID_MOD_SIN() {
        return FLUID_MOD_SIN;
    }
    private static final int FLUID_MOD_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_NONE = 0
     * }
     */
    public static int FLUID_MOD_NONE() {
        return FLUID_MOD_NONE;
    }
    private static final int FLUID_MOD_VELOCITY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_VELOCITY = 2
     * }
     */
    public static int FLUID_MOD_VELOCITY() {
        return FLUID_MOD_VELOCITY;
    }
    private static final int FLUID_MOD_KEY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_KEY = 3
     * }
     */
    public static int FLUID_MOD_KEY() {
        return FLUID_MOD_KEY;
    }
    private static final int FLUID_MOD_KEYPRESSURE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_KEYPRESSURE = 10
     * }
     */
    public static int FLUID_MOD_KEYPRESSURE() {
        return FLUID_MOD_KEYPRESSURE;
    }
    private static final int FLUID_MOD_CHANNELPRESSURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_CHANNELPRESSURE = 13
     * }
     */
    public static int FLUID_MOD_CHANNELPRESSURE() {
        return FLUID_MOD_CHANNELPRESSURE;
    }
    private static final int FLUID_MOD_PITCHWHEEL = (int)14L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_PITCHWHEEL = 14
     * }
     */
    public static int FLUID_MOD_PITCHWHEEL() {
        return FLUID_MOD_PITCHWHEEL;
    }
    private static final int FLUID_MOD_PITCHWHEELSENS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_mod_src.FLUID_MOD_PITCHWHEELSENS = 16
     * }
     */
    public static int FLUID_MOD_PITCHWHEELSENS() {
        return FLUID_MOD_PITCHWHEELSENS;
    }

    private static class new_fluid_mod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("new_fluid_mod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * fluid_mod_t *new_fluid_mod()
     * }
     */
    public static FunctionDescriptor new_fluid_mod$descriptor() {
        return new_fluid_mod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * fluid_mod_t *new_fluid_mod()
     * }
     */
    public static MethodHandle new_fluid_mod$handle() {
        return new_fluid_mod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * fluid_mod_t *new_fluid_mod()
     * }
     */
    public static MemorySegment new_fluid_mod$address() {
        return new_fluid_mod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * fluid_mod_t *new_fluid_mod()
     * }
     */
    public static MemorySegment new_fluid_mod() {
        var mh$ = new_fluid_mod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("new_fluid_mod");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class delete_fluid_mod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("delete_fluid_mod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void delete_fluid_mod(fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor delete_fluid_mod$descriptor() {
        return delete_fluid_mod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void delete_fluid_mod(fluid_mod_t *mod)
     * }
     */
    public static MethodHandle delete_fluid_mod$handle() {
        return delete_fluid_mod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void delete_fluid_mod(fluid_mod_t *mod)
     * }
     */
    public static MemorySegment delete_fluid_mod$address() {
        return delete_fluid_mod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void delete_fluid_mod(fluid_mod_t *mod)
     * }
     */
    public static void delete_fluid_mod(MemorySegment mod) {
        var mh$ = delete_fluid_mod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("delete_fluid_mod", mod);
            }
            mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_sizeof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_LONG    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_sizeof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t fluid_mod_sizeof()
     * }
     */
    public static FunctionDescriptor fluid_mod_sizeof$descriptor() {
        return fluid_mod_sizeof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t fluid_mod_sizeof()
     * }
     */
    public static MethodHandle fluid_mod_sizeof$handle() {
        return fluid_mod_sizeof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t fluid_mod_sizeof()
     * }
     */
    public static MemorySegment fluid_mod_sizeof$address() {
        return fluid_mod_sizeof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t fluid_mod_sizeof()
     * }
     */
    public static long fluid_mod_sizeof() {
        var mh$ = fluid_mod_sizeof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_sizeof");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_set_source1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_set_source1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_mod_set_source1(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static FunctionDescriptor fluid_mod_set_source1$descriptor() {
        return fluid_mod_set_source1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_mod_set_source1(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static MethodHandle fluid_mod_set_source1$handle() {
        return fluid_mod_set_source1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_mod_set_source1(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static MemorySegment fluid_mod_set_source1$address() {
        return fluid_mod_set_source1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_mod_set_source1(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static void fluid_mod_set_source1(MemorySegment mod, int src, int flags) {
        var mh$ = fluid_mod_set_source1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_set_source1", mod, src, flags);
            }
            mh$.invokeExact(mod, src, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_set_source2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_set_source2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_mod_set_source2(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static FunctionDescriptor fluid_mod_set_source2$descriptor() {
        return fluid_mod_set_source2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_mod_set_source2(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static MethodHandle fluid_mod_set_source2$handle() {
        return fluid_mod_set_source2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_mod_set_source2(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static MemorySegment fluid_mod_set_source2$address() {
        return fluid_mod_set_source2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_mod_set_source2(fluid_mod_t *mod, int src, int flags)
     * }
     */
    public static void fluid_mod_set_source2(MemorySegment mod, int src, int flags) {
        var mh$ = fluid_mod_set_source2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_set_source2", mod, src, flags);
            }
            mh$.invokeExact(mod, src, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_set_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_set_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_mod_set_dest(fluid_mod_t *mod, int dst)
     * }
     */
    public static FunctionDescriptor fluid_mod_set_dest$descriptor() {
        return fluid_mod_set_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_mod_set_dest(fluid_mod_t *mod, int dst)
     * }
     */
    public static MethodHandle fluid_mod_set_dest$handle() {
        return fluid_mod_set_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_mod_set_dest(fluid_mod_t *mod, int dst)
     * }
     */
    public static MemorySegment fluid_mod_set_dest$address() {
        return fluid_mod_set_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_mod_set_dest(fluid_mod_t *mod, int dst)
     * }
     */
    public static void fluid_mod_set_dest(MemorySegment mod, int dst) {
        var mh$ = fluid_mod_set_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_set_dest", mod, dst);
            }
            mh$.invokeExact(mod, dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_set_amount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_set_amount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_mod_set_amount(fluid_mod_t *mod, double amount)
     * }
     */
    public static FunctionDescriptor fluid_mod_set_amount$descriptor() {
        return fluid_mod_set_amount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_mod_set_amount(fluid_mod_t *mod, double amount)
     * }
     */
    public static MethodHandle fluid_mod_set_amount$handle() {
        return fluid_mod_set_amount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_mod_set_amount(fluid_mod_t *mod, double amount)
     * }
     */
    public static MemorySegment fluid_mod_set_amount$address() {
        return fluid_mod_set_amount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_mod_set_amount(fluid_mod_t *mod, double amount)
     * }
     */
    public static void fluid_mod_set_amount(MemorySegment mod, double amount) {
        var mh$ = fluid_mod_set_amount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_set_amount", mod, amount);
            }
            mh$.invokeExact(mod, amount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_source1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_source1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_get_source1(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_source1$descriptor() {
        return fluid_mod_get_source1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_get_source1(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_source1$handle() {
        return fluid_mod_get_source1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_get_source1(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_source1$address() {
        return fluid_mod_get_source1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_get_source1(const fluid_mod_t *mod)
     * }
     */
    public static int fluid_mod_get_source1(MemorySegment mod) {
        var mh$ = fluid_mod_get_source1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_source1", mod);
            }
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_flags1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_flags1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags1(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_flags1$descriptor() {
        return fluid_mod_get_flags1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags1(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_flags1$handle() {
        return fluid_mod_get_flags1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags1(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_flags1$address() {
        return fluid_mod_get_flags1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_get_flags1(const fluid_mod_t *mod)
     * }
     */
    public static int fluid_mod_get_flags1(MemorySegment mod) {
        var mh$ = fluid_mod_get_flags1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_flags1", mod);
            }
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_source2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_source2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_get_source2(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_source2$descriptor() {
        return fluid_mod_get_source2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_get_source2(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_source2$handle() {
        return fluid_mod_get_source2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_get_source2(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_source2$address() {
        return fluid_mod_get_source2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_get_source2(const fluid_mod_t *mod)
     * }
     */
    public static int fluid_mod_get_source2(MemorySegment mod) {
        var mh$ = fluid_mod_get_source2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_source2", mod);
            }
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_flags2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_flags2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags2(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_flags2$descriptor() {
        return fluid_mod_get_flags2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags2(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_flags2$handle() {
        return fluid_mod_get_flags2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_get_flags2(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_flags2$address() {
        return fluid_mod_get_flags2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_get_flags2(const fluid_mod_t *mod)
     * }
     */
    public static int fluid_mod_get_flags2(MemorySegment mod) {
        var mh$ = fluid_mod_get_flags2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_flags2", mod);
            }
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_get_dest(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_dest$descriptor() {
        return fluid_mod_get_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_get_dest(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_dest$handle() {
        return fluid_mod_get_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_get_dest(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_dest$address() {
        return fluid_mod_get_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_get_dest(const fluid_mod_t *mod)
     * }
     */
    public static int fluid_mod_get_dest(MemorySegment mod) {
        var mh$ = fluid_mod_get_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_dest", mod);
            }
            return (int)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_get_amount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_DOUBLE,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_get_amount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double fluid_mod_get_amount(const fluid_mod_t *mod)
     * }
     */
    public static FunctionDescriptor fluid_mod_get_amount$descriptor() {
        return fluid_mod_get_amount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double fluid_mod_get_amount(const fluid_mod_t *mod)
     * }
     */
    public static MethodHandle fluid_mod_get_amount$handle() {
        return fluid_mod_get_amount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double fluid_mod_get_amount(const fluid_mod_t *mod)
     * }
     */
    public static MemorySegment fluid_mod_get_amount$address() {
        return fluid_mod_get_amount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double fluid_mod_get_amount(const fluid_mod_t *mod)
     * }
     */
    public static double fluid_mod_get_amount(MemorySegment mod) {
        var mh$ = fluid_mod_get_amount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_get_amount", mod);
            }
            return (double)mh$.invokeExact(mod);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_test_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_test_identity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_test_identity(const fluid_mod_t *mod1, const fluid_mod_t *mod2)
     * }
     */
    public static FunctionDescriptor fluid_mod_test_identity$descriptor() {
        return fluid_mod_test_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_test_identity(const fluid_mod_t *mod1, const fluid_mod_t *mod2)
     * }
     */
    public static MethodHandle fluid_mod_test_identity$handle() {
        return fluid_mod_test_identity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_test_identity(const fluid_mod_t *mod1, const fluid_mod_t *mod2)
     * }
     */
    public static MemorySegment fluid_mod_test_identity$address() {
        return fluid_mod_test_identity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_test_identity(const fluid_mod_t *mod1, const fluid_mod_t *mod2)
     * }
     */
    public static int fluid_mod_test_identity(MemorySegment mod1, MemorySegment mod2) {
        var mh$ = fluid_mod_test_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_test_identity", mod1, mod2);
            }
            return (int)mh$.invokeExact(mod1, mod2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_has_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_has_source");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_has_source(const fluid_mod_t *mod, int cc, int ctrl)
     * }
     */
    public static FunctionDescriptor fluid_mod_has_source$descriptor() {
        return fluid_mod_has_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_has_source(const fluid_mod_t *mod, int cc, int ctrl)
     * }
     */
    public static MethodHandle fluid_mod_has_source$handle() {
        return fluid_mod_has_source.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_has_source(const fluid_mod_t *mod, int cc, int ctrl)
     * }
     */
    public static MemorySegment fluid_mod_has_source$address() {
        return fluid_mod_has_source.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_has_source(const fluid_mod_t *mod, int cc, int ctrl)
     * }
     */
    public static int fluid_mod_has_source(MemorySegment mod, int cc, int ctrl) {
        var mh$ = fluid_mod_has_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_has_source", mod, cc, ctrl);
            }
            return (int)mh$.invokeExact(mod, cc, ctrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_has_dest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_has_dest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_mod_has_dest(const fluid_mod_t *mod, int gen)
     * }
     */
    public static FunctionDescriptor fluid_mod_has_dest$descriptor() {
        return fluid_mod_has_dest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_mod_has_dest(const fluid_mod_t *mod, int gen)
     * }
     */
    public static MethodHandle fluid_mod_has_dest$handle() {
        return fluid_mod_has_dest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_mod_has_dest(const fluid_mod_t *mod, int gen)
     * }
     */
    public static MemorySegment fluid_mod_has_dest$address() {
        return fluid_mod_has_dest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_mod_has_dest(const fluid_mod_t *mod, int gen)
     * }
     */
    public static int fluid_mod_has_dest(MemorySegment mod, int gen) {
        var mh$ = fluid_mod_has_dest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_has_dest", mod, gen);
            }
            return (int)mh$.invokeExact(mod, gen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_mod_clone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_mod_clone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_mod_clone(fluid_mod_t *mod, const fluid_mod_t *src)
     * }
     */
    public static FunctionDescriptor fluid_mod_clone$descriptor() {
        return fluid_mod_clone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_mod_clone(fluid_mod_t *mod, const fluid_mod_t *src)
     * }
     */
    public static MethodHandle fluid_mod_clone$handle() {
        return fluid_mod_clone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_mod_clone(fluid_mod_t *mod, const fluid_mod_t *src)
     * }
     */
    public static MemorySegment fluid_mod_clone$address() {
        return fluid_mod_clone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_mod_clone(fluid_mod_t *mod, const fluid_mod_t *src)
     * }
     */
    public static void fluid_mod_clone(MemorySegment mod, MemorySegment src) {
        var mh$ = fluid_mod_clone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_mod_clone", mod, src);
            }
            mh$.invokeExact(mod, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GEN_STARTADDROFS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_STARTADDROFS = 0
     * }
     */
    public static int GEN_STARTADDROFS() {
        return GEN_STARTADDROFS;
    }
    private static final int GEN_ENDADDROFS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_ENDADDROFS = 1
     * }
     */
    public static int GEN_ENDADDROFS() {
        return GEN_ENDADDROFS;
    }
    private static final int GEN_STARTLOOPADDROFS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_STARTLOOPADDROFS = 2
     * }
     */
    public static int GEN_STARTLOOPADDROFS() {
        return GEN_STARTLOOPADDROFS;
    }
    private static final int GEN_ENDLOOPADDROFS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_ENDLOOPADDROFS = 3
     * }
     */
    public static int GEN_ENDLOOPADDROFS() {
        return GEN_ENDLOOPADDROFS;
    }
    private static final int GEN_STARTADDRCOARSEOFS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_STARTADDRCOARSEOFS = 4
     * }
     */
    public static int GEN_STARTADDRCOARSEOFS() {
        return GEN_STARTADDRCOARSEOFS;
    }
    private static final int GEN_MODLFOTOPITCH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODLFOTOPITCH = 5
     * }
     */
    public static int GEN_MODLFOTOPITCH() {
        return GEN_MODLFOTOPITCH;
    }
    private static final int GEN_VIBLFOTOPITCH = (int)6L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VIBLFOTOPITCH = 6
     * }
     */
    public static int GEN_VIBLFOTOPITCH() {
        return GEN_VIBLFOTOPITCH;
    }
    private static final int GEN_MODENVTOPITCH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVTOPITCH = 7
     * }
     */
    public static int GEN_MODENVTOPITCH() {
        return GEN_MODENVTOPITCH;
    }
    private static final int GEN_FILTERFC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_FILTERFC = 8
     * }
     */
    public static int GEN_FILTERFC() {
        return GEN_FILTERFC;
    }
    private static final int GEN_FILTERQ = (int)9L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_FILTERQ = 9
     * }
     */
    public static int GEN_FILTERQ() {
        return GEN_FILTERQ;
    }
    private static final int GEN_MODLFOTOFILTERFC = (int)10L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODLFOTOFILTERFC = 10
     * }
     */
    public static int GEN_MODLFOTOFILTERFC() {
        return GEN_MODLFOTOFILTERFC;
    }
    private static final int GEN_MODENVTOFILTERFC = (int)11L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVTOFILTERFC = 11
     * }
     */
    public static int GEN_MODENVTOFILTERFC() {
        return GEN_MODENVTOFILTERFC;
    }
    private static final int GEN_ENDADDRCOARSEOFS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_ENDADDRCOARSEOFS = 12
     * }
     */
    public static int GEN_ENDADDRCOARSEOFS() {
        return GEN_ENDADDRCOARSEOFS;
    }
    private static final int GEN_MODLFOTOVOL = (int)13L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODLFOTOVOL = 13
     * }
     */
    public static int GEN_MODLFOTOVOL() {
        return GEN_MODLFOTOVOL;
    }
    private static final int GEN_UNUSED1 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_UNUSED1 = 14
     * }
     */
    public static int GEN_UNUSED1() {
        return GEN_UNUSED1;
    }
    private static final int GEN_CHORUSSEND = (int)15L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_CHORUSSEND = 15
     * }
     */
    public static int GEN_CHORUSSEND() {
        return GEN_CHORUSSEND;
    }
    private static final int GEN_REVERBSEND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_REVERBSEND = 16
     * }
     */
    public static int GEN_REVERBSEND() {
        return GEN_REVERBSEND;
    }
    private static final int GEN_PAN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_PAN = 17
     * }
     */
    public static int GEN_PAN() {
        return GEN_PAN;
    }
    private static final int GEN_UNUSED2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_UNUSED2 = 18
     * }
     */
    public static int GEN_UNUSED2() {
        return GEN_UNUSED2;
    }
    private static final int GEN_UNUSED3 = (int)19L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_UNUSED3 = 19
     * }
     */
    public static int GEN_UNUSED3() {
        return GEN_UNUSED3;
    }
    private static final int GEN_UNUSED4 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_UNUSED4 = 20
     * }
     */
    public static int GEN_UNUSED4() {
        return GEN_UNUSED4;
    }
    private static final int GEN_MODLFODELAY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODLFODELAY = 21
     * }
     */
    public static int GEN_MODLFODELAY() {
        return GEN_MODLFODELAY;
    }
    private static final int GEN_MODLFOFREQ = (int)22L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODLFOFREQ = 22
     * }
     */
    public static int GEN_MODLFOFREQ() {
        return GEN_MODLFOFREQ;
    }
    private static final int GEN_VIBLFODELAY = (int)23L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VIBLFODELAY = 23
     * }
     */
    public static int GEN_VIBLFODELAY() {
        return GEN_VIBLFODELAY;
    }
    private static final int GEN_VIBLFOFREQ = (int)24L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VIBLFOFREQ = 24
     * }
     */
    public static int GEN_VIBLFOFREQ() {
        return GEN_VIBLFOFREQ;
    }
    private static final int GEN_MODENVDELAY = (int)25L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVDELAY = 25
     * }
     */
    public static int GEN_MODENVDELAY() {
        return GEN_MODENVDELAY;
    }
    private static final int GEN_MODENVATTACK = (int)26L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVATTACK = 26
     * }
     */
    public static int GEN_MODENVATTACK() {
        return GEN_MODENVATTACK;
    }
    private static final int GEN_MODENVHOLD = (int)27L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVHOLD = 27
     * }
     */
    public static int GEN_MODENVHOLD() {
        return GEN_MODENVHOLD;
    }
    private static final int GEN_MODENVDECAY = (int)28L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVDECAY = 28
     * }
     */
    public static int GEN_MODENVDECAY() {
        return GEN_MODENVDECAY;
    }
    private static final int GEN_MODENVSUSTAIN = (int)29L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVSUSTAIN = 29
     * }
     */
    public static int GEN_MODENVSUSTAIN() {
        return GEN_MODENVSUSTAIN;
    }
    private static final int GEN_MODENVRELEASE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_MODENVRELEASE = 30
     * }
     */
    public static int GEN_MODENVRELEASE() {
        return GEN_MODENVRELEASE;
    }
    private static final int GEN_KEYTOMODENVHOLD = (int)31L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYTOMODENVHOLD = 31
     * }
     */
    public static int GEN_KEYTOMODENVHOLD() {
        return GEN_KEYTOMODENVHOLD;
    }
    private static final int GEN_KEYTOMODENVDECAY = (int)32L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYTOMODENVDECAY = 32
     * }
     */
    public static int GEN_KEYTOMODENVDECAY() {
        return GEN_KEYTOMODENVDECAY;
    }
    private static final int GEN_VOLENVDELAY = (int)33L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVDELAY = 33
     * }
     */
    public static int GEN_VOLENVDELAY() {
        return GEN_VOLENVDELAY;
    }
    private static final int GEN_VOLENVATTACK = (int)34L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVATTACK = 34
     * }
     */
    public static int GEN_VOLENVATTACK() {
        return GEN_VOLENVATTACK;
    }
    private static final int GEN_VOLENVHOLD = (int)35L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVHOLD = 35
     * }
     */
    public static int GEN_VOLENVHOLD() {
        return GEN_VOLENVHOLD;
    }
    private static final int GEN_VOLENVDECAY = (int)36L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVDECAY = 36
     * }
     */
    public static int GEN_VOLENVDECAY() {
        return GEN_VOLENVDECAY;
    }
    private static final int GEN_VOLENVSUSTAIN = (int)37L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVSUSTAIN = 37
     * }
     */
    public static int GEN_VOLENVSUSTAIN() {
        return GEN_VOLENVSUSTAIN;
    }
    private static final int GEN_VOLENVRELEASE = (int)38L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VOLENVRELEASE = 38
     * }
     */
    public static int GEN_VOLENVRELEASE() {
        return GEN_VOLENVRELEASE;
    }
    private static final int GEN_KEYTOVOLENVHOLD = (int)39L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYTOVOLENVHOLD = 39
     * }
     */
    public static int GEN_KEYTOVOLENVHOLD() {
        return GEN_KEYTOVOLENVHOLD;
    }
    private static final int GEN_KEYTOVOLENVDECAY = (int)40L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYTOVOLENVDECAY = 40
     * }
     */
    public static int GEN_KEYTOVOLENVDECAY() {
        return GEN_KEYTOVOLENVDECAY;
    }
    private static final int GEN_INSTRUMENT = (int)41L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_INSTRUMENT = 41
     * }
     */
    public static int GEN_INSTRUMENT() {
        return GEN_INSTRUMENT;
    }
    private static final int GEN_RESERVED1 = (int)42L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_RESERVED1 = 42
     * }
     */
    public static int GEN_RESERVED1() {
        return GEN_RESERVED1;
    }
    private static final int GEN_KEYRANGE = (int)43L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYRANGE = 43
     * }
     */
    public static int GEN_KEYRANGE() {
        return GEN_KEYRANGE;
    }
    private static final int GEN_VELRANGE = (int)44L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VELRANGE = 44
     * }
     */
    public static int GEN_VELRANGE() {
        return GEN_VELRANGE;
    }
    private static final int GEN_STARTLOOPADDRCOARSEOFS = (int)45L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_STARTLOOPADDRCOARSEOFS = 45
     * }
     */
    public static int GEN_STARTLOOPADDRCOARSEOFS() {
        return GEN_STARTLOOPADDRCOARSEOFS;
    }
    private static final int GEN_KEYNUM = (int)46L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_KEYNUM = 46
     * }
     */
    public static int GEN_KEYNUM() {
        return GEN_KEYNUM;
    }
    private static final int GEN_VELOCITY = (int)47L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_VELOCITY = 47
     * }
     */
    public static int GEN_VELOCITY() {
        return GEN_VELOCITY;
    }
    private static final int GEN_ATTENUATION = (int)48L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_ATTENUATION = 48
     * }
     */
    public static int GEN_ATTENUATION() {
        return GEN_ATTENUATION;
    }
    private static final int GEN_RESERVED2 = (int)49L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_RESERVED2 = 49
     * }
     */
    public static int GEN_RESERVED2() {
        return GEN_RESERVED2;
    }
    private static final int GEN_ENDLOOPADDRCOARSEOFS = (int)50L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_ENDLOOPADDRCOARSEOFS = 50
     * }
     */
    public static int GEN_ENDLOOPADDRCOARSEOFS() {
        return GEN_ENDLOOPADDRCOARSEOFS;
    }
    private static final int GEN_COARSETUNE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_COARSETUNE = 51
     * }
     */
    public static int GEN_COARSETUNE() {
        return GEN_COARSETUNE;
    }
    private static final int GEN_FINETUNE = (int)52L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_FINETUNE = 52
     * }
     */
    public static int GEN_FINETUNE() {
        return GEN_FINETUNE;
    }
    private static final int GEN_SAMPLEID = (int)53L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_SAMPLEID = 53
     * }
     */
    public static int GEN_SAMPLEID() {
        return GEN_SAMPLEID;
    }
    private static final int GEN_SAMPLEMODE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_SAMPLEMODE = 54
     * }
     */
    public static int GEN_SAMPLEMODE() {
        return GEN_SAMPLEMODE;
    }
    private static final int GEN_RESERVED3 = (int)55L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_RESERVED3 = 55
     * }
     */
    public static int GEN_RESERVED3() {
        return GEN_RESERVED3;
    }
    private static final int GEN_SCALETUNE = (int)56L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_SCALETUNE = 56
     * }
     */
    public static int GEN_SCALETUNE() {
        return GEN_SCALETUNE;
    }
    private static final int GEN_EXCLUSIVECLASS = (int)57L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_EXCLUSIVECLASS = 57
     * }
     */
    public static int GEN_EXCLUSIVECLASS() {
        return GEN_EXCLUSIVECLASS;
    }
    private static final int GEN_OVERRIDEROOTKEY = (int)58L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_OVERRIDEROOTKEY = 58
     * }
     */
    public static int GEN_OVERRIDEROOTKEY() {
        return GEN_OVERRIDEROOTKEY;
    }
    private static final int GEN_PITCH = (int)59L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_PITCH = 59
     * }
     */
    public static int GEN_PITCH() {
        return GEN_PITCH;
    }
    private static final int GEN_CUSTOM_BALANCE = (int)60L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_CUSTOM_BALANCE = 60
     * }
     */
    public static int GEN_CUSTOM_BALANCE() {
        return GEN_CUSTOM_BALANCE;
    }
    private static final int GEN_CUSTOM_FILTERFC = (int)61L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_CUSTOM_FILTERFC = 61
     * }
     */
    public static int GEN_CUSTOM_FILTERFC() {
        return GEN_CUSTOM_FILTERFC;
    }
    private static final int GEN_CUSTOM_FILTERQ = (int)62L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_CUSTOM_FILTERQ = 62
     * }
     */
    public static int GEN_CUSTOM_FILTERQ() {
        return GEN_CUSTOM_FILTERQ;
    }
    private static final int GEN_LAST = (int)63L;
    /**
     * {@snippet lang=c :
     * enum fluid_gen_type.GEN_LAST = 63
     * }
     */
    public static int GEN_LAST() {
        return GEN_LAST;
    }
    private static final int FLUID_VOICE_OVERWRITE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum fluid_voice_add_mod.FLUID_VOICE_OVERWRITE = 0
     * }
     */
    public static int FLUID_VOICE_OVERWRITE() {
        return FLUID_VOICE_OVERWRITE;
    }
    private static final int FLUID_VOICE_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum fluid_voice_add_mod.FLUID_VOICE_ADD = 1
     * }
     */
    public static int FLUID_VOICE_ADD() {
        return FLUID_VOICE_ADD;
    }
    private static final int FLUID_VOICE_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum fluid_voice_add_mod.FLUID_VOICE_DEFAULT = 2
     * }
     */
    public static int FLUID_VOICE_DEFAULT() {
        return FLUID_VOICE_DEFAULT;
    }

    private static class fluid_voice_add_mod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_add_mod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_voice_add_mod(fluid_voice_t *voice, fluid_mod_t *mod, int mode)
     * }
     */
    public static FunctionDescriptor fluid_voice_add_mod$descriptor() {
        return fluid_voice_add_mod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_voice_add_mod(fluid_voice_t *voice, fluid_mod_t *mod, int mode)
     * }
     */
    public static MethodHandle fluid_voice_add_mod$handle() {
        return fluid_voice_add_mod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_voice_add_mod(fluid_voice_t *voice, fluid_mod_t *mod, int mode)
     * }
     */
    public static MemorySegment fluid_voice_add_mod$address() {
        return fluid_voice_add_mod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_voice_add_mod(fluid_voice_t *voice, fluid_mod_t *mod, int mode)
     * }
     */
    public static void fluid_voice_add_mod(MemorySegment voice, MemorySegment mod, int mode) {
        var mh$ = fluid_voice_add_mod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_add_mod", voice, mod, mode);
            }
            mh$.invokeExact(voice, mod, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_gen_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_FLOAT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_gen_get");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float fluid_voice_gen_get(fluid_voice_t *voice, int gen)
     * }
     */
    public static FunctionDescriptor fluid_voice_gen_get$descriptor() {
        return fluid_voice_gen_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float fluid_voice_gen_get(fluid_voice_t *voice, int gen)
     * }
     */
    public static MethodHandle fluid_voice_gen_get$handle() {
        return fluid_voice_gen_get.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float fluid_voice_gen_get(fluid_voice_t *voice, int gen)
     * }
     */
    public static MemorySegment fluid_voice_gen_get$address() {
        return fluid_voice_gen_get.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float fluid_voice_gen_get(fluid_voice_t *voice, int gen)
     * }
     */
    public static float fluid_voice_gen_get(MemorySegment voice, int gen) {
        var mh$ = fluid_voice_gen_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_gen_get", voice, gen);
            }
            return (float)mh$.invokeExact(voice, gen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_gen_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_gen_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_voice_gen_set(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static FunctionDescriptor fluid_voice_gen_set$descriptor() {
        return fluid_voice_gen_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_voice_gen_set(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static MethodHandle fluid_voice_gen_set$handle() {
        return fluid_voice_gen_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_voice_gen_set(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static MemorySegment fluid_voice_gen_set$address() {
        return fluid_voice_gen_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_voice_gen_set(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static void fluid_voice_gen_set(MemorySegment voice, int gen, float val) {
        var mh$ = fluid_voice_gen_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_gen_set", voice, gen, val);
            }
            mh$.invokeExact(voice, gen, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_gen_incr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_gen_incr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_voice_gen_incr(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static FunctionDescriptor fluid_voice_gen_incr$descriptor() {
        return fluid_voice_gen_incr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_voice_gen_incr(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static MethodHandle fluid_voice_gen_incr$handle() {
        return fluid_voice_gen_incr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_voice_gen_incr(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static MemorySegment fluid_voice_gen_incr$address() {
        return fluid_voice_gen_incr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_voice_gen_incr(fluid_voice_t *voice, int gen, float val)
     * }
     */
    public static void fluid_voice_gen_incr(MemorySegment voice, int gen, float val) {
        var mh$ = fluid_voice_gen_incr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_gen_incr", voice, gen, val);
            }
            mh$.invokeExact(voice, gen, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int fluid_voice_get_id(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_id$descriptor() {
        return fluid_voice_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int fluid_voice_get_id(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_id$handle() {
        return fluid_voice_get_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int fluid_voice_get_id(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_id$address() {
        return fluid_voice_get_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int fluid_voice_get_id(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_id(MemorySegment voice) {
        var mh$ = fluid_voice_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_id", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_channel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_channel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_get_channel(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_channel$descriptor() {
        return fluid_voice_get_channel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_get_channel(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_channel$handle() {
        return fluid_voice_get_channel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_get_channel(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_channel$address() {
        return fluid_voice_get_channel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_get_channel(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_channel(MemorySegment voice) {
        var mh$ = fluid_voice_get_channel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_channel", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_get_key(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_key$descriptor() {
        return fluid_voice_get_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_get_key(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_key$handle() {
        return fluid_voice_get_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_get_key(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_key$address() {
        return fluid_voice_get_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_get_key(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_key(MemorySegment voice) {
        var mh$ = fluid_voice_get_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_key", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_actual_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_actual_key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_key(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_actual_key$descriptor() {
        return fluid_voice_get_actual_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_key(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_actual_key$handle() {
        return fluid_voice_get_actual_key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_key(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_actual_key$address() {
        return fluid_voice_get_actual_key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_get_actual_key(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_actual_key(MemorySegment voice) {
        var mh$ = fluid_voice_get_actual_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_actual_key", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_velocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_get_velocity(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_velocity$descriptor() {
        return fluid_voice_get_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_get_velocity(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_velocity$handle() {
        return fluid_voice_get_velocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_get_velocity(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_velocity$address() {
        return fluid_voice_get_velocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_get_velocity(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_velocity(MemorySegment voice) {
        var mh$ = fluid_voice_get_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_velocity", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_get_actual_velocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_get_actual_velocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_velocity(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_get_actual_velocity$descriptor() {
        return fluid_voice_get_actual_velocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_velocity(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_get_actual_velocity$handle() {
        return fluid_voice_get_actual_velocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_get_actual_velocity(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_get_actual_velocity$address() {
        return fluid_voice_get_actual_velocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_get_actual_velocity(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_get_actual_velocity(MemorySegment voice) {
        var mh$ = fluid_voice_get_actual_velocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_get_actual_velocity", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_is_playing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_is_playing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_is_playing(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_is_playing$descriptor() {
        return fluid_voice_is_playing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_is_playing(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_is_playing$handle() {
        return fluid_voice_is_playing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_is_playing(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_is_playing$address() {
        return fluid_voice_is_playing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_is_playing(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_is_playing(MemorySegment voice) {
        var mh$ = fluid_voice_is_playing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_is_playing", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_is_on {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_is_on");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_is_on(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_is_on$descriptor() {
        return fluid_voice_is_on.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_is_on(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_is_on$handle() {
        return fluid_voice_is_on.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_is_on(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_is_on$address() {
        return fluid_voice_is_on.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_is_on(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_is_on(MemorySegment voice) {
        var mh$ = fluid_voice_is_on.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_is_on", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_is_sustained {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_is_sustained");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_is_sustained(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_is_sustained$descriptor() {
        return fluid_voice_is_sustained.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_is_sustained(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_is_sustained$handle() {
        return fluid_voice_is_sustained.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_is_sustained(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_is_sustained$address() {
        return fluid_voice_is_sustained.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_is_sustained(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_is_sustained(MemorySegment voice) {
        var mh$ = fluid_voice_is_sustained.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_is_sustained", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_is_sostenuto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_is_sostenuto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_is_sostenuto(const fluid_voice_t *voice)
     * }
     */
    public static FunctionDescriptor fluid_voice_is_sostenuto$descriptor() {
        return fluid_voice_is_sostenuto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_is_sostenuto(const fluid_voice_t *voice)
     * }
     */
    public static MethodHandle fluid_voice_is_sostenuto$handle() {
        return fluid_voice_is_sostenuto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_is_sostenuto(const fluid_voice_t *voice)
     * }
     */
    public static MemorySegment fluid_voice_is_sostenuto$address() {
        return fluid_voice_is_sostenuto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_is_sostenuto(const fluid_voice_t *voice)
     * }
     */
    public static int fluid_voice_is_sostenuto(MemorySegment voice) {
        var mh$ = fluid_voice_is_sostenuto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_is_sostenuto", voice);
            }
            return (int)mh$.invokeExact(voice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_optimize_sample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_optimize_sample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_voice_optimize_sample(fluid_sample_t *s)
     * }
     */
    public static FunctionDescriptor fluid_voice_optimize_sample$descriptor() {
        return fluid_voice_optimize_sample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_voice_optimize_sample(fluid_sample_t *s)
     * }
     */
    public static MethodHandle fluid_voice_optimize_sample$handle() {
        return fluid_voice_optimize_sample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_voice_optimize_sample(fluid_sample_t *s)
     * }
     */
    public static MemorySegment fluid_voice_optimize_sample$address() {
        return fluid_voice_optimize_sample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_voice_optimize_sample(fluid_sample_t *s)
     * }
     */
    public static int fluid_voice_optimize_sample(MemorySegment s) {
        var mh$ = fluid_voice_optimize_sample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_optimize_sample", s);
            }
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_voice_update_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_voice_update_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_voice_update_param(fluid_voice_t *voice, int gen)
     * }
     */
    public static FunctionDescriptor fluid_voice_update_param$descriptor() {
        return fluid_voice_update_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_voice_update_param(fluid_voice_t *voice, int gen)
     * }
     */
    public static MethodHandle fluid_voice_update_param$handle() {
        return fluid_voice_update_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_voice_update_param(fluid_voice_t *voice, int gen)
     * }
     */
    public static MemorySegment fluid_voice_update_param$address() {
        return fluid_voice_update_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_voice_update_param(fluid_voice_t *voice, int gen)
     * }
     */
    public static void fluid_voice_update_param(MemorySegment voice, int gen) {
        var mh$ = fluid_voice_update_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_voice_update_param", voice, gen);
            }
            mh$.invokeExact(voice, gen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void fluid_version(int *major, int *minor, int *micro)
     * }
     */
    public static FunctionDescriptor fluid_version$descriptor() {
        return fluid_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void fluid_version(int *major, int *minor, int *micro)
     * }
     */
    public static MethodHandle fluid_version$handle() {
        return fluid_version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void fluid_version(int *major, int *minor, int *micro)
     * }
     */
    public static MemorySegment fluid_version$address() {
        return fluid_version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void fluid_version(int *major, int *minor, int *micro)
     * }
     */
    public static void fluid_version(MemorySegment major, MemorySegment minor, MemorySegment micro) {
        var mh$ = fluid_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_version", major, minor, micro);
            }
            mh$.invokeExact(major, minor, micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_version_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_POINTER    );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_version_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fluid_version_str()
     * }
     */
    public static FunctionDescriptor fluid_version_str$descriptor() {
        return fluid_version_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fluid_version_str()
     * }
     */
    public static MethodHandle fluid_version_str$handle() {
        return fluid_version_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fluid_version_str()
     * }
     */
    public static MemorySegment fluid_version_str$address() {
        return fluid_version_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fluid_version_str()
     * }
     */
    public static MemorySegment fluid_version_str() {
        var mh$ = fluid_version_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_version_str");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_is_active");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_is_active(fluid_ladspa_fx_t *fx)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_is_active$descriptor() {
        return fluid_ladspa_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_is_active(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MethodHandle fluid_ladspa_is_active$handle() {
        return fluid_ladspa_is_active.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_is_active(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MemorySegment fluid_ladspa_is_active$address() {
        return fluid_ladspa_is_active.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_is_active(fluid_ladspa_fx_t *fx)
     * }
     */
    public static int fluid_ladspa_is_active(MemorySegment fx) {
        var mh$ = fluid_ladspa_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_is_active", fx);
            }
            return (int)mh$.invokeExact(fx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_activate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_activate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_activate$descriptor() {
        return fluid_ladspa_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_activate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MethodHandle fluid_ladspa_activate$handle() {
        return fluid_ladspa_activate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_activate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MemorySegment fluid_ladspa_activate$address() {
        return fluid_ladspa_activate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_activate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static int fluid_ladspa_activate(MemorySegment fx) {
        var mh$ = fluid_ladspa_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_activate", fx);
            }
            return (int)mh$.invokeExact(fx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_deactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_deactivate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_deactivate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_deactivate$descriptor() {
        return fluid_ladspa_deactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_deactivate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MethodHandle fluid_ladspa_deactivate$handle() {
        return fluid_ladspa_deactivate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_deactivate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MemorySegment fluid_ladspa_deactivate$address() {
        return fluid_ladspa_deactivate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_deactivate(fluid_ladspa_fx_t *fx)
     * }
     */
    public static int fluid_ladspa_deactivate(MemorySegment fx) {
        var mh$ = fluid_ladspa_deactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_deactivate", fx);
            }
            return (int)mh$.invokeExact(fx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_reset(fluid_ladspa_fx_t *fx)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_reset$descriptor() {
        return fluid_ladspa_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_reset(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MethodHandle fluid_ladspa_reset$handle() {
        return fluid_ladspa_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_reset(fluid_ladspa_fx_t *fx)
     * }
     */
    public static MemorySegment fluid_ladspa_reset$address() {
        return fluid_ladspa_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_reset(fluid_ladspa_fx_t *fx)
     * }
     */
    public static int fluid_ladspa_reset(MemorySegment fx) {
        var mh$ = fluid_ladspa_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_reset", fx);
            }
            return (int)mh$.invokeExact(fx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_check");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_check(fluid_ladspa_fx_t *fx, char *err, int err_size)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_check$descriptor() {
        return fluid_ladspa_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_check(fluid_ladspa_fx_t *fx, char *err, int err_size)
     * }
     */
    public static MethodHandle fluid_ladspa_check$handle() {
        return fluid_ladspa_check.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_check(fluid_ladspa_fx_t *fx, char *err, int err_size)
     * }
     */
    public static MemorySegment fluid_ladspa_check$address() {
        return fluid_ladspa_check.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_check(fluid_ladspa_fx_t *fx, char *err, int err_size)
     * }
     */
    public static int fluid_ladspa_check(MemorySegment fx, MemorySegment err, int err_size) {
        var mh$ = fluid_ladspa_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_check", fx, err, err_size);
            }
            return (int)mh$.invokeExact(fx, err, err_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_host_port_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_host_port_exists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_host_port_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_host_port_exists$descriptor() {
        return fluid_ladspa_host_port_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_host_port_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MethodHandle fluid_ladspa_host_port_exists$handle() {
        return fluid_ladspa_host_port_exists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_host_port_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MemorySegment fluid_ladspa_host_port_exists$address() {
        return fluid_ladspa_host_port_exists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_host_port_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static int fluid_ladspa_host_port_exists(MemorySegment fx, MemorySegment name) {
        var mh$ = fluid_ladspa_host_port_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_host_port_exists", fx, name);
            }
            return (int)mh$.invokeExact(fx, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_add_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_add_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_buffer(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_add_buffer$descriptor() {
        return fluid_ladspa_add_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_buffer(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MethodHandle fluid_ladspa_add_buffer$handle() {
        return fluid_ladspa_add_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_buffer(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MemorySegment fluid_ladspa_add_buffer$address() {
        return fluid_ladspa_add_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_add_buffer(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static int fluid_ladspa_add_buffer(MemorySegment fx, MemorySegment name) {
        var mh$ = fluid_ladspa_add_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_add_buffer", fx, name);
            }
            return (int)mh$.invokeExact(fx, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_buffer_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_buffer_exists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_buffer_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_buffer_exists$descriptor() {
        return fluid_ladspa_buffer_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_buffer_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MethodHandle fluid_ladspa_buffer_exists$handle() {
        return fluid_ladspa_buffer_exists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_buffer_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MemorySegment fluid_ladspa_buffer_exists$address() {
        return fluid_ladspa_buffer_exists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_buffer_exists(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static int fluid_ladspa_buffer_exists(MemorySegment fx, MemorySegment name) {
        var mh$ = fluid_ladspa_buffer_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_buffer_exists", fx, name);
            }
            return (int)mh$.invokeExact(fx, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_add_effect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_add_effect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_effect(fluid_ladspa_fx_t *fx, const char *effect_name, const char *lib_name, const char *plugin_name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_add_effect$descriptor() {
        return fluid_ladspa_add_effect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_effect(fluid_ladspa_fx_t *fx, const char *effect_name, const char *lib_name, const char *plugin_name)
     * }
     */
    public static MethodHandle fluid_ladspa_add_effect$handle() {
        return fluid_ladspa_add_effect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_add_effect(fluid_ladspa_fx_t *fx, const char *effect_name, const char *lib_name, const char *plugin_name)
     * }
     */
    public static MemorySegment fluid_ladspa_add_effect$address() {
        return fluid_ladspa_add_effect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_add_effect(fluid_ladspa_fx_t *fx, const char *effect_name, const char *lib_name, const char *plugin_name)
     * }
     */
    public static int fluid_ladspa_add_effect(MemorySegment fx, MemorySegment effect_name, MemorySegment lib_name, MemorySegment plugin_name) {
        var mh$ = fluid_ladspa_add_effect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_add_effect", fx, effect_name, lib_name, plugin_name);
            }
            return (int)mh$.invokeExact(fx, effect_name, lib_name, plugin_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_effect_can_mix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_effect_can_mix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_can_mix(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_effect_can_mix$descriptor() {
        return fluid_ladspa_effect_can_mix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_can_mix(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MethodHandle fluid_ladspa_effect_can_mix$handle() {
        return fluid_ladspa_effect_can_mix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_can_mix(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static MemorySegment fluid_ladspa_effect_can_mix$address() {
        return fluid_ladspa_effect_can_mix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_effect_can_mix(fluid_ladspa_fx_t *fx, const char *name)
     * }
     */
    public static int fluid_ladspa_effect_can_mix(MemorySegment fx, MemorySegment name) {
        var mh$ = fluid_ladspa_effect_can_mix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_effect_can_mix", fx, name);
            }
            return (int)mh$.invokeExact(fx, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_effect_set_mix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_INT,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_effect_set_mix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_mix(fluid_ladspa_fx_t *fx, const char *name, int mix, float gain)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_effect_set_mix$descriptor() {
        return fluid_ladspa_effect_set_mix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_mix(fluid_ladspa_fx_t *fx, const char *name, int mix, float gain)
     * }
     */
    public static MethodHandle fluid_ladspa_effect_set_mix$handle() {
        return fluid_ladspa_effect_set_mix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_mix(fluid_ladspa_fx_t *fx, const char *name, int mix, float gain)
     * }
     */
    public static MemorySegment fluid_ladspa_effect_set_mix$address() {
        return fluid_ladspa_effect_set_mix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_mix(fluid_ladspa_fx_t *fx, const char *name, int mix, float gain)
     * }
     */
    public static int fluid_ladspa_effect_set_mix(MemorySegment fx, MemorySegment name, int mix, float gain) {
        var mh$ = fluid_ladspa_effect_set_mix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_effect_set_mix", fx, name, mix, gain);
            }
            return (int)mh$.invokeExact(fx, name, mix, gain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_effect_port_exists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_effect_port_exists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_port_exists(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_effect_port_exists$descriptor() {
        return fluid_ladspa_effect_port_exists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_port_exists(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name)
     * }
     */
    public static MethodHandle fluid_ladspa_effect_port_exists$handle() {
        return fluid_ladspa_effect_port_exists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_port_exists(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name)
     * }
     */
    public static MemorySegment fluid_ladspa_effect_port_exists$address() {
        return fluid_ladspa_effect_port_exists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_effect_port_exists(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name)
     * }
     */
    public static int fluid_ladspa_effect_port_exists(MemorySegment fx, MemorySegment effect_name, MemorySegment port_name) {
        var mh$ = fluid_ladspa_effect_port_exists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_effect_port_exists", fx, effect_name, port_name);
            }
            return (int)mh$.invokeExact(fx, effect_name, port_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_effect_set_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_FLOAT
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_effect_set_control");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_control(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, float val)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_effect_set_control$descriptor() {
        return fluid_ladspa_effect_set_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_control(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, float val)
     * }
     */
    public static MethodHandle fluid_ladspa_effect_set_control$handle() {
        return fluid_ladspa_effect_set_control.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_control(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, float val)
     * }
     */
    public static MemorySegment fluid_ladspa_effect_set_control$address() {
        return fluid_ladspa_effect_set_control.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_effect_set_control(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, float val)
     * }
     */
    public static int fluid_ladspa_effect_set_control(MemorySegment fx, MemorySegment effect_name, MemorySegment port_name, float val) {
        var mh$ = fluid_ladspa_effect_set_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_effect_set_control", fx, effect_name, port_name, val);
            }
            return (int)mh$.invokeExact(fx, effect_name, port_name, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fluid_ladspa_effect_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            fluidsynth_h.C_INT,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER,
            fluidsynth_h.C_POINTER
        );

        public static final MemorySegment ADDR = fluidsynth_h.findOrThrow("fluid_ladspa_effect_link");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_link(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, const char *name)
     * }
     */
    public static FunctionDescriptor fluid_ladspa_effect_link$descriptor() {
        return fluid_ladspa_effect_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_link(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, const char *name)
     * }
     */
    public static MethodHandle fluid_ladspa_effect_link$handle() {
        return fluid_ladspa_effect_link.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fluid_ladspa_effect_link(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, const char *name)
     * }
     */
    public static MemorySegment fluid_ladspa_effect_link$address() {
        return fluid_ladspa_effect_link.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fluid_ladspa_effect_link(fluid_ladspa_fx_t *fx, const char *effect_name, const char *port_name, const char *name)
     * }
     */
    public static int fluid_ladspa_effect_link(MemorySegment fx, MemorySegment effect_name, MemorySegment port_name, MemorySegment name) {
        var mh$ = fluid_ladspa_effect_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fluid_ladspa_effect_link", fx, effect_name, port_name, name);
            }
            return (int)mh$.invokeExact(fx, effect_name, port_name, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long _POSIX_C_SOURCE = 200809L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return _POSIX_C_SOURCE;
    }
    private static final int __TIMESIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return __TIMESIZE;
    }
    private static final long __STDC_IEC_60559_BFP__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return __STDC_IEC_60559_BFP__;
    }
    private static final long __STDC_IEC_60559_COMPLEX__ = 201404L;
    /**
     * {@snippet lang=c :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return __STDC_IEC_60559_COMPLEX__;
    }
    private static final long __STDC_ISO_10646__ = 201706L;
    /**
     * {@snippet lang=c :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return __STDC_ISO_10646__;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return EOF;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        class Holder {
            static final MemorySegment P_tmpdir
                = fluidsynth_h.LIBRARY_ARENA.allocateFrom("/tmp");
        }
        return Holder.P_tmpdir;
    }
    private static final int __HAVE_DISTINCT_FLOAT16 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return __HAVE_DISTINCT_FLOAT16;
    }
    private static final int __HAVE_DISTINCT_FLOAT128X = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return __HAVE_DISTINCT_FLOAT128X;
    }
    private static final int __HAVE_FLOAT128_UNLIKE_LDBL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return __HAVE_FLOAT128_UNLIKE_LDBL;
    }
    private static final int FLUID_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FLUID_OK 0
     * }
     */
    public static int FLUID_OK() {
        return FLUID_OK;
    }
    private static final int FLUID_FAILED = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define FLUID_FAILED -1
     * }
     */
    public static int FLUID_FAILED() {
        return FLUID_FAILED;
    }
    /**
     * {@snippet lang=c :
     * #define FLUIDSYNTH_VERSION "2.3.7"
     * }
     */
    public static MemorySegment FLUIDSYNTH_VERSION() {
        class Holder {
            static final MemorySegment FLUIDSYNTH_VERSION
                = fluidsynth_h.LIBRARY_ARENA.allocateFrom("2.3.7");
        }
        return Holder.FLUIDSYNTH_VERSION;
    }
}

